window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "hec", "modulename": "hec", "kind": "module", "doc": "<p>Module to provide native Python equivalent to HEC Java classes.</p>\n\n<p>Quick links to Constants:</p>\n\n<ul>\n<li><a href=\"#Combine\">Combine</a></li>\n<li><a href=\"#Safety\">Safety</a></li>\n<li><a href=\"#Select\">Select</a></li>\n<li><a href=\"#SelectionState\">SelectionState</a></li>\n</ul>\n\n<p>Quick links to Classes:</p>\n\n<ul>\n<li><a href=\"#CwmsDataStore\">CwmsDataStore</a></li>\n<li><a href=\"#DssDataStore\">DssDataStore</a></li>\n<li><a href=\"#Duration\">Duration</a></li>\n<li><a href=\"#ElevParameter\">ElevParameter</a></li>\n<li><a href=\"#HecTime\">HecTime</a></li>\n<li><a href=\"#Interval\">Interval</a></li>\n<li><a href=\"#Location\">Location</a></li>\n<li><a href=\"#Parameter\">Parameter</a></li>\n<li><a href=\"#ParameterType\">ParameterType</a></li>\n<li><a href=\"#Quality\">Quality</a></li>\n<li><a href=\"#TimeSeries\">TimeSeries</a></li>\n<li><a href=\"#TimeSeriesValue\">TimeSeriesValue</a></li>\n<li><a href=\"#TimeSpan\">TimeSpan</a></li>\n<li><a href=\"#UnitQuantity\">UnitQuantity</a></li>\n</ul>\n\n<p>Quick links to Exceptions:</p>\n\n<ul>\n<li><a href=\"#DataStoreException\">DataStoreException</a></li>\n<li><a href=\"#DurationException\">DurationException</a></li>\n<li><a href=\"#HecTimeException\">HecTimeException</a></li>\n<li><a href=\"#IntervalException\">IntervalException</a></li>\n<li><a href=\"#LocationException\">LocationException</a></li>\n<li><a href=\"#ParameterException\">ParameterException</a></li>\n<li><a href=\"#ParameterTypeException\">ParameterTypeException</a></li>\n<li><a href=\"#TimeSeriesException\">TimeSeriesException</a></li>\n<li><a href=\"#TimeSpanException\">TimeSpanException</a></li>\n<li><a href=\"#UnitException\">UnitException</a></li>\n</ul>\n"}, {"fullname": "hec.Combine", "modulename": "hec", "qualname": "Combine", "kind": "class", "doc": "<p>Enumeration for combining selection states (current, new)</p>\n\n<ul>\n<li><code>NOOP</code>: Result is current selection state for all items</li>\n<li><code>REPLACE</code>: Result is new selection state for all items</li>\n<li><code>AND</code>: Result is current selection ANDed with new selection state</li>\n<li><code>OR</code>: Result is current selection ORed with new selection state</li>\n<li><code>XOR</code>: Result is current selection XORed with new selection state</li>\n</ul>\n", "bases": "enum.Enum"}, {"fullname": "hec.Combine.NOOP", "modulename": "hec", "qualname": "Combine.NOOP", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Combine.NOOP: 0&gt;"}, {"fullname": "hec.Combine.REPLACE", "modulename": "hec", "qualname": "Combine.REPLACE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Combine.REPLACE: 1&gt;"}, {"fullname": "hec.Combine.AND", "modulename": "hec", "qualname": "Combine.AND", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Combine.AND: 2&gt;"}, {"fullname": "hec.Combine.OR", "modulename": "hec", "qualname": "Combine.OR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Combine.OR: 3&gt;"}, {"fullname": "hec.Combine.XOR", "modulename": "hec", "qualname": "Combine.XOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Combine.XOR: 4&gt;"}, {"fullname": "hec.CwmsDataStore", "modulename": "hec", "qualname": "CwmsDataStore", "kind": "class", "doc": "<p>Class to facilitate cataloging, storing, retrieving, and deleting data in CWMS databases.</p>\n\n<p>Requires installation of the <a href=\"https://pypi.org/project/cwms-python/\">cwms-python</a> &gt;= '0.6.0'.</p>\n", "bases": "hec.datastore.AbstractDataStore"}, {"fullname": "hec.CwmsDataStore.__init__", "modulename": "hec", "qualname": "CwmsDataStore.__init__", "kind": "function", "doc": "<p>Creates and returns a new CwmsDataStore object.</p>\n\n<p>Equivalent of calling <a href=\"#CwmsDataStore.open\"><code>CwmsDataStore.open(name, **kwargs)</code></a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>api_key (Optional[str], must be passed by name):</strong>  The API key for this data store. Must be specified to write to or delete from this data store. Defaults to None. If None:\n<ul>\n<li>The value of environment variable \"cda_api_key\" is used, if it exists.</li>\n</ul></li>\n<li><strong>description (Optional[str], must be passed by name):</strong>  The description assocaited with the data store. Defaults to None</li>\n<li><strong>end_time (Optional[Any], must be passed by name):</strong>  Specifies the end time of the data store's time window. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor. Defaults to None</li>\n<li><strong>name (Optional[str], must be passed by name):</strong>  The API root (base URL). Defaults to None. If None:\n<ul>\n<li>The value of environment variable \"cda_api_root\" is used, if it exists.</li>\n<li>If the environment variable \"cda_api_root\" is not set, the default, the default value used in <code>cwms.api.init_session(api_root=None)</code> is used.</li>\n</ul></li>\n<li><strong>office (Optional[str], must be passed by name):</strong>  The default CWMS office for the data store. If None or not specified, each access method will have to have an office specified.</li>\n<li><strong>read_only (Optional[bool], must be passed by name):</strong>  Specifies whether to open the data store in read-only mode. Defaults to True</li>\n<li><strong>start_time (Optional[Any], must be passed by name):</strong>  Specifies the start time of the data store's time window. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor. Defaults to None</li>\n<li><strong>store_rule (Optional[str], must be passed by name):</strong>  Specifies the default behavior to use when storing data. If specified, it must be one of the following (case insensitive). Defaults to 'REPLACE_ALL'.\n<ul>\n<li>'DELETE_INSERT' - delete all existing data in the incoming time window, then store the incoming data</li>\n<li>'DO_NOT_REPLACE' - store only non-existing data</li>\n<li>'REPLACE_ALL' - store existing and non-existing data</li>\n<li>'REPLACE_MISSING_VALUES_ONLY' - store incoming data only where existing data is missing</li>\n<li>'REPLACE_WITH_NON_MISSING' - store only non-missing incoming data</li>\n</ul></li>\n<li><strong>time_zone (Optional[str], must be passed by name):</strong>  The default time zone for the data store. Defaults to the local time zone.</li>\n<li><strong>trim (Optional[bool], must be passed by name):</strong>  Specifies the data store's default setting to trim missing values from the beginning and end of any regular time series data set retrieved.\nDefaults to True.</li>\n<li><strong>units:</strong>  (Optional[str], must be passed by name): \"EN\" or \"SI\", specifying English or metric unit system as the default unit system for the data store. Defaults to \"EN\"</li>\n<li><strong>vertical_datum:</strong>  (Optional[str], must be passed by name): \"NGVD29\", \"NAVD88\", or \"NATIVE\", specifying the data store's default vertical datum for retrieving elevation data. Defaults to \"NATIVE\"</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "hec.CwmsDataStore.catalog", "modulename": "hec", "qualname": "CwmsDataStore.catalog", "kind": "function", "doc": "<p>Retrieves CWMS identifiers for the specified data type, optionally with extents for specific data types.</p>\n\n<p>Currently only time series objects may be cataloged.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data_type (str):</strong>  Must be one of the following (case insensitive):\n<ul>\n<li><strong>'TIMESERIES'</strong>: specifies cataloging CWMS time series objects in the data store</li>\n<li><strong>'LOCATION'</strong>: specfies catalog CWMS locations in the data store</li>\n</ul></li>\n<li><p><strong>pattern (Optional[str], must be passed by name):</strong>  An extended wildcard pattern to use for matching identifiers. <code>regex</code> takes precedence if both are specified. Defaults to None.</p>\n\n<table>\n<pre>\n<tr><th colspan=\"2\">Pattern Examples</th></tr>\n<tr><th>pattern</th><th>matches</th></tr>\n<tr><td><code>abc</code></td><td>the literal string \"abc\"</td></tr>\n<tr><td><code>ab{2,3}c{2}</code></td><td>1 \"a\" followed by 2 or 3 \"b\" followed by 2 \"c\"</td></tr>\n<tr><td><code>a*b?c</code></td><td>1 \"a\" followed by zero or more characters followed by \"b\" followed by 1 character followed by 1 \"c\"</td></tr>\n<tr><td><code>[abc]</code></td><td>1 \"a\" or \"b\" or \"c\"</td></tr>\n<tr><td><code>^[abc]$</code></td><td>beginning of string followed by 1 \"a\" or \"b\" or \"c\" followed by end of string</td></tr>\n<tr><td><code>[!abc]</code></td><td>1 character other than \"a\" or \"b\" or \"c\"</td></tr>\n<tr><td><code>[_a-z0-9]*</code></td><td>zero or more of characters \"_\" or \"a\" through \"z\" or \"0\" through \"9\"</td></tr>\n<tr><td><code style=\"white-space: nowrap;\">[!a-z0-9]{1,5}</code></td><td>1..5 characters other than \"a\" through \"z\" or \"0\" through \"9\"</td></tr>\n<tr><td><code>(abc|def)</code></td><td>either \"abc\" or \"def\"</td></tr>\n</pre>\n</table></li>\n<li><p><strong>regex (Optional[str], must be passed by name):</strong>  Regular expression to use for matching identifiers. Takes precedence over <code>pattern</code> if both are specified. Defaults to None.</p></li>\n<li><strong>bounding_office (Optional[str]), must be passed by name):</strong>  Specifies cataloging only identifiers that are physically located within the boundaries of the specified office.\nCan be a wildcard pattern. Matching is affected by <code>case_sensitive</code>.</li>\n<li><strong>case_sensitive (Optional[bool], must be passed by name):</strong>  Specifies whether and pattern or regular expression matching is case-sensitive.</li>\n<li><strong>category (Optional[str], must be passed by name, LOCATION only):</strong>  Specifies cataloging only locations in a location group belonging to the specified catgory(ies). Can be a wildcard pattern.\nMatching is affected by <code>case_sensitive</code>. Note that specifying <code>category</code> or <code>group</code>, or including \"aliases\" in <code>fields</code> will slow down the catalog operation.</li>\n<li><strong>fields (Optional[str]), must be passed by name):</strong>  A comma-separated list of fields to include in the catalog. Valid fields for <code>data_type</code> are listed below.\nThe catalog will include the fields in the order specified. Defaults to <code>identifier</code>.\n<ul>\n<li><strong><code>TIMESERIES</code></strong>:\n<ul>\n<li><code>identifier</code>: The time series identifier</li>\n<li><code>office</code>: The CWMS office for the time series</li>\n<li><code>name</code>: Same as <code>identifier</code></li>\n<li><code>time-zone</code>: The time zone of the location of the time seroies</li>\n<li><code>interval</code>: The interval of the time series</li>\n<li><code>offset</code>:  The offset into each interval of regular time series (in minutes), or <N/A> if interval is irregular</li>\n<li><code>earliest-time</code>: The earliest time in the database for this time series, or <None> if no data</li>\n<li><code>latest-time</code>: The latest time in the database for this time seires of <None> if no data</li>\n<li><code>last-update</code>: The most recent time this time series has been updated, or <None> of no data</li>\n</ul></li>\n<li><strong><code>LOCATION</code></strong>:\n<ul>\n<li><code>identifier</code>: The location identifier</li>\n<li><code>office</code>: The CWMS office for the location</li>\n<li><code>name</code>: Same as <code>identifier</code></li>\n<li><code>nearest-city</code>: The name of the city or town closest to the location</li>\n<li><code>public-name</code>: The public name of the location</li>\n<li><code>long-name</code>: The long name of the location</li>\n<li><code>kind</code>: The kind of location - constrained to:\n<ul>\n<li>SITE</li>\n<li>EMBANKMENT</li>\n<li>OVERFLOW</li>\n<li>TURBINE</li>\n<li>STREAM</li>\n<li>PROJECT</li>\n<li>STREAMGAGE</li>\n<li>BASIN</li>\n<li>OUTLET</li>\n<li>LOCK</li>\n<li>GATE</li>\n</ul></li>\n<li><code>time-zone</code>: The time zone of the location</li>\n<li><code>latitude</code>: The latitude of the location</li>\n<li><code>longitude</code>: The latitude of the location</li>\n<li><code>published-latitude</code>: The published latitude of the location</li>\n<li><code>published-longitude</code>: The published longitude of the location</li>\n<li><code>horizontal-datum</code>: The horizontal datum associated with the latitude and longitude</li>\n<li><code>elevation</code>: The elevation of the location</li>\n<li><code>unit</code>: The unit of the elevation</li>\n<li><code>vertical-datum</code>: The vertical datum of the elevation</li>\n<li><code>nation</code>: The nation containing the location</li>\n<li><code>state</code>: The state/province containing the location</li>\n<li><code>county</code>: The county containing the location</li>\n<li><code>bounding-office</code>: The CWMS office whose boundary includes the location</li>\n<li><code>map-label</code>: The map label of the location</li>\n<li><code>active</code>: Whether the location is active</li>\n<li><code>aliases</code>: The aliases associated with the location. Note that including this slows down the catalog operation. The aliases are specified as the string\nrepresentation of a dictionary (i.e., an actual dictionary can be obtained by passing this field to <code>eval()</code>). The dictionary keys are the location\ncategories and groups for each alias, and the values are the aliases. The keys are of the form {category}-{group} (e.g., \"Angency Aliases-NWS Handbook 5 ID\")</li>\n<li><code>description</code>: The description of the location</li>\n<li><code>type</code>: The unconstrained type of the location (cf <code>kind</code>)</li>\n</ul></li>\n</ul></li>\n<li><strong>group (Optional[str], must be passed by name, LOCATION only):</strong>  Specifies cataloging only locations in the specivied location group(s). Can be a wildcard pattern.\nMatching is affected by <code>case_sensitive</code>. Note that specifying <code>category</code> or <code>group</code>, or including \"aliases\" in <code>fields</code> will slow down the catalog operation.</li>\n<li><strong>header (Optional[bool], must be passed by name):</strong>  Specifies whether to include a header line in the catalog that identifies the fields</li>\n<li><strong>kind (Optional[str], must be passed by name, LOCATION only):</strong>  Specifies cataloging only locations of the specified location kind. Can be a wildcard pattern.\nMatching is affected by <code>case_sensitive</code>.</li>\n<li><strong>limit (Optional[int], must be passed by name):</strong>  The maximum number of identifiers to return. If None, no limit is imposed. Defaults to None.</li>\n<li><strong>office (Optional[str], must be passed by name):</strong>  The CWMS office to generate the catalog for. Defaults to None, which uses the data store's default office.</li>\n<li><strong>units (Optional[str], must be passed by name):</strong>  The unit system (\"EN\" or \"SI\") to return the elevation values in. Defaults to None.</li>\n<li><strong>vertical_datum (Optional[str], must be passed by name):</strong>  The vertical datum (\"NGVD29\", \"NAVD88\", or \"LOCAL\") to return the elevation values in. Defaults to None (Native datum).</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>DataStoreException:</strong>  if the data store is not open or an invalid <code>data_type</code> is specified</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: The CWMS identifiers that match the specified parameters, up to the specified limit, if any</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.CwmsDataStore.close", "modulename": "hec", "qualname": "CwmsDataStore.close", "kind": "function", "doc": "<p>Explicitly closes the data store, preventing further access.</p>\n\n<p>The data store is implicitly closed upon deletion or exiting a context manager ('with' block)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.CwmsDataStore.delete", "modulename": "hec", "qualname": "CwmsDataStore.delete", "kind": "function", "doc": "<p>Deletes a data set from the data store.</p>\n\n<p>Currently only time series data may be deleted.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>identifier (str):</strong>  The name of the data set to delete. Must be a valid one of the following:\n<ul>\n<li><strong>time series identifier</strong>: start and end times specify the time window of time series values to delete, inclusive</li>\n</ul></li>\n<li><strong>delete_action (Optional[str], must be passed by name):</strong>  Defaults to None. If specified, any time window is ignored and it must be one of (case insensitive):\n<ul>\n<li>'DELETE_ALL': delete all data and the identifier for the object</li>\n<li>'DELETE_DATA': delete all data for the identifier but does not delete the identifier</li>\n<li>'DELETE_KEY': delete only the object identifier - will fail if any data is associated with the identifier</li>\n</ul></li>\n<li><strong>end_time (Optional[Any], must be passed by name):</strong>  Specifies the end of the time window to delete data. Ignored if <code>delete_action</code> is specified. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor.\nDefaults to the end of the data store's time window.</li>\n<li><strong>office (Optional[str], must be passed by name):</strong>  The CWMS office to delete data for. Defaults to None, which uses the data store's default office.</li>\n<li><strong>start_time (Optional[Any], must be passed by name):</strong>  Specifies the start of the time window to delete data. Ignored if <code>delete_action</code> is specified. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor.\nDefaults to the start of the data store's time window.</li>\n<li><strong>version_time (Optional[Any], must be passed by name):</strong>  Specifies the version date/time of the data to delete (time series types only). Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor.\nDefaults to the None, meaning non-versioned data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.CwmsDataStore.get_extents", "modulename": "hec", "qualname": "CwmsDataStore.get_extents", "kind": "function", "doc": "<p>Retrieves the data extents for the specified identifier</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>identifier (str):</strong>  The identifier to retrieve the extents for</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[HecTime]: The earliest time, latest time, and latest update time</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.CwmsDataStore.get_vertical_datum_info", "modulename": "hec", "qualname": "CwmsDataStore.get_vertical_datum_info", "kind": "function", "doc": "<p>Retrieves the vertical datum information for a CWMS location</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>identifier (str):</strong>  The location identifier</li>\n<li><strong>office (Optional[str]):</strong>  The CWMS office for the location. Defaults to the data store's default office.</li>\n<li><strong>format (Optional[str]):</strong>  The output format for the information. Must be one of 'JSON' or 'XML' (case insensitive). Defaults to 'JSON'</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[str]: The vertical datum information in the specified format</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.CwmsDataStore.open", "modulename": "hec", "qualname": "CwmsDataStore.open", "kind": "function", "doc": "<p>Creates and returns a new CwmsDataStore object.</p>\n\n<p>Equivalent of calling <a href=\"#CwmsDataStore\"><code>CwmsDataStore(**kwargs)</code></a> with <code>name</code> in <code>kwargs</code></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (Optional[str]):</strong>  The API root (base URL). Defaults to None. If None:\n<ul>\n<li>The value of environment variable \"cda_api_root\" is used, if it exists.</li>\n<li>If the environment variable \"cda_api_root\" is not set, the default, the default value used in <code>cwms.api.init_session()</code> is used.</li>\n</ul></li>\n<li><strong>api_key (Optional[str], must be passed by name):</strong>  The API key for this data store. Must be specified to write to or delete from this data store. Defaults to None. If None:\n<ul>\n<li>The value of environment variable \"cda_api_key\" is used, if it exists.</li>\n</ul></li>\n<li><strong>description (Optional[str], must be passed by name):</strong>  The description assocaited with the data store. Defaults to None</li>\n<li><strong>end_time (Optional[Any], must be passed by name):</strong>  Specifies the end time of the data store's time window. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor. Defaults to None</li>\n<li><strong>office (Optional[str], must be passed by name):</strong>  The default CWMS office for the data store. If None or not specified, each access method will have to have an office specified.</li>\n<li><strong>read_only (Optional[bool], must be passed by name):</strong>  Specifies whether to open the data store in read-only mode. Defaults to True</li>\n<li><strong>start_time (Optional[Any], must be passed by name):</strong>  Specifies the start time of the data store's time window. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor. Defaults to None</li>\n<li><strong>store_rule (Optional[str], must be passed by name):</strong>  Specifies the default behavior to use when storing data. If specified, it must be one of the following (case insensitive). Defaults to 'REPLACE_ALL'.\n<ul>\n<li>'DELETE_INSERT' - delete all existing data in the incoming time window, then store the incoming data</li>\n<li>'DO_NOT_REPLACE' - store only non-existing data</li>\n<li>'REPLACE_ALL' - store existing and non-existing data</li>\n<li>'REPLACE_MISSING_VALUES_ONLY' - store incoming data only where existing data is missing</li>\n<li>'REPLACE_WITH_NON_MISSING' - store only non-missing incoming data</li>\n</ul></li>\n<li><strong>time_zone (Optional[str], must be passed by name):</strong>  The default time zone for the data store. Defaults to the local time zone.</li>\n<li><strong>trim (Optional[bool], must be passed by name):</strong>  Specifies the data store's default setting to trim missing values from the beginning and end of any regular time series data set retrieved.\nDefaults to True.</li>\n<li><strong>units (Optional[str], must be passed by name):</strong>  \"EN\" or \"SI\", specifying English or metric unit system as the default unit system for the data store. Defaults to \"EN\"</li>\n<li><strong>vertical_datum (Optional[str], must be passed by name):</strong>  \"NGVD29\", \"NAVD88\", or \"NATIVE\", specifying the data store's default vertical datum for retrieving elevation data. Defaults to \"NATIVE\"</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">datastore</span><span class=\"o\">.</span><span class=\"n\">CwmsDataStore</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.CwmsDataStore.retrieve", "modulename": "hec", "qualname": "CwmsDataStore.retrieve", "kind": "function", "doc": "<p>Retrieves a data set from the data store.</p>\n\n<p>Currently only locations and time series may be retrieved. To retrieve all data for a time series, specifiy <code>start_time=None</code> and <code>end_time=None</code></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>office (Optional[str], must be passed by name):</strong>  The CWMS office to retrieve data for. Defaults to None, which uses the data store's default office.</li>\n<li><strong>identifier (str):</strong>  The name of the data set to retrieve:</li>\n<li><strong>Location Arguments:</strong> <br>\n<ul>\n<li><b>units (Optional[str], must be passed by name):</b> \"EN\" or \"SI\", specifying to retrieve data in English or metric units. Defaults to None, which uses the default unit system for the data store</li>\n<li><b>vertical_datum (Optional[str], must be passed by name):</b> \"NGVD29\", \"NAVD88\", or \"NATIVE\", specifying the vertical datum to retrieve elevation data for. Defaults to None, which uses the data store's default vertical datum</li>\n</ul></li>\n<li><strong>TimeSeries Arguments:</strong> <br>\n<ul>\n<li><b>start_time (Optional[Any], must be passed by name):</b> Specifies the start of the time window to retrieve data. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor.\nDefaults to the start of the data store's time window. If None or not specified and the data store's time window doesn't have a start time, the current time minus 24 hours is used</li>\n<li><b>end_time (Optional[Any], must be passed by name):</b> Specifies the end of the time window to retrieve data. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor.\nDefaults to the end of the data store's time window. If None or not specified and the data store's time window doesn't have an end time, the current time is used</li>\n<li><b>trim (Optional[bool], must be passed by name):</b> Specifies whether to trim missing values from the beginning and end of any regular time series data set retrieved.\nDefaults to the data store's trim setting.</li>\n<li><b>units (Optional[str], must be passed by name):</b> \"EN\" or \"SI\", specifying to retrieve data in English or metric units. Defaults to None, which uses the default unit system for the data store</li>\n<li><b>version_time (Optional[Any], must be passed by name):</b> Specifies the version date/time of the data to retrieve (time series types only). Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor.\nDefaults to the None, which uses the data store's default vertical datum.</li>\n<li><b>vertical_datum (Optional[str], must be passed by name):</b> \"NGVD29\", \"NAVD88\", or \"NATIVE\", specifying the vertical datum to retrieve elevation data for. Defaults to None, which uses the data store's default vertical datum</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Any: The <a href=\"location.html#Location\"><code>Location</code></a> or <a href=\"timeseries.html#TimeSeries\"><code>TimeSeries</code></a> object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.CwmsDataStore.store", "modulename": "hec", "qualname": "CwmsDataStore.store", "kind": "function", "doc": "<p>Stores a data set to the data store.</p>\n\n<p>Currently only locations and time series data may be stored.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>obj (object):</strong>  The data set to store.\n<ul>\n<li>For locations, must be a Location object or the name of the location</li>\n</ul></li>\n<li><p><strong>Location Arguments:</strong> <br></p>\n\n<ul>\n<li><b>name (Optional[str], must be passed by name):</b> The location's name, Defaults to the Location object's name</li>\n<li><b>office (Optional[str], must be passed by name):</b> The location's office. Defaults to the Location object's office</li>\n<li><b>kind (str, must be passed by name):</b> The location's kind. Must be on of:\n<ul>\n<li>SITE</li>\n<li>EMBANKMENT</li>\n<li>OVERFLOW</li>\n<li>TURBINE</li>\n<li>STREAM</li>\n<li>PROJECT</li>\n<li>STREAMGAGE</li>\n<li>BASIN</li>\n<li>OUTLET</li>\n<li>LOCK</li>\n<li>GATE</li>\n</ul></li>\n<li><b>active (Optional[bool], must be passed by name):</b> Whether the location is active in the datbase. Defaults to True</li>\n<li><b>latitude (Optional[float], must be passed by name):</b> The location's latitude. Defaults to the Location object's latitude.</li>\n<li><b>longitude (Optional[float], must be passed by name):</b> The location's longitude. Defaults to the Location object's longitude</li>\n<li><b>horizontal_datum (Optional[str], must be passed by name):</b> The location's horizontal datum</li>\n<li><b>elevation (Optional[float], must be passed by name):</b> The location's elevation. Defaults to the Location object's elevation</li>\n<li><b>elevation_unit (Optional[str], must be passed by name):</b> The unit of the location's elevation. Defaults to the Location object's elevation unit</li>\n<li><b>vertical_datum (Optional[str], must be passed by name):</b> The location's vertical datum. Defaults to the location's vertical datum</li>\n<li><b>nation (Optional[str], must be passed by name):</b> The location's nation. Defaults to \"US\"</li>\n<li><b>state (Optional[str], must be passed by name):</b> The location's state. Defaults to None</li>\n<li><b>county (Optional[str], must be passed by name):</b> The locations's county. Defaults to None</li>\n<li><b>bounding_office (Optional[str], must be passed by name):</b> The CWMS office whose boundar includes the location. Defaults to None</li>\n<li><b>nearest_city (Optional[str], must be passed by name):</b> The city nearest the location. Defaults to None</li>\n<li><b>time_zone (Optional[str], must be passed by name):</b> The location's time zone. Defaults to the location's time zone</li>\n<li><b>public_name (Optional[str], must be passed by name):</b> The location's public name. Defaults to None</li>\n<li><b>long_name (Optional[str], must be passed by name):</b> The location's long name. Defaults to None</li>\n<li><b>description (Optional[str], must be passed by name):</b> The location's description. Defaults to None</li>\n<li><b>map_label (Optional[str], must be passed by name):</b> The location's map label. Defaults to None</li>\n<li><b>published_latitude (Optional[float], must be passed by name):</b> The published latitude of the location. Defaults to None</li>\n<li><b>published_longitude (Optional[float], must be passed by name):</b> The published longitude of the location. Defaults to None</li>\n<li><b>type (Optional[str], must be passed by name):</b> An unconstrained type for the location. Defaults to None\n<br>&nbsp;</li>\n</ul>\n\n<div>The following items are required to be specified either in the Location object or arguments:\n    <ul>\n    <li>name</li>\n    <li>office</li>\n    <li>kind</li>\n    <li>latitude</li>\n    <li>longitude</li>\n    <li>horizontal_datum</li>\n    <li>time_zone</li>\n    </ul>\n</div>\n\n<p><p></p></li>\n<li><strong>TimeSeries Arguments:</strong> <br>\n<ul>\n<li><b>as_lrts (Optional[bool], must be passed by name):</b> Specifies whether to store the time series as LRTS is its interval starts with \"~\". Defaults to whether the time series is a local regular time series</li>\n<li><b>override_protecteion (Optional[bool], must be passed by name):</b> Specifies whether to store non-protected values over existing protected values. (Protected values always overwrite existing values and non-protected existing values are alway overwritten) Defaults to False</li>\n<li><b>store_rule (Optional[str], must be passed by name):</b> Specifies the default behavior to use when storing data. If specified, it must be one of the following (case insensitive). Defaults to 'REPLACE_ALL'.\n<ul>\n<li><b>'DELETE_INSERT'</b> - delete all existing data in the incoming time window, then store the incoming data</li>\n<li><b>'DO_NOT_REPLACE'</b> - store only non-existing data</li>\n<li><b>'REPLACE_ALL'</b> - store existing and non-existing data</li>\n<li><b>'REPLACE_MISSING_VALUES_ONLY'</b> - store incoming data only where existing data is missing</li>\n<li><b>'REPLACE_WITH_NON_MISSING'</b> - store only non-missing incoming data</li>\n</ul></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"nb\">object</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.DataStoreException", "modulename": "hec", "qualname": "DataStoreException", "kind": "class", "doc": "<p>Base class for all data store exceptions</p>\n", "bases": "builtins.Exception"}, {"fullname": "hec.DeleteAction", "modulename": "hec", "qualname": "DeleteAction", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "hec.DeleteAction.DELETE_ALL", "modulename": "hec", "qualname": "DeleteAction.DELETE_ALL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DeleteAction.DELETE_ALL: 1&gt;"}, {"fullname": "hec.DeleteAction.DELETE_DATA", "modulename": "hec", "qualname": "DeleteAction.DELETE_DATA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DeleteAction.DELETE_DATA: 2&gt;"}, {"fullname": "hec.DeleteAction.DELETE_KEY", "modulename": "hec", "qualname": "DeleteAction.DELETE_KEY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;DeleteAction.DELETE_KEY: 3&gt;"}, {"fullname": "hec.DssDataStore", "modulename": "hec", "qualname": "DssDataStore", "kind": "class", "doc": "<p>Class to facilitate cataloging, storing, retrieving, and deleting data in HEC-DSS files.</p>\n\n<p>Requires installation of the 'hecdss' package &gt; '0.1.21'.</p>\n", "bases": "hec.datastore.AbstractDataStore"}, {"fullname": "hec.DssDataStore.__init__", "modulename": "hec", "qualname": "DssDataStore.__init__", "kind": "function", "doc": "<p>Creates and returns a new DssDataStore object.</p>\n\n<p>Equivalent of calling <a href=\"#DssDataStore.open\"><code>DssDataStore.open(name, **kwargs)</code></a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>description (Optional[str], must be passed by name):</strong>  The description assocaited with the data store. Defaults to None</li>\n<li><strong>end_time (Optional[Any], must be passed by name):</strong>  Specifies the end time of the data store's time window. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor. Defaults to None</li>\n<li><strong>name (str, must be passed by name):</strong>  The name of the HEC-DSS file to open.</li>\n<li><strong>read_only (Optional[bool], must be passed by name):</strong>  Specifies whether to open the data store in read-only mode. Defaults to True</li>\n<li><strong>start_time (Optional[Any], must be passed by name):</strong>  Specifies the start time of the data store's time window. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor. Defaults to None</li>\n<li><strong>store_rule (Optional[str], must be passed by name):</strong>  Must be one of the following (case insensitive). Defaults to 'REPLACE_ALL'.\n<ul>\n<li>'DELETE_INSERT'</li>\n<li>'DO_NOT_REPLACE'</li>\n<li>'REPLACE_ALL'</li>\n<li>'REPLACE_MISSING_VALUES_ONLY'</li>\n<li>'REPLACE_WITH_NON_MISSING'</li>\n</ul></li>\n<li><strong>trim (Optional[bool], must be passed by name):</strong>  Specifies the data store's default setting to trim missing values from the beginning and end of any regular time series data set retrieved.\nDefaults to True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "hec.DssDataStore.catalog", "modulename": "hec", "qualname": "DssDataStore.catalog", "kind": "function", "doc": "<p>Retrieves pathnames that match specified conditions</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data_type (Optional[str]):</strong>  The type of data to retrieve pathnames for. Defaults to None, which specifies all data types.\nIf specified, must be one of (case insensitive):\n<ul>\n<li>'ARRAY'</li>\n<li>'GRID'</li>\n<li>'LOCATION'</li>\n<li>'PAIRED_DATA'</li>\n<li>'TEXT'</li>\n<li>'TIMESERIES'</li>\n<li>'TIMESERIES_PROFILE'</li>\n<li>'TIN'</li>\n</ul></li>\n<li><strong>pattern (Optional[str], must be passed by name):</strong>  Wildcard pattern (using <code>*</code> and <code>?</code>) to use for matching pathnames. <code>regex</code> takes precedence if both are specified. Defaults to None.</li>\n<li><strong>regex (Optional[str], must be passed by name):</strong>  Regular expression to use for matching pathnames. Takes precedence over <code>pattern</code> if both are specified. Defaults to None.</li>\n<li><strong>case_sensitive (Optional[bool], must be passed by name):</strong>  Specifies whether <code>pattern</code> or <code>regex</code> matching is case-sensitive.</li>\n<li><strong>condensed (Optional[bool], must be passed by name):</strong>  Specifies whether to return a condensed catalog (D-part = time range for time series). Defaults to True</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>DataStoreException:</strong>  if the data store is not open or an invalid <code>data_type</code> is specified</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: The pathnames that match the specified parameters</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.DssDataStore.close", "modulename": "hec", "qualname": "DssDataStore.close", "kind": "function", "doc": "<p>Explicitly closes the data store, preventing further access.</p>\n\n<p>The data store is implicitly closed upon deletion or exiting a context manager ('with' block)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.DssDataStore.delete", "modulename": "hec", "qualname": "DssDataStore.delete", "kind": "function", "doc": "<p>Deletes a data set from the data store.</p>\n\n<p>Currently only time series data may be deleted. To delete all data for a time series, specifiy <code>start_time=None</code> and <code>end_time=None</code></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>identifier (str):</strong>  The name of the data set to delete:\n<ul>\n<li><strong>TIMESERIES</strong>: A pathname in the dataset. The D part (block start date) is ignored.</li>\n</ul></li>\n<li><strong>end_time (Optional[Any], must be passed by name):</strong>  Specifies the end of the time window to delete data. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor.\nDefaults to the end of the data store's time window. If None or not specified and the data store's time window doesn't have an end time, all data on or after the start time will be deleted.</li>\n<li><strong>start_time (Optional[Any], must be passed by name):</strong>  Specifies the start of the time window to delete data. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor.\nDefaults to the start of the data store's time window. If None or not specified and the data store's time window doesn't have a start time, all data up to and on the end time will be deleted.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.DssDataStore.get_extents", "modulename": "hec", "qualname": "DssDataStore.get_extents", "kind": "function", "doc": "<p>Retrieves the data extents for the specified identifier</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>identifier (str):</strong>  The identifier to retrieve the extents for</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[HecTime]: The earliest time and latest time for the identifier</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.DssDataStore.open", "modulename": "hec", "qualname": "DssDataStore.open", "kind": "function", "doc": "<p>Creates and returns a new DssDataStore object.</p>\n\n<p>Equivalent of calling <a href=\"#DssDataStore\"><code>DssDataStore(**kwargs)</code></a> with <code>name</code> in <code>kwargs</code></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the HEC-DSS file to open.</li>\n<li><strong>description (Optional[str], must be passed by name):</strong>  The description assocaited with the data store. Defaults to None</li>\n<li><strong>end_time (Optional[Any], must be passed by name):</strong>  Specifies the end time of the data store's time window. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor. Defaults to None</li>\n<li><strong>read_only (Optional[bool], must be passed by name):</strong>  Specifies whether to open the data store in read-only mode. Defaults to True</li>\n<li><strong>start_time (Optional[Any], must be passed by name):</strong>  Specifies the start time of the data store's time window. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor. Defaults to None</li>\n<li><strong>store_rule (Optional[str], must be passed by name):</strong>  Must be one of the following (case insensitive). Defaults to 'REPLACE_ALL'.\n<ul>\n<li>'DELETE_INSERT'</li>\n<li>'DO_NOT_REPLACE'</li>\n<li>'REPLACE_ALL'</li>\n<li>'REPLACE_MISSING_VALUES_ONLY'</li>\n<li>'REPLACE_WITH_NON_MISSING'</li>\n</ul></li>\n<li><strong>trim (Optional[bool], must be passed by name):</strong>  Specifies the data store's default setting to trim missing values from the beginning and end of any regular time series data set retrieved.\nDefaults to True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">datastore</span><span class=\"o\">.</span><span class=\"n\">DssDataStore</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.DssDataStore.retrieve", "modulename": "hec", "qualname": "DssDataStore.retrieve", "kind": "function", "doc": "<p>Retrieves a data set from the data store.</p>\n\n<p>Currently only time series data may be retrieved. To retrieve all data for a time series, specifiy <code>start_time=None</code> and <code>end_time=None</code></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>identifier (str):</strong>  The name of the data set to retrieve:\n<ul>\n<li><strong>TIMESERIES</strong>: A pathname in the dataset. The D part (block start date) is ignored.</li>\n</ul></li>\n<li><strong>end_time (Optional[Any], must be passed by name):</strong>  Specifies the end of the time window to retrieve data. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor.\nDefaults to the end of the data store's time window. If None or not specified and the data store's time window doesn't have an end time, all data on or after the start time will be retrieved.</li>\n<li><strong>start_time (Optional[Any], must be passed by name):</strong>  Specifies the start of the time window to retrieve data. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor.\nDefaults to the start of the data store's time window. If None or not specified and the data store's time window doesn't have a start time, all data up to and on the end time will be retrieved.</li>\n<li><strong>trim (Optional[bool], must be passed by name):</strong>  Specifies whether to trim missing values from the beginning and end of any regular time series data set retrieved.\nDefaults to the data store's trim setting.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.DssDataStore.set_message_level", "modulename": "hec", "qualname": "DssDataStore.set_message_level", "kind": "function", "doc": "<p>Sets the HEC-DSS message level for all <code>DssDataStore</code> objects</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>level (int, optional):</strong>  Defaults to 4\n<ul>\n<li><strong>0</strong>: No output</li>\n<li><strong>1</strong>: Critcal output only</li>\n<li><strong>2</strong>: Terse (includes file open and close)</li>\n<li><strong>4</strong>: General (includes read and write)</li>\n<li><strong>5</strong>: User Diagnostic</li>\n<li><strong>11</strong>: Internal Diagnostic</li>\n<li><strong>13</strong>: Internal Debug</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">level</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.DssDataStore.store", "modulename": "hec", "qualname": "DssDataStore.store", "kind": "function", "doc": "<p>Stores a data set to the data store.</p>\n\n<p>Currently only time series data may be stored.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>obj (object):</strong>  The data set to store</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"nb\">object</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Duration", "modulename": "hec", "qualname": "Duration", "kind": "class", "doc": "<p>Class to hold information about the durations represented by time series values.</p>\n\n<p>Durations are a restriction of the TimeSpan base class that also hold extra information.</p>\n\n<ul>\n<li><strong>Restriction:</strong> At most one of <code>years</code>, <code>months</code>, <code>days</code>, <code>hours</code>, and <code>minutes</code> can be non-zero, and <code>seconds</code> must be zero.</li>\n<li><strong>Extension:</strong>\n<ul>\n<li>Each duration has a name</li>\n<li>Each duration is a Beginning of Period (BOP) or End of Period (EOP) duration. Normally values\nrepresent the state at the end of duration (e.g, the elevation or flow at the end of an hour or day).\nEOP Duration objects are returned unless otherwise specified.</li>\n</ul></li>\n</ul>\n\n<p>Durations should not need to be created by the user, as durations for all CWMS intervals are created\nduring module initialization.</p>\n", "bases": "hec.timespan.TimeSpan"}, {"fullname": "hec.Duration.__init__", "modulename": "hec", "qualname": "Duration.__init__", "kind": "function", "doc": "<p>Initializer used by module</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">bop</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "hec.Duration.is_bop", "modulename": "hec", "qualname": "Duration.is_bop", "kind": "variable", "doc": "<p>Whether this object is a Beginning of Period Duration</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.Duration.is_eop", "modulename": "hec", "qualname": "Duration.is_eop", "kind": "variable", "doc": "<p>Whether this object is an End of Period Duration</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.Duration.for_interval", "modulename": "hec", "qualname": "Duration.for_interval", "kind": "function", "doc": "<p>Returns a Duration object for a specified interval</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>interval (Union[Interval, str, int]):</strong>  A standard CWMS Interval object, or the name or\n(actual or characteristic) minutes of a standard CWMS interval</li>\n<li><strong>bop (bool, optional):</strong>  Specifies whether to return a Beginning of Period Duration object.\nDefaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  If the first argument is not an Interval, string, or integer</li>\n<li><strong>DurationException:</strong>  If the first argument a non-standard name or minutes or\nno such Duration object exists</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Duration: The Duration object matching the specified interval and bop setting.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">bop</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">duration</span><span class=\"o\">.</span><span class=\"n\">Duration</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Duration.minutes", "modulename": "hec", "qualname": "Duration.minutes", "kind": "variable", "doc": "<p>The minutes (actual or characteristic) of this object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.Duration.name", "modulename": "hec", "qualname": "Duration.name", "kind": "variable", "doc": "<p>The name of this object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.DurationException", "modulename": "hec", "qualname": "DurationException", "kind": "class", "doc": "<p>Exception specific to Duration operations</p>\n", "bases": "hec.timespan.TimeSpanException"}, {"fullname": "hec.ElevParameter", "modulename": "hec", "qualname": "ElevParameter", "kind": "class", "doc": "<p>Holds info (name and vertical datum information) for an elevation parameter</p>\n", "bases": "hec.parameter.Parameter"}, {"fullname": "hec.ElevParameter.__init__", "modulename": "hec", "qualname": "ElevParameter.__init__", "kind": "function", "doc": "<p>Initializes the ElevParameter object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The full parameter name</li>\n<li><strong>vertical_datum_info (Union[str, dict[str, Any]]):</strong>  The vertical datum info as an xml string or dictionary</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ElevParameter.VerticalDatumException:</strong>  If <code>vertical datum</code> info is invalid</li>\n<li><strong>ParameterException:</strong>  If the base parameter is not 'Elev'</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">vertical_datum_info</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "hec.ElevParameter.VerticalDatumException", "modulename": "hec", "qualname": "ElevParameter.VerticalDatumException", "kind": "class", "doc": "<p>Exception specific to vertical datum operations</p>\n", "bases": "hec.parameter.ParameterException"}, {"fullname": "hec.ElevParameter.clone", "modulename": "hec", "qualname": "ElevParameter.clone", "kind": "function", "doc": "<p>Returns a copy of this object</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ElevParameter: The copy</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">ElevParameter</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.ElevParameter.current_datum", "modulename": "hec", "qualname": "ElevParameter.current_datum", "kind": "variable", "doc": "<p>The current datum of this object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.ElevParameter.elevation", "modulename": "hec", "qualname": "ElevParameter.elevation", "kind": "variable", "doc": "<p>The elevation of this object in the current datum and unit</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[hec.unit.UnitQuantity]"}, {"fullname": "hec.ElevParameter.get_offset_to", "modulename": "hec", "qualname": "ElevParameter.get_offset_to", "kind": "function", "doc": "<p>Returns the offset from the current vertical datum to the specified target datum in the current unit.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>target_datum (str):</strong>  The target datum</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ElevParameter.VerticalDatumException:</strong>  If the target datum is invalid or the\nobject does not specify an offset to the target datum</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[UnitQuantity]: The offset from the current datum to the target datum\n      or <code>None</code> if the current and target datums are the same.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">target_datum</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">unit</span><span class=\"o\">.</span><span class=\"n\">UnitQuantity</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.ElevParameter.ito", "modulename": "hec", "qualname": "ElevParameter.ito", "kind": "function", "doc": "<p>Converts this object to the specified unit or vertical datum and returns it.</p>\n\n<p>Identical to calling <a href=\"#ElevParameter.to\">.to(unit_or_system_or_datum, in_place=True</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit_or_system_or_datum (Union[str, Unit]):</strong>  The unit, unit_system, or vertical datum to convert to.\nIf unit system (\"EN\" or \"SI\"), the default Elev unit for that system is used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ElevParameter: The converted object, whether this object of a copy of it</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">unit_or_system_or_datum</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">ElevParameter</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.ElevParameter.native_datum", "modulename": "hec", "qualname": "ElevParameter.native_datum", "kind": "variable", "doc": "<p>The native datum of this object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.ElevParameter.navd88_offset", "modulename": "hec", "qualname": "ElevParameter.navd88_offset", "kind": "variable", "doc": "<p>The offset from the native datum of this object to NGVD-29, in the current unit, or <code>None</code> if<br>\n    * the native vertical datum is NGVD-29\n    * the native vertical datum is not NGVD-29, but the object does not have such an offset</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[hec.unit.UnitQuantity]"}, {"fullname": "hec.ElevParameter.navd88_offset_is_estimate", "modulename": "hec", "qualname": "ElevParameter.navd88_offset_is_estimate", "kind": "variable", "doc": "<p>Whether the offset from the native vertical datum to NGVD-29 is an estimate (e.g, VERTCON)\nor <code>None</code> if the native vertical datum is NGVD-29 or the object does not have such and offset</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[bool]"}, {"fullname": "hec.ElevParameter.ngvd29_offset", "modulename": "hec", "qualname": "ElevParameter.ngvd29_offset", "kind": "variable", "doc": "<p>The offset from the native datum of this object to NGVD-29, in the current unit, or <code>None</code> if<br>\n    * the native vertical datum is NGVD-29\n    * the native vertical datum is not NGVD-29, but the object does not have such an offset</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[hec.unit.UnitQuantity]"}, {"fullname": "hec.ElevParameter.ngvd29_offset_is_estimate", "modulename": "hec", "qualname": "ElevParameter.ngvd29_offset_is_estimate", "kind": "variable", "doc": "<p>Whether the offset from the native vertical datum to NGVD-29 is an estimate (e.g, VERTCON)\nor <code>None</code> if the native vertical datum is NGVD-29 or the object does not have such and offset</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[bool]"}, {"fullname": "hec.ElevParameter.to", "modulename": "hec", "qualname": "ElevParameter.to", "kind": "function", "doc": "<p>Converts either this object or a copy of it to the specified unit or vertical datum and returns it</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit_or_system_or_datum (Union[str, Unit]):</strong>  The unit, unit_system, or vertical datum to convert to.\nIf unit system (\"EN\" or \"SI\"), the default Elev unit for that system is used.</li>\n<li><strong>in_place (bool, optional):</strong>  If <code>True</code>, this object is converted and returned, otherwise a copy is\nconverted and returned. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ElevParameter: The converted object, whether this object of a copy of it</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">unit_or_system_or_datum</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">ElevParameter</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.ElevParameter.unit", "modulename": "hec", "qualname": "ElevParameter.unit", "kind": "variable", "doc": "<p>The unit of this object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": pint.registry.Unit"}, {"fullname": "hec.ElevParameter.unit_name", "modulename": "hec", "qualname": "ElevParameter.unit_name", "kind": "variable", "doc": "<p>The unit name of this object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.ElevParameter.vertical_datum_info", "modulename": "hec", "qualname": "ElevParameter.vertical_datum_info", "kind": "variable", "doc": "<p>The VerticalDatumInfo object of this parameter</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": hec.parameter.ElevParameter._VerticalDatumInfo"}, {"fullname": "hec.ElevParameter.vertical_datum_info_dict", "modulename": "hec", "qualname": "ElevParameter.vertical_datum_info_dict", "kind": "variable", "doc": "<p>The VerticalDatumInfo object of this parameter as a dictionary</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": dict[str, typing.Any]"}, {"fullname": "hec.ElevParameter.vertical_datum_info_xml", "modulename": "hec", "qualname": "ElevParameter.vertical_datum_info_xml", "kind": "variable", "doc": "<p>The VerticalDatumInfo object of this parameter as an xml string</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.HecTime", "modulename": "hec", "qualname": "HecTime", "kind": "class", "doc": "<p>Class to facilitate moving Jython scripts that use Java class <code>hec.heclib.util.</code><code>HecTime</code> to Python</p>\n\n<h6 id=\"implementation\">Implementation:</h6>\n\n<blockquote>\n  <p><strong>Compatibility with Java HecTime</strong></p>\n  \n  <p>This class replicates the capabilities of the Java <code>hec.heclib.util.HecTime</code> class, and uses the same method names\n  except the camel case names of the Java class have been renamed to snake case to match Python naming standards as shown in the following examples:</p>\n\n<pre>\n<table>\n<tr><th>Java Method Name</th><th>Python Method Name</th></tr>\n<tr><td>adjustToIntervalOffset()</td><td>adjust_to_interval_offset()</td></tr>\n<tr><td>computeNumberIntervals()</td><td>compute_number_intervals()</td></tr>\n</table>\n</pre>\n  \n  <p><strong>Granularity</strong></p>\n  \n  <p>Like Java HecTime, <code>HecTime</code> objects can be instaniated with different time granularities, with each granule specifying a\n  second, minute, hour, or day. Specifically:</p>\n\n<pre>\n<table>\n<tr><th>Granularity</th><th>Integer Range</th><th>Each Granule Specifies</th><th>Date Range</th></tr>\n<tr><td>SECOND_GRANULARITY<br>= 10</td><td>-2147483648<br>+2147483647</td><td>Seconds after<br>01Jan1970, 00:00</td><td>+1901-12-13T20:45:52<br>+2030-01-19T03:14:17</td></tr>\n<tr><td>MINUTE_GRANULARITY<br>= 11</td><td>-2147483648<br>+2147483647</td><td>Minutes after<br>31Dec1899, 00:00</td><td>-2184-12-06T21:52<br>+5983-01-23T02:07</td></tr>\n<tr><td>HOUR_GRANULARITY<br>= 12</td><td>-2147483648<br>+2147483647</td><td>Hours after<br>31Dec1899, 00:00</td><td>-243084-03-22T16<br>+246883-10-08T07</td></tr>\n<tr><td>DAY_GRANULARITY<br>= 13</td><td>-2147483645<br>+2146789687</td><td>Days after<br>31Dec1899</td><td>-5877711-06-22<br>+5879610-07-10</td></tr>\n</table>\n</pre>\n  \n  <p>The default granularity is MINUTE_GRANULARITY, but this may be overridden when calling <a href=\"#HecTime\"><code>HecTime()</code></a>.</p>\n  \n  <p><strong>Chainable methods</strong></p>\n  \n  <p>Since, unlike Java, Python allows code to ignore the return value from functions and methods, many HecTime methods\n  with a <code>void</code> return type in Java now return a modified <code>HecTime</code> object. This allows the chaining of methods\n  together for simplify code. For example:</p>\n\n<pre>\nt = HecTime()\nt.set_current()\nt.adjust_to_interval_offset(intvl, 0)\nt.increment(1, intvl)\n</pre>\n  \n  <p>can now be coded as:</p>\n\n<pre>\nt = HecTime.now().adjust_to_interval_offset(intvl, 0).increment(1, intvl)\n</pre>\n  \n  <p>although the previous style is still supported.</p>\n  \n  <p><strong>Compatibility with <code>datetime</code></strong></p>\n  \n  <p>This class is written to be trivially convertable to/from <code>datetime</code> objects and updatable via <code>timedelta</code> objects.\n  Like <code>datetime</code> objects, <code>HecTime</code> objects are not time zone aware unless given time zone information. For <code>HecTime</code>\n  objects the <code>label_as_time_zone()</code> method is used for this purpose. Also like <code>datetime</code> objects, using the <a href=\"#HecTime.astimezone\"><code>astimezone()</code></a>\n  method causes the object to act as if it had been initialized with the local time zone.</p>\n  \n  <p>Initialization from a <code>datetime</code> object is acccomplished via <code>ht = HecTime(dt_obj)</code>. Retieval of a <code>datetime</code>\n  object is accomplished via <code>dt_obj = ht.datetime()</code>. The <a href=\"#HecTime.label_as_time_zone\"><code>HecTime.label_as_time_zone(tz)</code></a> accomplishes\n  the same thing as <code>datetime.replace(tzinfo=tz)</code>, and the <a href=\"#HecTime.astimezone\"><code>HecTime.astimezone(tz)</code></a> accomplishes\n  the same thing as <code>datetime.astimezone(tz)</code></p>\n  \n  <p><code>datetime</code> methods, properties, and operators supported in <code>HecTime</code> objects are:</p>\n  \n  <ul>\n  <li>Methods\n  <ul>\n  <li><code>now()</code> (static method)</li>\n  <li><code>astimezone(timezone)</code><sup>*</sup></li>\n  <li><code>strftime(format)</code></li>\n  <li><code>strptime(date_time_str, format)</code></li>\n  <li><code>__str__()</code> (used in <code>print()</code>)</li>\n  </ul></li>\n  <li>Properties\n  <ul>\n  <li><code>year</code></li>\n  <li><code>month</code></li>\n  <li><code>day</code></li>\n  <li><code>hour</code></li>\n  <li><code>minute</code></li>\n  <li><code>second</code></li>\n  <li><code>tzinfo</code></li>\n  </ul></li>\n  <li>Operators\n  <ul>\n  <li><code>+</code> and <code>+=</code></li>\n  <li><code>-</code> and <code>-=</code></li>\n  <li><code>==</code> and <code>!=</code></li>\n  <li><code>&lt;</code> and <code>&lt;=</code></li>\n  <li><code>&gt;</code> and &gt;=`</li>\n  </ul></li>\n  </ul>\n  \n  <p><sup>*</sup>The <code>astimezone(timezone)</code>, method, like all <code>HecTime</code> methods that take time zone will accept:</p>\n  \n  <ul>\n  <li><code>ZoneInfo</code> object</li>\n  <li>String (timezone name)</li>\n  <li><code>HecTime</code> object (the object's time zone is used)</li>\n  <li><code>datetime</code> object (the object's time zone is used)</li>\n  </ul>\n  \n  <p><em>Note:</em> Compatibility with <code>datetime</code> as well as time zone support is only available on <code>HecTime</code> objects that are\n  within the <code>datetime</code> object range of 01Jan0001, 00:00 through 31Dec9999, 23:59. Also, time zone support is not\n  provided for <code>HecTime</code> objects of <code>DAY_GRANULARITY</code>.</p>\n  \n  <p><strong>Addition, subtraction, and comparison operators</strong></p>\n  \n  <p><a name=\"addition\"></a>\n  Integers, <code>HecTime</code> objects, <a href=\"./timespan.html#TimeSpan\"><code>TimeSpan</code></a> objects, <a href=\"./interval.html#Interval\"><code>Interval</code></a> objects,\n  <a href=\"./duration.html#Duration\"><code>Duration</code></a> objects, <code>timedelta</code> objects, and specially formatted strings (see below) can be used\n  on the right side of the <code>+</code> and <code>+=</code> operators. The result is always another <code>HecTime</code> object. Allowing <code>HecTime</code> objects\n  to be added to each other breaks the similarity with <code>datetime</code>, but is included to provide the functionality Java HecTime.</p>\n  \n  <p><a name=\"subtraction\"></a>\n  Integers, <code>HecTime</code> objects, <code>datetime</code> objects, <a href=\"./timespan.html#TimeSpan\"><code>TimeSpan</code></a> objects, <a href=\"./interval.html#Interval\"><code>Interval</code></a>\n  objects, <a href=\"./duration.html#Duration\"><code>Duration</code></a> objects, <code>timedelta</code> objects, and specially formatted strings (see below) can be\n  used on the right side of the <code>-</code> or <code>-=</code> operators.</p>\n  \n  <ul>\n  <li>The result is an <code>HecTime</code> object when subtracting intgers, <a href=\"./timespan.html#TimeSpan\"><code>TimeSpan</code></a> objects,\n  <a href=\"./interval.html#Interval\"><code>Interval</code></a> objects, <a href=\"./duration.html#Duration\"><code>Duration</code></a> objects, <code>timedelta</code> objects and strings.</li>\n  <li>The result is a <a href=\"./timespan.html#TimeSpan\"><code>TimeSpan</code></a> object when subtracting <code>HecTime</code> objects</li>\n  <li>The result is a <code>timedelta</code> object when subtracting <code>datetime</code> objects</li>\n  </ul>\n  \n  <p>If the <code>HecTime</code> object on the left side of any <code>+</code>, <code>-</code>, <code>+=</code>, or <code>-=</code> operator has a time zone attached and the right-\n  side object is an <code>Interval</code> has the <code>is_local_regular</code> property of True, then addition and subtraction is performed\n  with respect to the time zone of the <code>HecTime</code> object. For example if the <code>HecTime</code> object is at midnight in the US/Pacific\n  time zone, then adding a local-regular interval of 2 hours will result in an <code>HecTime</code> object at 2 a.m. in the same time\n  zone. The actual amount of time added with respect to UTC will be 1, 2, or 3 hours, depending on the day, month, and year.</p>\n  \n  <p>Adding and subtracting integers adds or subracts the number of granules in the object so the change may be in seconds,\n  minutes, hours, or days, depending on the object's granularity.</p>\n  \n  <p>Strings of the format used for the offset portion of relative time strings in <a href=\"#get_time_window\"><code>get_time_window()</code></a> can be\n  used in addition and subtraction operators. Examples</p>\n  \n  <ul>\n  <li><code>t - \"1y\"</code> would return an <code>HecTime</code> object one year prior to the <code>t</code> object</li>\n  <li><code>t += \"3m-2d+1h\"</code> would increment the <code>t</code> object forward 3 months, back 2 days and forward 1 hour.</li>\n  </ul>\n  \n  <p>This precludes using ISO 8601 duration strings that have minutes or seconds components. To use these, create a <a href=\"./timespan.html#TimeSpan\"><code>TimeSpan</code></a>\n  object from the string for the addend</p>\n  \n  <p><code>HecTime</code> objects can be compared with each other or with <code>datetime</code> objects using the standard operators (<code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>).\n  Either type may be on either side of the operators.</p>\n  \n  <p><strong>Use of properties</strong></p>\n  \n  <p>Many methods are deprecated and will generate deprecation warnings when used. Most have been replaced by direct\n  read/write or read-only properties.</p>\n  \n  <p>The <code>value()</code>, <code>year()</code>, <code>month()</code>, <code>day()</code>, <code>hour()</code>, <code>minute()</code>, and <code>second()</code> methods are still supported but\n  are accessed in a more pythonic way as read/write (<code>value</code>) or read-only (<code>year</code>, <code>month</code>, <code>day</code>, <code>hour</code>, <code>minute</code>, <code>second</code>)\n  properties. There is no clean way to issue deprecation warning if these properties are accessed by their getter functions.</p>\n</blockquote>\n"}, {"fullname": "hec.HecTime.__init__", "modulename": "hec", "qualname": "HecTime.__init__", "kind": "function", "doc": "<p><a id=\"HecTime.__init__\">Initializes a newly-created <code>HecTime</code> object.</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong><code>HecTime()</code></strong> initializes granularity to <a href=\"#MINUTE_GRANULARITY\"><code>MINUTE_GRANULARITY</code></a> and time to <a href=\"#UNDEFINED_TIME\"><code>UNDEFINED_TIME</code></a></li>\n<li><strong><code>HecTime(granularity: int)</code></strong> initializes granularity to <code>granularity</code> and time to <a href=\"#UNDEFINED_TIME\"><code>UNDEFINED_TIME</code></a></li>\n<li><strong><code>HecTime(values: Union[list[int],tuple[int,...]])</code></strong> initializes granularity to <a href=\"#MINUTE_GRANULARITY\"><code>MINUTE_GRANULARITY</code></a> and time to <code>values</code></li>\n<li><strong><code>HecTime(other_hec_time: HecTime)</code></strong> initializes to the same granularity and time as <code>other_hec_time</code></li>\n<li><strong><code>HecTime(dt: datetime)</code></strong> initializes granularity to <a href=\"#MINUTE_GRANULARITY\"><code>MINUTE_GRANULARITY</code></a> and time to the value of <code>dt</code>.</li>\n<li><strong><code>HecTime(date_time_str: str)</code></strong> initializes granularity to <a href=\"#MINUTE_GRANULARITY\"><code>MINUTE_GRANULARITY</code></a> and time to the results of <a href=\"#parse_date_time_str\">parse_date_time_str</a>(date_time_str)</li>\n<li><strong><code>HecTime(time_int: int, granularity: int)</code></strong> initializes to <code>time_int</code> and <code>granularity</code></li>\n<li><strong><code>HecTime(date_str: str, time_str: str)</code></strong> initializes granularity to <a href=\"#MINUTE_GRANULARITY\"><code>MINUTE_GRANULARITY</code></a> and time to the results of <a href=\"#parse_date_time_str\">parse_date_time_str</a>(<code>date_str</code>+\"&nbsp;\"+<code>time_str</code>)</li>\n<li><strong><code>HecTime(date_str: str, time_str: str, granularity: int)</code></strong> initializes to the specified granularity and results of <a href=\"#parse_date_time_str\">parse_date_time_str</a>(<code>date_str</code>+\"&nbsp;\"+<code>time_str</code>)</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if invalid parameters are specified</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "hec.HecTime.add", "modulename": "hec", "qualname": "HecTime.add", "kind": "function", "doc": "<p>Adds an number of granules or an HecTime to this object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (Union[int, &quot;HecTime&quot;, TimeSpan, timedelta, str]):</strong>  item to add</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use the <a href=\"#addition\"><code>+=</code></a> operator instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.add_days", "modulename": "hec", "qualname": "HecTime.add_days", "kind": "function", "doc": "<p>Adds a number of days to the object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>days (int):</strong>  the number of days to add.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">days</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.add_hours", "modulename": "hec", "qualname": "HecTime.add_hours", "kind": "function", "doc": "<p>Adds a number of hours to the object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>hours (int):</strong>  the number of hours to add.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.add_minutes", "modulename": "hec", "qualname": "HecTime.add_minutes", "kind": "function", "doc": "<p>Adds a number of minutes to the object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>minutes (int):</strong>  the number of minutes to add.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">minutes</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.add_seconds", "modulename": "hec", "qualname": "HecTime.add_seconds", "kind": "function", "doc": "<p>Adds a number of seconds to the object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>seconds (int):</strong>  the number of seconds to add.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.adjust_to_interval_offset", "modulename": "hec", "qualname": "HecTime.adjust_to_interval_offset", "kind": "function", "doc": "<p>Adjusts this object to be at the specified offset past the specified interval.</p>\n\n<p><strong>NOTE:</strong> Unlike <a href=\"#zofset\"><code>zofset</code></a> The resulting time may be <em>at</em>, <em>before</em>, or <em>after</em>\nthe this object, but will always be in the interval that begins at or before this object.</p>\n\n<p>To get the begninning of the interval that starts at or before this object, set\noffset_minutes to 0. To get the beginning of the next interval set offset_minutes\nbe the same as interval_minutes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>interval (Union[Interval, int]):</strong>  The interval. If an integer, must be the actual\nor charactersitic minutes of a standard Interval</li>\n<li><strong>offset_minutes (int):</strong>  The offset into the interval in minutes (0..interval)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The adjusted object</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if offset it out of range for interval</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">offset_minutes</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.astimezone", "modulename": "hec", "qualname": "HecTime.astimezone", "kind": "function", "doc": "<p>See <code>convert_to_time_zone</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">on_tz_not_set</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.clean_time", "modulename": "hec", "qualname": "HecTime.clean_time", "kind": "function", "doc": "<p>Placeholder for API compatibility. Does nothing.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.clone", "modulename": "hec", "qualname": "HecTime.clone", "kind": "function", "doc": "<p>Returns a clone of this object</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>object: the clone of this object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.compare_times", "modulename": "hec", "qualname": "HecTime.compare_times", "kind": "function", "doc": "<p>Returns an integer comparison with another HecTime object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (HecTime):</strong>  The other HecTime object</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int:</p>\n  \n  <ul>\n  <li>-1 if this object &lt; other</li>\n  <li>0 if this object == other</li>\n  <li>1 if this object &gt; other</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.compare_to", "modulename": "hec", "qualname": "HecTime.compare_to", "kind": "function", "doc": "<p>Not supported in this implementation</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.compute_number_intervals", "modulename": "hec", "qualname": "HecTime.compute_number_intervals", "kind": "function", "doc": "<p>Returns the number of complete intervals between this object and another specified HecTime object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (HecTime):</strong>  The other time to compute the number of intervals to</li>\n<li><p><strong>interval (Union[int, timedelta]):</strong>  The interval size to compute the number of intervals for.</p>\n\n<ul>\n<li><code>int</code> - the minutes in a standard interval</li>\n<li><code>timedelta</code> - If equivalent to a standard interval, the same result as specifying the equivalent integer\nis returned. Otherwise the both HecTime objects are converted to datetime objects and the number of\nintervals is computed as `((other.datetime - self.datetime) / timesdelta')</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if <code>interval</code> is a non-standard integer or if it is a nonstandard timedelta and\neither of this object or <code>other</code> is not convertable to a datetime object</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The number of complete intervals between this time and the other time.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.convert_time_zone", "modulename": "hec", "qualname": "HecTime.convert_time_zone", "kind": "function", "doc": "<p>Converts this object from one time zone to another, optionally specifyintg that the\ntarget time zone does not observe Daylight Saving Time (DST). Only for HecTime objects\nconvertable to datetime objects (between 01Jan0001, 00:00 and 31Dec9999, 23:59).</p>\n\n<p><strong>NOTE:</strong> The Java signatures for this method that operate on and return a copy of the HecTime\nobject are not supported in this implementation. The <code>astimezone()</code> method can be used for that purpose.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>from_time_zone (Union[ZoneInfo, str]):</strong>  The time zone to convert from</li>\n<li><strong>to_time_zone (Union[ZoneInfo, str]):</strong>  The target time zone</li>\n<li><strong>respect_daylight_saving (Optional[bool]):</strong>  Specifies whether the target time zone.\nshould observe DST. Defaults to True.\n<ul>\n<li>If <code>True</code>, the target time zone is used as specified</li>\n<li>If <code>False</code> and the specified target time zone observes DST, then a time zone is\nfound that has the same UTC offset as the specified target time zone but does not\nobserve DST.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  - If <code>respect_daylight_saving</code> is <code>True</code>, <code>to_time_zone</code> observes DST and no equivalent\ntime zone could be found that does not observer DST\n<ul>\n<li>If this object is not convertable to a datetime object</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">from_time_zone</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">to_time_zone</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">respect_daylight_saving</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.convert_to_time_zone", "modulename": "hec", "qualname": "HecTime.convert_to_time_zone", "kind": "function", "doc": "<p>Returns a copy of this object at the spcified time zone</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>time_zone (Optional[Union[\"HecTime\", datetime, ZoneInfo, timezone, str]]):</strong>  The target time zone or object containg the target time zone.\n<ul>\n<li>Use <code>None</code> to remove time zone information without time conversion.</li>\n<li>Use <code>\"local\"</code> to specify the system time zone.</li>\n</ul></li>\n<li><strong>on_tz_not_set (int, optional):</strong>  Specifies behavior if this object has no time zone attached. Defaults to 1.\n<ul>\n<li><code>0</code>: Quietly behave as if this object had the local time zone attached.</li>\n<li><code>1</code>: (default) Same as <code>0</code>, but issue a warning.</li>\n<li><code>2</code>: Raise an exception preventing objectes with out time zones attached from using this method.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: A copy of this object at the specified time zone</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timezone</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">on_tz_not_set</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.date", "modulename": "hec", "qualname": "HecTime.date", "kind": "function", "doc": "<p>Returns the date in the specified style</p>\n\n<table style='font-family:monospace;'>\n<tr><th colspan=\"4\">Base date styles</th></tr>\n<tr><td><b>0:</b>&nbsp;June&nbsp;2,&nbsp;1985</td><td><b>10:</b>&nbsp;&nbsp;June&nbsp;2,&nbsp;85</td><td><b>100:</b>&nbsp;JUNE&nbsp;2,&nbsp;1985</td><td><b>110:</b>&nbsp;JUNE&nbsp;2,&nbsp;85</td></tr>\n<tr><td><b>1:</b>&nbsp;&nbsp;Jun&nbsp;2,&nbsp;1985</td><td><b>11:</b>&nbsp;&nbsp;&nbsp;Jun&nbsp;2,&nbsp;85</td><td><b>101:</b>&nbsp;&nbsp;JUN&nbsp;2,&nbsp;1985</td><td><b>111:</b>&nbsp;&nbsp;JUN&nbsp;2,&nbsp;85</td></tr>\n<tr><td><b>2:</b>&nbsp;&nbsp;2&nbsp;June&nbsp;1985</td><td><b>12:</b>&nbsp;&nbsp;&nbsp;2&nbsp;June&nbsp;85</td><td><b>102:</b>&nbsp;&nbsp;2&nbsp;JUNE&nbsp;1985</td><td><b>112:</b>&nbsp;&nbsp;&nbsp;2&nbsp;JUN&nbsp;85</td></tr>\n<tr><td><b>3:</b>&nbsp;&nbsp;&nbsp;&nbsp;June&nbsp;1985</td><td><b>13:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;June&nbsp;85</td><td><b>103:</b>&nbsp;&nbsp;&nbsp;&nbsp;JUNE&nbsp;1985</td><td><b>113:</b>&nbsp;&nbsp;&nbsp;&nbsp;JUNE&nbsp;85</td></tr>\n<tr><td><b>4:</b>&nbsp;&nbsp;&nbsp;&nbsp;02Jun1985</td><td><b>14:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02Jun85</td><td><b>104:</b>&nbsp;&nbsp;&nbsp;&nbsp;02JUN1985</td><td><b>114:</b>&nbsp;&nbsp;&nbsp;&nbsp;02JUN85</td></tr>\n<tr><td><b>5:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2Jun1985</td><td><b>15:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2Jun85</td><td><b>105:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2JUN1985</td><td><b>115:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2JUN85</td></tr>\n<tr><td><b>6:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jun1985</td><td><b>16:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jun85</td><td><b>106:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JUN1985</td><td><b>116:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JUN85</td></tr>\n<tr><td><b>7:</b>&nbsp;&nbsp;02&nbsp;Jun&nbsp;1985</td><td><b>17:</b>&nbsp;&nbsp;&nbsp;02&nbsp;Jun&nbsp;85</td><td><b>107:</b>&nbsp;&nbsp;02&nbsp;JUN&nbsp;1985</td><td><b>117:</b>&nbsp;&nbsp;02&nbsp;JUN&nbsp;85</td></tr>\n<tr><td><b>8:</b>&nbsp;&nbsp;&nbsp;2&nbsp;Jun&nbsp;1985</td><td><b>18:</b>&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;Jun&nbsp;85</td><td><b>108:</b>&nbsp;&nbsp;&nbsp;2&nbsp;JUN&nbsp;1985</td><td><b>118:</b>&nbsp;&nbsp;&nbsp;2&nbsp;JUN&nbsp;85</td></tr>\n<tr><td><b>9:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jun&nbsp;1985</td><td><b>19:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jun&nbsp;85</td><td><b>109:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JUN&nbsp;1985</td><td><b>119:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JUN&nbsp;85</td></tr>\n<tr><th colspan=\"4\">Extended date styles</th></tr>\n<tr><td><b>-1:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6/2/85</td><td><b>-11:</b>&nbsp;&nbsp;&nbsp;&nbsp;06/02/85</td><td><b>-101:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6/2/1985</td><td><b>-111:</b>&nbsp;06/02/1985</td></tr>\n<tr><td><b>-2:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6-2-85</td><td><b>-12:</b>&nbsp;&nbsp;&nbsp;&nbsp;06-02-85</td><td><b>-102:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6-2-1985</td><td><b>-112:</b>&nbsp;06-02-1985</td></tr>\n<tr><td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td><b>-13:</b>&nbsp;&nbsp;1985-06-02</td><td></td><td></td></tr>\n</table>\n\n<p><strong>NOTE</strong> that years that overflow four digits will not be truncated if using a style that shows four digits in the table (styles 0..9, 100..109, -113..-101 and -13).\nOther formats will continue to show only the last two digits of the year. In all cases a negative sign will be prepended to the year for negative years (whether two digits or more are shown).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>style (Optional[int]):</strong>  The date style to use. If not specified the <a href=\"#HecTime.default_date_style\"><code>default_date_style</code></a> property is used</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The formatted date</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">style</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.date_and_time", "modulename": "hec", "qualname": "HecTime.date_and_time", "kind": "function", "doc": "<p>Returns a string representing the date and time in the specified style.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>style (Optional[int]):</strong>  The date style to use. If not specified the <a href=\"#HecTime.default_date_style\"><code>default_date_style</code></a> property is used</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The formatted date and time. The date is generated using the style parameter (see <a href=\"#HecTime.date\"><code>date</code></a>), which is separated from\n  the time portion (with colons) (see <a href=\"#HecTime.time\"><code>time</code></a>) by a comma and space</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">style</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.date_str", "modulename": "hec", "qualname": "HecTime.date_str", "kind": "variable", "doc": "<p>The object's current date string using the default_date_style</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.HecTime.date_time_str", "modulename": "hec", "qualname": "HecTime.date_time_str", "kind": "variable", "doc": "<p>The object's current date and time string using the default_date_style</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.HecTime.datetime", "modulename": "hec", "qualname": "HecTime.datetime", "kind": "function", "doc": "<p>Returns a <code>datetime</code> object equivalent to this object.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>datetime: The equivalent <code>datetime</code> object or <code>None</code> if this object's time is undefined</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.day", "modulename": "hec", "qualname": "HecTime.day", "kind": "variable", "doc": "<p>The object's day of month, or None if undefined</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[int]"}, {"fullname": "hec.HecTime.day_of_week", "modulename": "hec", "qualname": "HecTime.day_of_week", "kind": "function", "doc": "<p>Returns the day of week (1 = Sunday -> 7 = Saturday) for this object.</p>\n\n<p><strong>NOTE:</strong> This differs from <code>datetime.weekday()</code> whch returns 0=Monday -> 6=Sunday.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The day of week (1 = Sunday -> 7 = Saturday)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.day_of_week_name", "modulename": "hec", "qualname": "HecTime.day_of_week_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.day_of_year", "modulename": "hec", "qualname": "HecTime.day_of_year", "kind": "function", "doc": "<p>Returns the day of the year of this object (01Jan = 1)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[int]: The day of the year</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.default_date_style", "modulename": "hec", "qualname": "HecTime.default_date_style", "kind": "variable", "doc": "<p>The object's current default data style.</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.HecTime.defined", "modulename": "hec", "qualname": "HecTime.defined", "kind": "variable", "doc": "<p>Whether this object has been defined</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.HecTime.equal_to", "modulename": "hec", "qualname": "HecTime.equal_to", "kind": "function", "doc": "<p>Returns whether this object is equivalent to another</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (Union[&quot;HecTime&quot;, datetime]):</strong>  The object to compare to</li>\n</ul>\n\n<h6 id=\"deprrecated\">Deprrecated:</h6>\n\n<blockquote>\n  <p>Use <code>==</code> operator instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: The result of the comparison</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.get_default_date_style", "modulename": "hec", "qualname": "HecTime.get_default_date_style", "kind": "function", "doc": "<p>Returns the default date style</p>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.default_date_style\"><strong>default_date_style</strong></a> property instead</p>\n</blockquote>\n\n<p>Returns\n    int: The default date style</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.get_interval_offset", "modulename": "hec", "qualname": "HecTime.get_interval_offset", "kind": "function", "doc": "<p>Returns the number of minutes that the current object is after the top of the most recent standard interval</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>interval Union[Interval, int]:</strong>  The interval to determine the offset into. If int, then the value is minutes.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if the interval is not a standard interval</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[int]: The number of minutes into the interval</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.get_iso_8601_date_time", "modulename": "hec", "qualname": "HecTime.get_iso_8601_date_time", "kind": "function", "doc": "<p>Returns the time of this object in ISO 8601 format.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The time of this object in ISO 8601 format</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.get_minutes", "modulename": "hec", "qualname": "HecTime.get_minutes", "kind": "function", "doc": "<p>Returns the time of this object as (days since 1899) * 1400 + (minutes past midnight), optionally offsetting by a time zone</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>time_zone_offset (Optional[Union[int, ZoneInfo]]):</strong>  if <code>int</code>, the number of minutes <em>behind</em> UTC (positive for western longitudes)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The time in minutes</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone_offset</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.get_shows_time_as_beginning_of_day", "modulename": "hec", "qualname": "HecTime.get_shows_time_as_beginning_of_day", "kind": "function", "doc": "<p>Retrieves whether midnight is shown as hour 0 instead of hour 24 of the previous day</p>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.midnight_as_2400\"><strong>midnight_as_2400</strong></a> property instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: <code>True</code> if midnight is shown as hour 0, <code>False</code> if midnight is shown as hour 24</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.get_time", "modulename": "hec", "qualname": "HecTime.get_time", "kind": "function", "doc": "<p>Returns a string representing the time portion</p>\n\n<ul>\n<li>with_colons = True (default), <code>[..., 6, 8, 23]</code> is retuned is <code>06:08:23</code></li>\n<li>with_colons = False, <code>[..., 6, 8, 23]</code> is retuned is <code>0608</code></li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>with_colons (Optional[bool]):</strong>  Specifies with or without colons. Defaults to <code>True</code>.</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>use <a href=\"#HecTime.HecTime.time\"><strong>time</strong></a> method instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The time portion string with colons (hour, minute, and second), or without colons (hour, minute only))</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">with_colons</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.get_time_granularity", "modulename": "hec", "qualname": "HecTime.get_time_granularity", "kind": "function", "doc": "<p>Returns the granularity of this object</p>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.granularity\"><strong>granularity</strong></a> property instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The granularity</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.get_time_in_millis", "modulename": "hec", "qualname": "HecTime.get_time_in_millis", "kind": "function", "doc": "<p>Returns the time of this object in milliseconds into of the Unix Epoch (01Jan1970 00:00:00 UTC).</p>\n\n<p>Note that is the standard time value used in Java as well as 1000.0 times the standard time\nvalue used in python (e.g., <code>time.time()</code> or <code>datetime.timestamp()</code>)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>time_zone_offset (Optional[Union[int, ZoneInfo]]):</strong>  if <code>int</code>, the number of minutes <em>behind</em> UTC (positive for western longitudes).\nIf not specified, the milliseconds returned will be as if this object is in UTC</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[int]: None if this object is not defined., otherwise the milliseconds of the current time from the beginning of the Unix Epoch</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone_offset</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.get_xml_date_time", "modulename": "hec", "qualname": "HecTime.get_xml_date_time", "kind": "function", "doc": "<p>Returns the time of this object in ISO 8601 format.</p>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.get_iso_8601_date_time\"><strong>get_iso_8601_date_time</strong></a> instead</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if time_zone_offset is specifed but is not an integer or ZoneInfo object,</li>\n<li>or is a ZoneInfo object and no UTC offset could be determined from it</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The time of this object in ISO 8601 format</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.granularity", "modulename": "hec", "qualname": "HecTime.granularity", "kind": "variable", "doc": "<p>The object's current granularity.</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The granularity</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.HecTime.greater_than", "modulename": "hec", "qualname": "HecTime.greater_than", "kind": "function", "doc": "<p>Returns whether this object is greater than (later than) another HecTime object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (HecTime):</strong>  The other object to compare to</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use the the <code>&gt;</code> operator instead.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether this object is greater than the other</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.greater_than_equal_to", "modulename": "hec", "qualname": "HecTime.greater_than_equal_to", "kind": "function", "doc": "<p>Returns whether this object is greater than (later than) or equal to (same time as) another HecTime object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (HecTime):</strong>  The other object to compare to</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use the the <code>&gt;=</code> operator instead.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether this object is greater than or equal to the other</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.hour", "modulename": "hec", "qualname": "HecTime.hour", "kind": "variable", "doc": "<p>The object's hour of day, or None if undefined</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[int]"}, {"fullname": "hec.HecTime.hour_minutes", "modulename": "hec", "qualname": "HecTime.hour_minutes", "kind": "function", "doc": "<p>Returns the time portion in HHMM format or \"\" if this object is undefined</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The time portion in HHMM format or \"\" if this object is undefined</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.hours_minutes_seconds", "modulename": "hec", "qualname": "HecTime.hours_minutes_seconds", "kind": "function", "doc": "<p>Returns the object's hour, minute, and second in the spefied parameters</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>hours (list[int]):</strong>  Element 0 recieves the hour</li>\n<li><strong>minutes (list[int]):</strong>  Element 0 recieves the minute</li>\n<li><strong>seconds (list[int]):</strong>  Element 0 receives the second</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hours</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">minutes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">seconds</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.increment", "modulename": "hec", "qualname": "HecTime.increment", "kind": "function", "doc": "<p>Increments this object by a specified number of intervals.</p>\n\n<p>For month-based intervals (<code>\"Tri-Month\"</code>, <code>\"Semi-Month\"</code>, <code>\"1Month\"</code>, <code>\"1Year\"</code>), if the date\nof the current object is the last day of a month, the resulting date will be the last day of the month\nor sub-month (days 10 or 20 for <code>\"Tri-Month\"</code> and day 15 for <code>\"Semi-Month\"</code>), as shown:</p>\n\n<table>\n<tr><th>Start Time</th><th>Count</th><th>Interval</th><th>Result</th></tr>\n<tr><td>28Feb2023, 01:00</td><td>1</td><td><code>\"Tri-Month\"</code></td><td>10Mar2023, 01:00</td></tr>\n<tr><td>28Feb2023, 01:00</td><td>2</td><td><code>\"Tri-Month\"</code></td><td>20Mar2023, 01:00</td></tr>\n<tr><td>28Feb2023, 01:00</td><td>3</td><td><code>\"Tri-Month\"</code></td><td>31Mar2023, 01:00</td></tr>\n<tr><td>28Feb2024, 01:00</td><td>1</td><td><code>\"Tri-Month\"</code></td><td>08Mar2023, 01:00</td></tr>\n<tr><td>28Feb2024, 01:00</td><td>2</td><td><code>\"Tri-Month\"</code></td><td>18Mar2023, 01:00</td></tr>\n<tr><td>28Feb2024, 01:00</td><td>3</td><td><code>\"Tri-Month\"</code></td><td>28Mar2023, 01:00</td></tr>\n</table>\n\n<p>Note that this method produces results that differ from the Java HecTime.increment() method where\nthe Java code produces incorrect results, as in the following examples (all such discrepancies are\nlimited to <code>\"Tri-Month\"</code>, <code>\"Semi-Month\"</code>, and <code>\"1Month\"</code>:</p>\n\n<table>\n<tr><th>Start Time</th><th>Count</th><th>Interval</th><th>Correct Result</th><th>Java HecTime Result</th></tr>\n<tr><td>29Jan2023, 01:00</td><td>1</td><td><code>\"1Month\"</code></td><td>28Feb2023, 01:00</td><td>01Mar2023, 01:00</td></tr>\n<tr><td>09Feb2024, 01:00</td><td>2</td><td><code>\"Tri-Month\"</code></td><td>29Feb2024, 01:00</td><td>09Mar2024, 01:00</td></tr>\n<tr><td>28Feb2024, 01:00</td><td>2</td><td><code>\"Semi-Month\"</code></td><td>28Mar2024, 01:00</td><td>31Mar2024, 01:00</td></tr>\n</table>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>count (int):</strong>  The number of intervals to increment</li>\n<li><strong>interval (Union[Interval, TimeSpan, timedelta, int]):</strong>  The interval to increment by. If int:\n<ul>\n<li>interpreted as a number of minutes</li>\n<li>for standard intervals:\n<ul>\n<li>should be actual minutes for intervals &lt;= 1Week</li>\n<li>should characteristic minutes for intervals &gt; 1Week</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The incremented object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">count</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.increment_secs", "modulename": "hec", "qualname": "HecTime.increment_secs", "kind": "function", "doc": "<p>Increments this object by a specified number of intervals, which are specified in seconds</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>count (int):</strong>  The number of intervals to increment</li>\n<li><strong>interval (int):</strong>  The size of the interval in seconds. The behavior depends on whether the interval is &lt; 60:\n<ul>\n<li><code>&lt; 60</code> - the object is incremented by (count * interval) seconds</li>\n<li><code>&gt;= 60</code> - The object is incremented by (count * interval // 60) minutes</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The incremented object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">count</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.is_defined", "modulename": "hec", "qualname": "HecTime.is_defined", "kind": "function", "doc": "<p>Returns whether this object has been defined</p>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.defined\"><strong><code>defined</code></strong></a> property instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether this object has been defined</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.iso_date", "modulename": "hec", "qualname": "HecTime.iso_date", "kind": "function", "doc": "<p>Returns the date of the current object as YYMMDD format</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The date in YYMMDD format</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.iso_time", "modulename": "hec", "qualname": "HecTime.iso_time", "kind": "function", "doc": "<p>Returns the time of the current object as HHMMSS format</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The date in HHMMSS format</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.is_time_defined", "modulename": "hec", "qualname": "HecTime.is_time_defined", "kind": "function", "doc": "<p>Returns whether this object has been defined</p>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.defined\"><strong><code>defined</code></strong></a> property instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether this object has been defined</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.is_utc", "modulename": "hec", "qualname": "HecTime.is_utc", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "hec.HecTime.label_as_time_zone", "modulename": "hec", "qualname": "HecTime.label_as_time_zone", "kind": "function", "doc": "<p>Attaches the specified time zone to this object. Does not change the time</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>time_zone (Optional[Union[\"HecTime\", datetime, ZoneInfo, timezone, str]]):</strong>  The time zone to attach or object containing that time zone.\nUse <code>\"local\"</code> to specify the system time zone.</li>\n<li><strong>on_already_set (int, optional):</strong>  Specifies action to take if a different time zone is already\nattached. Defaults to 1.\n<ul>\n<li><code>0</code>: Quietly attach the new time zone</li>\n<li><code>1</code>: (default) Issue a warning about attaching a different time zone</li>\n<li><code>2</code>: Raises an exception</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if a different time zone is already attached and <code>on_already_set</code> == 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The updated object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timezone</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">on_already_set</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.julian", "modulename": "hec", "qualname": "HecTime.julian", "kind": "function", "doc": "<p>Returns the number of days since 31Dec8199 for this object</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The number of days since 31Dec1899</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.less_than", "modulename": "hec", "qualname": "HecTime.less_than", "kind": "function", "doc": "<p>Returns whether this object is less than (earlier than) another HecTime object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (HecTime):</strong>  The other HecTime object</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use the <code>&lt;</code> operator instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether this object is less than the other object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.less_than_equal_to", "modulename": "hec", "qualname": "HecTime.less_than_equal_to", "kind": "function", "doc": "<p>Returns whether this object is less than (earlier than) another or equal to (same time as) HecTime object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (HecTime):</strong>  The other HecTime object</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use the <code>&lt;=</code> operator instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether this object is less than or equal to the other object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.midnight_as_2400", "modulename": "hec", "qualname": "HecTime.midnight_as_2400", "kind": "variable", "doc": "<p>The object's current setting of whether to show midnight as hour 24 (default) or not.</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.HecTime.minute", "modulename": "hec", "qualname": "HecTime.minute", "kind": "variable", "doc": "<p>The object's minute of hour, or None if undefined</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[int]"}, {"fullname": "hec.HecTime.minutes_since_midnight", "modulename": "hec", "qualname": "HecTime.minutes_since_midnight", "kind": "function", "doc": "<p>Returns the number of minutes past midnight for this object</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: the number of minutes past midnight</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.month", "modulename": "hec", "qualname": "HecTime.month", "kind": "variable", "doc": "<p>The object's month, or None if undefined</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[int]"}, {"fullname": "hec.HecTime.not_equal_to", "modulename": "hec", "qualname": "HecTime.not_equal_to", "kind": "function", "doc": "<p>Returns whether this object is not equivalent to another</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (Union[&quot;HecTime&quot;, datetime]):</strong>  The object to compare to</li>\n</ul>\n\n<h6 id=\"deprrecated\">Deprrecated:</h6>\n\n<blockquote>\n  <p>Use <code>!=</code> operator instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: The result of the comparison</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.now", "modulename": "hec", "qualname": "HecTime.now", "kind": "function", "doc": "<p>Returns a new <code>HecTime</code> object initialized to the current system time and specified or default granularity</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>granularity (int, optional):</strong>  The granularity of the new object. Defaults to MINUTE_GRANULARITY.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The newly created object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">granularity</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">11</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.second", "modulename": "hec", "qualname": "HecTime.second", "kind": "variable", "doc": "<p>The object's second of minute, or None if undefined</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[int]"}, {"fullname": "hec.HecTime.seconds_since_midnight", "modulename": "hec", "qualname": "HecTime.seconds_since_midnight", "kind": "function", "doc": "<p>Returns the number of seconds past midnight for this object</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: the number of seconds past midnight</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.set", "modulename": "hec", "qualname": "HecTime.set", "kind": "function", "doc": "<p>Set the object to a specified date/time. Valid parameters are:</p>\n\n<ul>\n<li><strong><code>set(time_int: int)</code></strong> sets the time to the value of <code>time_int</code> for the current granularity</li>\n<li><strong><code>set(date_time_str: str)</code></strong> sets the time to the results of <a href=\"#HecTime.parse_date_time_str\">parse_date_time_str</a>(<code>date_time_str</code>)</li>\n<li><strong><code>set(dt: datetime)</code></strong> sets the time to the value of <code>dt</code></li>\n<li><strong><code>set(values: Union[list[int],tuple[int,...]])</code></strong> sets the time to <code>values</code></li>\n<li><strong><code>set(other_hectime: HecTime)</code></strong> sets the time and granularity to be the same as <code>other_hectime</code></li>\n<li><strong><code>set(date_str: str, time_str: str)</code></strong> sets the time to the results of <a href=\"#HecTime.parse_date_time_str\">parse_date_time_str</a>(<code>date_str</code>+\"&nbsp;\"+<code>time_str</code>)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: <code>0</code> if date/time is successfully set, otherwise non-zero</p>\n</blockquote>\n\n<h6 id=\"see-also\">See Also:</h6>\n\n<blockquote>\n  <p><a href=\"#parse_date_time_str\"><strong><code>parse_date_time_str()</code></strong></a>\n  <br><a href=\"#HecTime.strptime\"><strong><code>HecTime.strptime()</code></strong></a></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.set_current", "modulename": "hec", "qualname": "HecTime.set_current", "kind": "function", "doc": "<p>Sets this object to the current time</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.set_date", "modulename": "hec", "qualname": "HecTime.set_date", "kind": "function", "doc": "<p>Sets the date portion only from a string</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>date_str (str):</strong>  The date string. Any time portion is ignored</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: <code>0</code> on success or <code>-1</code> on failure</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">date_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.set_default_date_style", "modulename": "hec", "qualname": "HecTime.set_default_date_style", "kind": "function", "doc": "<p>Sets the default date style</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>style (int):</strong>  The default date style</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.default_date_style\"><strong>default_date_style</strong></a> property instead</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">style</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.set_julian", "modulename": "hec", "qualname": "HecTime.set_julian", "kind": "function", "doc": "<p>Sets the date portion from the number of days since 1899, and optionally the time portion</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>julian (int):</strong>  The number of days since 1899</li>\n<li><strong>minutes_since_midnight (Optional[int]):</strong>  The number of minutes past midnight for the time portion. Defaults to None.</li>\n<li><strong>seconds_since_midnight (Optional[int]):</strong>  The number of seconds past the minute for the time portion. Defaults to None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">julian</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">minutes_since_midnight</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">seconds_since_midnight</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.set_minutes", "modulename": "hec", "qualname": "HecTime.set_minutes", "kind": "function", "doc": "<p>Set the date and time portions of this object from the number of minutes since 1899</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>total_minutes (int):</strong>  The number of minutes since 1899</li>\n<li><strong>time_zone_offset (Optional[Union[int, &quot;ZoneInfo&quot;]]):</strong>  The time zone to represent this object in. Defaults to None.\nIf <code>int</code>, the number of minutes <em>behind</em> UTC (positive for western longitudes)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if <code>time_zone_offset</code> is not an integer or <code>ZoneInfo</code> object, or if the UTC offset cannot be\ndetermed for the <code>ZoneInfo</code> object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">total_minutes</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone_offset</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.set_seconds", "modulename": "hec", "qualname": "HecTime.set_seconds", "kind": "function", "doc": "<p>Sets the date and time portions of this object from the number seconds since 1970-01-01T00:00:00Z</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>total_seconds (int):</strong>  The number of seconds since 1970-01-01T00:00:00Z (same as Python timestamps and seconds of Unix Epoch)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">total_seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.set_time", "modulename": "hec", "qualname": "HecTime.set_time", "kind": "function", "doc": "<p>Set the time portion of this object from a time string with or without the date portion</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>time_str (str):</strong>  the time string</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: <code>0</code> on success or <code>-1</code> if the time string cannot be parsed</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.set_time_granularity", "modulename": "hec", "qualname": "HecTime.set_time_granularity", "kind": "function", "doc": "<p>Sets the granularity, keeping the existing time values if possible</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>granularity (int):</strong>  The new granularity</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.granularity\"><strong>granularity</strong></a> property instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">granularity</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.set_time_granularity_seconds", "modulename": "hec", "qualname": "HecTime.set_time_granularity_seconds", "kind": "function", "doc": "<p>Not supported in this implementation</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">granularity_in_seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.set_time_in_millis", "modulename": "hec", "qualname": "HecTime.set_time_in_millis", "kind": "function", "doc": "<p>Sets the date and time portions of this object from the number milliseconds since 1970-01-01T00:00:00Z</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>milliseconds (int):</strong>  The number of seconds since 1970-01-01T00:00:00Z (same as Java milliseconds and milliseconds of Unix Epoch)</li>\n<li><strong>time_zone_offset (Optional[Union[int, &quot;ZoneInfo&quot;]]):</strong>  The time zone to represent this object in. Defaults to None.\nIf <code>int</code>, the number of minutes <em>behind</em> UTC (positive for western longitudes)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">milliseconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone_offset</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.set_undefined", "modulename": "hec", "qualname": "HecTime.set_undefined", "kind": "function", "doc": "<p>Sets this object to the undefined state.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.set_xml", "modulename": "hec", "qualname": "HecTime.set_xml", "kind": "function", "doc": "<p>Sets this object from an ISO 8601 date/time string.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>date_time_str (str):</strong>  The date/time string</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>The <a href=\"#HecTime(set)\"><strong><code>set()</code></strong></a> function handles this. Use it instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: <code>0</code> on success, <code>-1</code> otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">date_time_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.set_year_month_day", "modulename": "hec", "qualname": "HecTime.set_year_month_day", "kind": "function", "doc": "<p>Sets the date portion from a year, month, and day, and optioally the time portion from minutes past midnight</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>year (int):</strong>  The year</li>\n<li><strong>month (int):</strong>  The month</li>\n<li><strong>day (int):</strong>  The day</li>\n<li><strong>minutes_since_midnight (Optional[int]):</strong>  The minutes past midnight</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">month</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">day</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">minutes_since_midnight</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.show_time_as_beginning_of_day", "modulename": "hec", "qualname": "HecTime.show_time_as_beginning_of_day", "kind": "function", "doc": "<p>Sets whether to show midnight as hour 0 instead of hour 24 of the previous day</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (bool):</strong>  Whether to show midnight as hour 0 instead of hour 24 of the previous day</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.midnight_as_2400\"><strong>midnight_as_2400</strong></a> property instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.strftime", "modulename": "hec", "qualname": "HecTime.strftime", "kind": "function", "doc": "<p>Returns a string representing the date and time in the specified format.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>format (str):</strong>  The format string.\nFormat specfics can be found <a href=\"https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior\"><strong>here</strong></a>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The formatted date and time</p>\n</blockquote>\n\n<h6 id=\"see-also\">See Also:</h6>\n\n<blockquote>\n  <ul>\n  <li><a href=\"#Hectime.date\"><code>date()</code></a></li>\n  <li><a href=\"#Hectime.date_and_time\"><code>date_and_time()</code></a></li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.strptime", "modulename": "hec", "qualname": "HecTime.strptime", "kind": "function", "doc": "<p>Sets this object from a string representation and a matching format.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>date_time_str (str):</strong>  The string to parse.</li>\n<li><strong>format (str):</strong>  The format describing the string.\nFormat specfics can be found <a href=\"https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior\"><strong>here</strong></a>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The object updated from the string representation and formt.</p>\n</blockquote>\n\n<h6 id=\"see-also\">See Also:</h6>\n\n<blockquote>\n  <p><a href=\"#parse_date_time_str\"><strong><code>parse_date_time_str()</code></strong></a>\n  <br><a href=\"#HecTime.set\"><strong><code>HecTime.set()</code></strong></a></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">date_time_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.subtract", "modulename": "hec", "qualname": "HecTime.subtract", "kind": "function", "doc": "<p>Subtracts an integer number of granules or HecTime object from this one</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (Union[int, &quot;HecTime&quot;, TimeSpan, timedelta, str]):</strong>  item to subtract</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use the <a href=\"#subtraction\"><code>-=</code></a> operator instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.subtract_days", "modulename": "hec", "qualname": "HecTime.subtract_days", "kind": "function", "doc": "<p>Subtracts a number of days from the object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>days (int):</strong>  the number of days to subtract.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">days</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.subtract_hours", "modulename": "hec", "qualname": "HecTime.subtract_hours", "kind": "function", "doc": "<p>Subtracts a number of hours fram the object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>hours (int):</strong>  the number of hours to subtract.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.subtract_minutes", "modulename": "hec", "qualname": "HecTime.subtract_minutes", "kind": "function", "doc": "<p>Subtracts a number of minutes from the object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>minutes (int):</strong>  the number of minutes to subtract.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">minutes</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.subtract_seconds", "modulename": "hec", "qualname": "HecTime.subtract_seconds", "kind": "function", "doc": "<p>Subtracts a number of seconds from the object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>seconds (int):</strong>  the number of seconds to subtract.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.time", "modulename": "hec", "qualname": "HecTime.time", "kind": "function", "doc": "<p>Returns a string representing the time portion</p>\n\n<ul>\n<li>with_colons = True (default), <code>[..., 6, 8, 23]</code> is retuned is <code>06:08:23</code></li>\n<li>with_colons = False, <code>[..., 6, 8, 23]</code> is retuned is <code>0608</code></li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>with_colons (Optional[bool]):</strong>  Specifies with or without colons. Defaults to <code>True</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The time portion string with colons (hour, minute, and second), or without colons (hour, minute only))</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">with_colons</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.time_granularity", "modulename": "hec", "qualname": "HecTime.time_granularity", "kind": "function", "doc": "<p>Returns the granularity of this object</p>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.granularity\"><strong>granularity</strong></a> property instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The granularity</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.to_string", "modulename": "hec", "qualname": "HecTime.to_string", "kind": "function", "doc": "<p>Not supported in this implementation</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">style</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.HecTime.tzinfo", "modulename": "hec", "qualname": "HecTime.tzinfo", "kind": "variable", "doc": "<p>The object's attached time zone</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[zoneinfo.ZoneInfo]"}, {"fullname": "hec.HecTime.value", "modulename": "hec", "qualname": "HecTime.value", "kind": "variable", "doc": "<p>The object's current time integer.</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.HecTime.year", "modulename": "hec", "qualname": "HecTime.year", "kind": "variable", "doc": "<p>The object's year, or None if undefined</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[int]"}, {"fullname": "hec.HecTime.values", "modulename": "hec", "qualname": "HecTime.values", "kind": "variable", "doc": "<p>The object's current time values (<code>[year, month, day, hour, minute, second]</code>).</p>\n\n<p>This property is None when the <a href=\"#value\"><code>value</code></a> property is <a href=\"#UNDEFINED_TIME\"><code>UNDEFINED_TIME</code></a></p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[list[int]]"}, {"fullname": "hec.HecTimeException", "modulename": "hec", "qualname": "HecTimeException", "kind": "class", "doc": "<p>Exception specific to the hectime module</p>\n", "bases": "builtins.Exception"}, {"fullname": "hec.Interval", "modulename": "hec", "qualname": "Interval", "kind": "class", "doc": "<p>Class to hold information about time series recurrence intervals.</p>\n\n<p>Intervals are a restriction of the TimeSpan base class that also hold extra information.</p>\n\n<ul>\n<li><strong>Restriction:</strong> At most one of <code>years</code>, <code>months</code>, <code>days</code>, <code>hours</code>, and <code>minutes</code> can be non-zero, and <code>seconds</code> must be zero.</li>\n<li><strong>Extension:</strong>\n<ul>\n<li>Each interval has a name that may be context specific.</li>\n<li>Each also has a specified number of minutes:\n<ul>\n<li>For non-calendar-based intervals, the minutes are the actual number of minutes in the interval</li>\n<li>For calendar-based intervals, the minutes are a characteristic number based on standard calendar items:<pre>\n<ul>\n<li>Tri-Month:  minutes =  10 * 1440       =    14400</li>\n<li>Semi-Month: minutes =  15 * 1440       =    21600</li>\n<li>1 Month:    minutes =  30 * 1440       =    43200</li>\n<li>1 Year:     minutes = 365 * 1440       =   525600</li>\n<li>1 Decade:   minutes = 365 * 1440 * 10  =  5256000</li>\n<li>1 Century:  minutes = 365 * 1440 * 100 = 52560000</pre></li>\n</ul></li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p>Intervals should not need to be created by the user, as intervals for the following three contexts are\ncreated during initialization of the interval module:</p>\n\n<ul>\n<li><strong>CWMS Context:</strong> Contains Intervals used with CWMS</li>\n<li><strong>DSS Context:</strong> Contains Intervals used with HEC-DSS files</li>\n<li><strong>DSS Block Size Context:</strong> Contains Intervals for the record block sizes in HEC-DSS files</li>\n</ul>\n\n<p>Each context has its own set of four static methods that retrieve Interval objects or their names:</p>\n\n<ul>\n<li><code>get_any<em>Context</em>()</code></li>\n<li><code>get_any<em>Context</em>_name()</code></li>\n<li><code>get_all<em>Context</em>()</code></li>\n<li><code>get_all<em>Context</em>_names()</code></li>\n</ul>\n\n<p>Where <em>Context</em> is <code>Cwms</code>, <code>Dss</code>, or <code>DssBlock</code>.</p>\n\n<p>There are similar static methods that retrieve Interval objects or their names from all contexts:</p>\n\n<ul>\n<li><code>get_any()</code></li>\n<li><code>get_any_name()</code></li>\n<li><code>get_all()</code></li>\n<li><code>get_all_names()</code></li>\n</ul>\n", "bases": "hec.timespan.TimeSpan"}, {"fullname": "hec.Interval.__init__", "modulename": "hec", "qualname": "Interval.__init__", "kind": "function", "doc": "<p>Initializer used by module</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">timespan</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">minutes</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "hec.Interval.MINUTES", "modulename": "hec", "qualname": "Interval.MINUTES", "kind": "variable", "doc": "<p>Dictionary that holds interval minutes, accessed by interval name. Includes all contexts.\n<details>\n<summary>Click to show contents.</summary></p>\n\n<pre><table>\n<tr><th>Name</th><th>Minutes</th><th>Context(s)</th></tr>\n<tr><td>0</td><td>0</td><td>CWMS</td></tr>\n<tr><td>Irr</td><td>0</td><td>CWMS</td></tr>\n<tr><td>IR-Century</td><td>0</td><td>DSS</td></tr>\n<tr><td>IR-Day</td><td>0</td><td>DSS</td></tr>\n<tr><td>IR-Decade</td><td>0</td><td>DSS</td></tr>\n<tr><td>IR-Month</td><td>0</td><td>DSS</td></tr>\n<tr><td>IR-Year</td><td>0</td><td>DSS</td></tr>\n<tr><td>1Minute</td><td>1</td><td>CWMS, DSS</td></tr>\n<tr><td>2Minute</td><td>2</td><td>DSS</td></tr>\n<tr><td>2Minutes</td><td>2</td><td>CWMS</td></tr>\n<tr><td>3Minute</td><td>3</td><td>DSS</td></tr>\n<tr><td>3Minutes</td><td>3</td><td>CWMS</td></tr>\n<tr><td>4Minute</td><td>4</td><td>DSS</td></tr>\n<tr><td>4Minutes</td><td>4</td><td>CWMS</td></tr>\n<tr><td>5Minute</td><td>5</td><td>DSS</td></tr>\n<tr><td>5Minutes</td><td>5</td><td>CWMS</td></tr>\n<tr><td>6Minute</td><td>6</td><td>DSS</td></tr>\n<tr><td>6Minutes</td><td>6</td><td>CWMS</td></tr>\n<tr><td>10Minute</td><td>10</td><td>DSS</td></tr>\n<tr><td>10Minutes</td><td>10</td><td>CWMS</td></tr>\n<tr><td>12Minute</td><td>12</td><td>DSS</td></tr>\n<tr><td>12Minutes</td><td>12</td><td>CWMS</td></tr>\n<tr><td>15Minute</td><td>15</td><td>DSS</td></tr>\n<tr><td>15Minutes</td><td>15</td><td>CWMS</td></tr>\n<tr><td>20Minute</td><td>20</td><td>DSS</td></tr>\n<tr><td>20Minutes</td><td>20</td><td>CWMS</td></tr>\n<tr><td>30Minute</td><td>30</td><td>DSS</td></tr>\n<tr><td>30Minutes</td><td>30</td><td>CWMS</td></tr>\n<tr><td>1Hour</td><td>60</td><td>CWMS, DSS</td></tr>\n<tr><td>2Hour</td><td>120</td><td>DSS</td></tr>\n<tr><td>2Hours</td><td>120</td><td>CWMS</td></tr>\n<tr><td>3Hour</td><td>180</td><td>DSS</td></tr>\n<tr><td>3Hours</td><td>180</td><td>CWMS</td></tr>\n<tr><td>4Hour</td><td>240</td><td>DSS</td></tr>\n<tr><td>4Hours</td><td>240</td><td>CWMS</td></tr>\n<tr><td>6Hour</td><td>360</td><td>DSS</td></tr>\n<tr><td>6Hours</td><td>360</td><td>CWMS</td></tr>\n<tr><td>8Hour</td><td>480</td><td>DSS</td></tr>\n<tr><td>8Hours</td><td>480</td><td>CWMS</td></tr>\n<tr><td>12Hour</td><td>720</td><td>DSS</td></tr>\n<tr><td>12Hours</td><td>720</td><td>CWMS</td></tr>\n<tr><td>1Day</td><td>1440</td><td>CWMS, DSS</td></tr>\n<tr><td>2Day</td><td>2880</td><td>DSS</td></tr>\n<tr><td>2Days</td><td>2880</td><td>CWMS</td></tr>\n<tr><td>3Day</td><td>4320</td><td>DSS</td></tr>\n<tr><td>3Days</td><td>4320</td><td>CWMS</td></tr>\n<tr><td>4Day</td><td>5760</td><td>DSS</td></tr>\n<tr><td>4Days</td><td>5760</td><td>CWMS</td></tr>\n<tr><td>5Day</td><td>7200</td><td>DSS</td></tr>\n<tr><td>5Days</td><td>7200</td><td>CWMS</td></tr>\n<tr><td>6Day</td><td>8640</td><td>DSS</td></tr>\n<tr><td>6Days</td><td>8640</td><td>CWMS</td></tr>\n<tr><td>1Week</td><td>10080</td><td>CWMS, DSS</td></tr>\n<tr><td>Tri-Month</td><td>14400</td><td>DSS</td></tr>\n<tr><td>Semi-Month</td><td>21600</td><td>DSS</td></tr>\n<tr><td>1Month</td><td>43200</td><td>CWMS, DSS, DSS BLOCK SIZE</td></tr>\n<tr><td>1Year</td><td>525600</td><td>CWMS, DSS, DSS BLOCK SIZE</td></tr>\n<tr><td>1Decade</td><td>5256000</td><td>DSS BLOCK SIZE</td></tr>\n<tr><td>1Century</td><td>52560000</td><td>DSS BLOCK SIZE</td></tr>\n</table></pre>\n\n<p></details></p>\n", "annotation": ": dict[str, int]", "default_value": "{&#x27;0&#x27;: 0, &#x27;Irr&#x27;: 0, &#x27;~1Minute&#x27;: 0, &#x27;~2Minutes&#x27;: 2, &#x27;~3Minutes&#x27;: 3, &#x27;~4Minutes&#x27;: 4, &#x27;~5Minutes&#x27;: 5, &#x27;~6Minutes&#x27;: 6, &#x27;~10Minutes&#x27;: 10, &#x27;~12Minutes&#x27;: 12, &#x27;~15Minutes&#x27;: 15, &#x27;~20Minutes&#x27;: 20, &#x27;~30Minutes&#x27;: 30, &#x27;~1Hour&#x27;: 0, &#x27;~2Hours&#x27;: 120, &#x27;~3Hours&#x27;: 180, &#x27;~4Hours&#x27;: 240, &#x27;~6Hours&#x27;: 360, &#x27;~8Hours&#x27;: 480, &#x27;~12Hours&#x27;: 720, &#x27;~1Day&#x27;: 0, &#x27;~2Days&#x27;: 2880, &#x27;~3Days&#x27;: 4320, &#x27;~4Days&#x27;: 5760, &#x27;~5Days&#x27;: 7200, &#x27;~6Days&#x27;: 8640, &#x27;~1Week&#x27;: 0, &#x27;~1Month&#x27;: 0, &#x27;~1Year&#x27;: 0, &#x27;1Minute&#x27;: 1, &#x27;2Minutes&#x27;: 2, &#x27;3Minutes&#x27;: 3, &#x27;4Minutes&#x27;: 4, &#x27;5Minutes&#x27;: 5, &#x27;6Minutes&#x27;: 6, &#x27;10Minutes&#x27;: 10, &#x27;12Minutes&#x27;: 12, &#x27;15Minutes&#x27;: 15, &#x27;20Minutes&#x27;: 20, &#x27;30Minutes&#x27;: 30, &#x27;1Hour&#x27;: 60, &#x27;2Hours&#x27;: 120, &#x27;3Hours&#x27;: 180, &#x27;4Hours&#x27;: 240, &#x27;6Hours&#x27;: 360, &#x27;8Hours&#x27;: 480, &#x27;12Hours&#x27;: 720, &#x27;1Day&#x27;: 1440, &#x27;2Days&#x27;: 2880, &#x27;3Days&#x27;: 4320, &#x27;4Days&#x27;: 5760, &#x27;5Days&#x27;: 7200, &#x27;6Days&#x27;: 8640, &#x27;1Week&#x27;: 10080, &#x27;1Month&#x27;: 43200, &#x27;1Year&#x27;: 525600, &#x27;IR-Day&#x27;: 0, &#x27;IR-Month&#x27;: 0, &#x27;IR-Year&#x27;: 0, &#x27;IR-Decade&#x27;: 0, &#x27;IR-Century&#x27;: 0, &#x27;~2Minute&#x27;: 0, &#x27;~3Minute&#x27;: 0, &#x27;~4Minute&#x27;: 0, &#x27;~5Minute&#x27;: 0, &#x27;~6Minute&#x27;: 0, &#x27;~10Minute&#x27;: 0, &#x27;~12Minute&#x27;: 0, &#x27;~15Minute&#x27;: 0, &#x27;~20Minute&#x27;: 0, &#x27;~30Minute&#x27;: 0, &#x27;~2Hour&#x27;: 0, &#x27;~3Hour&#x27;: 0, &#x27;~4Hour&#x27;: 0, &#x27;~6Hour&#x27;: 0, &#x27;~8Hour&#x27;: 0, &#x27;~12Hour&#x27;: 0, &#x27;~2Day&#x27;: 0, &#x27;~3Day&#x27;: 0, &#x27;~4Day&#x27;: 0, &#x27;~5Day&#x27;: 0, &#x27;~6Day&#x27;: 0, &#x27;2Minute&#x27;: 2, &#x27;3Minute&#x27;: 3, &#x27;4Minute&#x27;: 4, &#x27;5Minute&#x27;: 5, &#x27;6Minute&#x27;: 6, &#x27;10Minute&#x27;: 10, &#x27;12Minute&#x27;: 12, &#x27;15Minute&#x27;: 15, &#x27;20Minute&#x27;: 20, &#x27;30Minute&#x27;: 30, &#x27;2Hour&#x27;: 120, &#x27;3Hour&#x27;: 180, &#x27;4Hour&#x27;: 240, &#x27;6Hour&#x27;: 360, &#x27;8Hour&#x27;: 480, &#x27;12Hour&#x27;: 720, &#x27;2Day&#x27;: 2880, &#x27;3Day&#x27;: 4320, &#x27;4Day&#x27;: 5760, &#x27;5Day&#x27;: 7200, &#x27;6Day&#x27;: 8640, &#x27;Tri-Month&#x27;: 14400, &#x27;Semi-Month&#x27;: 21600, &#x27;1Decade&#x27;: 5256000, &#x27;1Century&#x27;: 52560000}"}, {"fullname": "hec.Interval.context", "modulename": "hec", "qualname": "Interval.context", "kind": "variable", "doc": "<p>The context of this object (\"Cwms\", \"Dss\", or \"DssBlock\")</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.Interval.get_all", "modulename": "hec", "qualname": "Interval.get_all", "kind": "function", "doc": "<p>Retuns list of matched <code>Interval</code> objects in the any context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Optional[Callable[[Interval], bool]]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter. Defaults to None.\nIf None, all <code>Interval</code> objects in all contexts are matched.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[Interval]: A list of matched <code>Interval</code> objects (may be empty)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Interval.get_all_cwms", "modulename": "hec", "qualname": "Interval.get_all_cwms", "kind": "function", "doc": "<p>Retuns list of matched <code>Interval</code> objects in the CWMS context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Optional[Callable[[Interval], bool]]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter. Defaults to None.\nIf None, all <code>Interval</code> objects in the context are matched.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_exception_on_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[Interval]: A list of matched <code>Interval</code> objects (may be empty)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Interval.get_all_cwms_names", "modulename": "hec", "qualname": "Interval.get_all_cwms_names", "kind": "function", "doc": "<p>Retuns list of names of matched <code>Interval</code> objects in the CWMS context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Optional[Callable[[Interval], bool]]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter. Defaults to None.\nIf None, all <code>Interval</code> objects in the context are matched.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_exception_on_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: A list of names of matched <code>Interval</code> objects (may be empty)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Interval.get_all_dss", "modulename": "hec", "qualname": "Interval.get_all_dss", "kind": "function", "doc": "<p>Retuns list of matched <code>Interval</code> objects in the DSS context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Optional[Callable[[Interval], bool]]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter. Defaults to None.\nIf None, all <code>Interval</code> objects in the context are matched.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_exception_on_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[Interval]: A list of matched <code>Interval</code> objects (may be empty)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Interval.get_all_dss_block_names", "modulename": "hec", "qualname": "Interval.get_all_dss_block_names", "kind": "function", "doc": "<p>Retuns list of names of matched <code>Interval</code> objects in the DSS block size context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Optional[Callable[[Interval], bool]]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter. Defaults to None.\nIf None, all <code>Interval</code> objects in the context are matched.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_exception_on_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: A list of names of matched <code>Interval</code> objects (may be empty)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Interval.get_all_dss_blocks", "modulename": "hec", "qualname": "Interval.get_all_dss_blocks", "kind": "function", "doc": "<p>Retuns list of matched <code>Interval</code> objects in the DSS block size context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Optional[Callable[[Interval], bool]]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter. Defaults to None.\nIf None, all <code>Interval</code> objects in the context are matched.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_exception_on_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[Interval]: A list of matched <code>Interval</code> objects (may be empty)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Interval.get_all_dss_names", "modulename": "hec", "qualname": "Interval.get_all_dss_names", "kind": "function", "doc": "<p>Retuns list of names of matched <code>Interval</code> objects in the DSS context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Optional[Callable[[Interval], bool]]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter. Defaults to None.\nIf None, all <code>Interval</code> objects in the context are matched.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_exception_on_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: A list of names of matched <code>Interval</code> objects (may be empty)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Interval.get_all_names", "modulename": "hec", "qualname": "Interval.get_all_names", "kind": "function", "doc": "<p>Retuns list of names of matched <code>Interval</code> objects in the any context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Optional[Callable[[Interval], bool]]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter. Defaults to None.\nIf None, all <code>Interval</code> objects in all contexts are matched.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: A list of names of matched <code>Interval</code> objects (may be empty)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Interval.get_any", "modulename": "hec", "qualname": "Interval.get_any", "kind": "function", "doc": "<p>Retuns a matched <code>Interval</code> object in any context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Callable[[Interval], bool]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_exception_on_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[Interval]: A matched <code>Interval</code> object or None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Interval.get_any_cwms", "modulename": "hec", "qualname": "Interval.get_any_cwms", "kind": "function", "doc": "<p>Retuns a matched <code>Interval</code> object in the CWMS context, or None if there is no such object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Callable[[Interval], bool]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_exception_no_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[Interval]: A matched <code>Interval</code> object or None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Interval.get_any_cwms_name", "modulename": "hec", "qualname": "Interval.get_any_cwms_name", "kind": "function", "doc": "<p>Retuns the name of a matched <code>Interval</code> object in the CWMS context, or None if there is no such object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Callable[[Interval], bool]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_exception_on_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[str]: The name of a matched <code>Interval</code> object or None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Interval.get_any_dss", "modulename": "hec", "qualname": "Interval.get_any_dss", "kind": "function", "doc": "<p>Retuns a matched <code>Interval</code> object in the DSS context, or None if there is no such object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Callable[[Interval], bool]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_exception_on_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[Interval]: A matched <code>Interval</code> object or None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Interval.get_any_dss_block", "modulename": "hec", "qualname": "Interval.get_any_dss_block", "kind": "function", "doc": "<p>Retuns a matched <code>Interval</code> object in the DSS block size context, or None if there is no such object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Callable[[Interval], bool]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_exception_on_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[Interval]: A matched <code>Interval</code> object or None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Interval.get_any_dss_block_name", "modulename": "hec", "qualname": "Interval.get_any_dss_block_name", "kind": "function", "doc": "<p>Retuns the name of a matched <code>Interval</code> object in the DSS block size context, or None if there is no such object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Callable[[Interval], bool]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_exception_on_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[str]: The name of a matched <code>Interval</code> object or None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Interval.get_any_dss_name", "modulename": "hec", "qualname": "Interval.get_any_dss_name", "kind": "function", "doc": "<p>Retuns the name of a matched <code>Interval</code> object in the DSS context, or None if there is no such object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Callable[[Interval], bool]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_exception_on_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[str]: The name of a matched <code>Interval</code> object or None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Interval.get_any_name", "modulename": "hec", "qualname": "Interval.get_any_name", "kind": "function", "doc": "<p>Retuns the name of a matched <code>Interval</code> object in the any context, or None if there is no such object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Callable[[Interval], bool]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_excpetion_on_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[str]: The name of a matched <code>Interval</code> object or None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Interval.get_cwms", "modulename": "hec", "qualname": "Interval.get_cwms", "kind": "function", "doc": "<p>Returns a CWMS interval with the specified name or minutes</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>key (Union[str, int]):</strong>  The name or (actual or characteristic) minutes of the interval to retrieve.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>IntervalException:</strong>  if no CWMS interval exists with the specified key</li>\n<li><strong>TypeError:</strong>  If the key is not a string or integer</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Interval: The CWMS interval</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Interval.get_datetime_index", "modulename": "hec", "qualname": "Interval.get_datetime_index", "kind": "function", "doc": "<p>Generates a pandas DatetimeIndex from this interval.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>start_time (Any):</strong>  A time in the first interval. If <code>offset</code> is None, this will be the first time, otherwise the first time will be the top of the interval\ncontaining this time plus the specified <code>offset</code>. If the time includes no time zone, it will be assumed to be in <code>time_zone</code>, if specified, if any.\nMust be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or an object suitable for the <a href=\"hectime.html#HecTime.__init__\"><code>HecTime</code> constructor</a></li>\n<li><strong>end_time (Optional[Any]):</strong>  The generated series will end on or before this time, if specified. If the time includes no time zone, it will be assumed to be in <code>time_zone</code>, if specified.\nIf specified, must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or an object suitable for the <a href=\"hectime.html#HecTime.__init__\"><code>HecTime</code> constructor</a>. Either <code>end_time</code> or\n<code>count</code>, but not both, must be specified. Defaults to None.</li>\n<li><strong>count (Optional[int]):</strong>  The number of times in the index. Either <code>end_time</code> or <code>count</code>, but not both, must be specified. Defaults to None.</li>\n<li><strong>offset (Optional[Any]):</strong>  The offset of each time into the interval. If None, the offset is determined from <code>start_time</code>. If specified, must be an\n<a href=\"timespan.html#TimeSpan\"><code>TimeSpan</code></a> object or an object suitable for the <a href=\"timespan.html#TimeSpan.__init__\"><code>TimeSpan</code> constructor</a>. Defaults to None.</li>\n<li><strong>time_zone (Optional[Any]):</strong>  The time zone of the generated times. Must be specified if the interval is a local-regular interval. Defaults to None.</li>\n<li><strong>name (Optional[str]):</strong>  The name of the index. If the generated index is to be used in a <a href=\"timeseries.html#TimeSeries\"><code>TimeSeries</code></a> object, specify the name as \"name\". Defaults to None.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>IntervalException:</strong>  If invalid parameters are specified</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pd.DatetimeIndex: The generated index.</p>\n</blockquote>\n\n<h6 id=\"notes\">Notes:</h6>\n\n<blockquote>\n  <p>There is a somewhat subtle interplay between <code>start_time</code> and <code>offset</code>. If <code>offset</code> is None or not specified, the index is generated as follows:</p>\n  \n  <p><ul>\n<li>The offset used is the offset of <code>start_time</code> into the Interval object being used</li>\n<li>The offset handles end-of-month dates and leap years by adjusting the actual offset at each time to keep dates as aligned as possible</li>\n</ul></p>\n  \n  <p>Otherwise the offset is used literally.<br>\n  See the following examples:</p>\n</blockquote>\n\n<table style=\"font-size: 14px;\">\n<pre>\n<tr><th colspan=\"5\">Index on 1Month interval<br>Values in <span style=\"color: red;\">red</span> exceed the end of the month</th><tr>\n<tr><th>start_time</th><th colspan=\"2\">\"2025&#8209;01&#8209;31 08:00:00\"</th><th colspan=\"2\">\"2025&#8209;01&#8209;01 00:00:00\"</th></tr>\n<tr><th>offset</th><th>None</th><th colspan=\"2\">TimeSpan(\"P30DT8H\")</th><th>timedelta(<br>&nbsp;&nbsp;days=30,<br>&nbsp;&nbsp;hours=8,<br>)</th></tr>\n<tr><th rowspan=\"13\">index</th>\n<tr><td>2025&#8209;01&#8209;31&nbsp;08:00:00</td><td>2025&#8209;01&#8209;31&nbsp;08:00:00</td><td>2025&#8209;01&#8209;31&nbsp;08:00:00</td><td>2025&#8209;01&#8209;31&nbsp;08:00:00</td></tr>\n<tr><td>2025&#8209;02&#8209;28&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;03&#8209;03&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;03&#8209;03&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;03&#8209;03&nbsp;08:00:00</td></tr>\n<tr><td>2025&#8209;03&#8209;31&nbsp;08:00:00</td><td>2025&#8209;03&#8209;31&nbsp;08:00:00</td><td>2025&#8209;03&#8209;31&nbsp;08:00:00</td><td>2025&#8209;03&#8209;31&nbsp;08:00:00</td></tr>\n<tr><td>2025&#8209;04&#8209;30&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;05&#8209;01&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;05&#8209;01&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;05&#8209;01&nbsp;08:00:00</td></tr>\n<tr><td>2025&#8209;05&#8209;31&nbsp;08:00:00</td><td>2025&#8209;05&#8209;31&nbsp;08:00:00</td><td>2025&#8209;05&#8209;31&nbsp;08:00:00</td><td>2025&#8209;05&#8209;31&nbsp;08:00:00</td></tr>\n<tr><td>2025&#8209;06&#8209;30&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;07&#8209;01&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;07&#8209;01&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;07&#8209;01&nbsp;08:00:00</td></tr>\n<tr><td>2025&#8209;07&#8209;31&nbsp;08:00:00</td><td>2025&#8209;07&#8209;31&nbsp;08:00:00</td><td>2025&#8209;07&#8209;31&nbsp;08:00:00</td><td>2025&#8209;07&#8209;31&nbsp;08:00:00</td></tr>\n<tr><td>2025&#8209;08&#8209;31&nbsp;08:00:00</td><td>2025&#8209;08&#8209;31&nbsp;08:00:00</td><td>2025&#8209;08&#8209;31&nbsp;08:00:00</td><td>2025&#8209;08&#8209;31&nbsp;08:00:00</td></tr>\n<tr><td>2025&#8209;09&#8209;30&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;10&#8209;01&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;10&#8209;01&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;10&#8209;01&nbsp;08:00:00</td></tr>\n<tr><td>2025&#8209;10&#8209;31&nbsp;08:00:00</td><td>2025&#8209;10&#8209;31&nbsp;08:00:00</td><td>2025&#8209;10&#8209;31&nbsp;08:00:00</td><td>2025&#8209;10&#8209;31&nbsp;08:00:00</td></tr>\n<tr><td>2025&#8209;11&#8209;30&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;12&#8209;01&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;12&#8209;01&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;12&#8209;01&nbsp;08:00:00</td></tr>\n<tr><td>2025&#8209;12&#8209;31&nbsp;08:00:00</td><td>2025&#8209;12&#8209;31&nbsp;08:00:00</td><td>2025&#8209;12&#8209;31&nbsp;08:00:00</td><td>2025&#8209;12&#8209;31&nbsp;08:00:00</td></tr>\n</pre>\n</table>\n\n<table style=\"font-size: 14px;\">\n<pre>\n<tr><th colspan=\"5\">Index on 1Year interval<br>Values in <span style=\"color: red;\">red</span> don't match the starting day-of-month</th><tr>\n<tr><th>start_time</th><th colspan=\"2\">\"2025&#8209;05&#8209;11 00:00:00\"</th><th colspan=\"2\">\"2025&#8209;01&#8209;01 00:00:00\"</th></tr>\n<tr><th>offset</th><th>None</th><th colspan=\"2\">TimeSpan(\"P1M10D\")</th><th>timedelta(<br>&nbsp;&nbsp;days=130,<br>)</th></tr>\n<tr><th rowspan=\"13\">index</th>\n<tr><td>2025&#8209;05&#8209;11&nbsp;00:00:00</td><td>2025&#8209;05&#8209;11&nbsp;00:00:00</td><td>2025&#8209;05&#8209;11&nbsp;00:00:00</td><td>2025&#8209;05&#8209;11&nbsp;00:00:00</td></tr>\n<tr><td>2026&#8209;05&#8209;11&nbsp;00:00:00</td><td>2026&#8209;05&#8209;11&nbsp;00:00:00</td><td>2026&#8209;05&#8209;11&nbsp;00:00:00</td><td>2026&#8209;05&#8209;11&nbsp;00:00:00</td></tr>\n<tr><td>2027&#8209;05&#8209;11&nbsp;00:00:00</td><td>2027&#8209;05&#8209;11&nbsp;00:00:00</td><td>2027&#8209;05&#8209;11&nbsp;00:00:00</td><td>2027&#8209;05&#8209;11&nbsp;00:00:00</td></tr>\n<tr><td>2028&#8209;05&#8209;11&nbsp;00:00:00</td><td>2028&#8209;05&#8209;11&nbsp;00:00:00</td><td>2028&#8209;05&#8209;11&nbsp;00:00:00</td><td style=\"color: red;\">2028&#8209;05&#8209;10&nbsp;00:00:00</td></tr>\n<tr><td>2029&#8209;05&#8209;11&nbsp;00:00:00</td><td>2029&#8209;05&#8209;11&nbsp;00:00:00</td><td>2029&#8209;05&#8209;11&nbsp;00:00:00</td><td>2029&#8209;05&#8209;11&nbsp;00:00:00</td></tr>\n<tr><td>2030&#8209;05&#8209;11&nbsp;00:00:00</td><td>2030&#8209;05&#8209;11&nbsp;00:00:00</td><td>2030&#8209;05&#8209;11&nbsp;00:00:00</td><td>2030&#8209;05&#8209;11&nbsp;00:00:00</td></tr>\n<tr><td>2031&#8209;05&#8209;11&nbsp;00:00:00</td><td>2031&#8209;05&#8209;11&nbsp;00:00:00</td><td>2031&#8209;05&#8209;11&nbsp;00:00:00</td><td>2031&#8209;05&#8209;11&nbsp;00:00:00</td></tr>\n<tr><td>2032&#8209;05&#8209;11&nbsp;00:00:00</td><td>2032&#8209;05&#8209;11&nbsp;00:00:00</td><td>2032&#8209;05&#8209;11&nbsp;00:00:00</td><td style=\"color: red;\">2032&#8209;05&#8209;10&nbsp;00:00:00</td></tr>\n<tr><td>2033&#8209;05&#8209;11&nbsp;00:00:00</td><td>2033&#8209;05&#8209;11&nbsp;00:00:00</td><td>2033&#8209;05&#8209;11&nbsp;00:00:00</td><td>2033&#8209;05&#8209;11&nbsp;00:00:00</td></tr>\n<tr><td>2034&#8209;05&#8209;11&nbsp;00:00:00</td><td>2034&#8209;05&#8209;11&nbsp;00:00:00</td><td>2034&#8209;05&#8209;11&nbsp;00:00:00</td><td>2034&#8209;05&#8209;11&nbsp;00:00:00</td></tr>\n<tr><td>2035&#8209;05&#8209;11&nbsp;00:00:00</td><td>2035&#8209;05&#8209;11&nbsp;00:00:00</td><td>2035&#8209;05&#8209;11&nbsp;00:00:00</td><td>2035&#8209;05&#8209;11&nbsp;00:00:00</td></tr>\n<tr><td>2036&#8209;05&#8209;11&nbsp;00:00:00</td><td>2036&#8209;05&#8209;11&nbsp;00:00:00</td><td>2036&#8209;05&#8209;11&nbsp;00:00:00</td><td style=\"color: red;\">2036&#8209;05&#8209;10&nbsp;00:00:00</td></tr>\n</pre>\n</table>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">start_time</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">end_time</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">count</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">indexes</span><span class=\"o\">.</span><span class=\"n\">datetimes</span><span class=\"o\">.</span><span class=\"n\">DatetimeIndex</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Interval.get_default_exception_on_not_found", "modulename": "hec", "qualname": "Interval.get_default_exception_on_not_found", "kind": "function", "doc": "<p>Retrieves the default behavior if any of the get... methods do not find an Interval object to return.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the default behavior is to raise an exception when no Interval is found or False\n      if None is returned when no Interval is found</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Interval.get_dss", "modulename": "hec", "qualname": "Interval.get_dss", "kind": "function", "doc": "<p>Returns an HEC-DSS interval with the specified name or minutes</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>key (Union[str, int]):</strong>  The name or (actual or characteristic) minutes of the interval to retrieve.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>IntervalException:</strong>  if no Dss interval exists with the specified key</li>\n<li><strong>TypeError:</strong>  If the key is not a string or integer</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Interval: The Dss interval</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Interval.get_dss_block_for_interval", "modulename": "hec", "qualname": "Interval.get_dss_block_for_interval", "kind": "function", "doc": "<p>Returns the HEC-DSS block size for a specified interval.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>interval (Union[str, int, &quot;Interval&quot;]):</strong>  The interval to return the block size for. May be an Interval object,\nor its name or (actual or characteristic) minutes.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Interval: An interval object representing the HEC-DSS block size</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Interval.is_any_irregular", "modulename": "hec", "qualname": "Interval.is_any_irregular", "kind": "variable", "doc": "<p>Whether this object represents a normal irregular or pseudo-regular interval</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.Interval.is_any_regular", "modulename": "hec", "qualname": "Interval.is_any_regular", "kind": "variable", "doc": "<p>Whether this object represents a regular or local regular interval</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.Interval.is_local_regular", "modulename": "hec", "qualname": "Interval.is_local_regular", "kind": "variable", "doc": "<p>Whether this object represents a local regular interval</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.Interval.is_pseudo_regular", "modulename": "hec", "qualname": "Interval.is_pseudo_regular", "kind": "variable", "doc": "<p>Whether this object represents a pseudo-regular interval</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.Interval.is_regular", "modulename": "hec", "qualname": "Interval.is_regular", "kind": "variable", "doc": "<p>Whether this object represents a normal regular interval</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.Interval.is_irregular", "modulename": "hec", "qualname": "Interval.is_irregular", "kind": "variable", "doc": "<p>Whether this object represents a normal irregular interval</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.Interval.minutes", "modulename": "hec", "qualname": "Interval.minutes", "kind": "variable", "doc": "<p>The minutes (actual or characteristic) of this object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.Interval.name", "modulename": "hec", "qualname": "Interval.name", "kind": "variable", "doc": "<p>The name of this object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.Interval.set_default_exception_on_not_found", "modulename": "hec", "qualname": "Interval.set_default_exception_on_not_found", "kind": "function", "doc": "<p>Sets the default behavior if any of the get... methods do not find an Interval object to return.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (bool):</strong>  Whether to raise an exception if no Interval is found (True) or return None (False)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.IntervalException", "modulename": "hec", "qualname": "IntervalException", "kind": "class", "doc": "<p>Exception specific to Interval operations</p>\n", "bases": "hec.timespan.TimeSpanException"}, {"fullname": "hec.Location", "modulename": "hec", "qualname": "Location", "kind": "class", "doc": "<p>Holds information about locations</p>\n"}, {"fullname": "hec.Location.__init__", "modulename": "hec", "qualname": "Location.__init__", "kind": "function", "doc": "<p>Initializes a Location object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The location name</li>\n<li><strong>office (Optional[str]):</strong>  The office that owns the location, if applicable. Defaults to None.</li>\n<li><strong>latitude (Optional[float]):</strong>  The latitude of the location. Defaults to None.</li>\n<li><strong>longitude (Optional[float]):</strong>  The longitude of the location. Defaults to None.</li>\n<li><strong>horizontal_datum (Optional[str]):</strong>  The horizontal datum of the specified lat/lon. Defaults to None.</li>\n<li><strong>elevation (Optional[float]):</strong>  The elevation of the location. Defaults to None.</li>\n<li><strong>elevation_unit (Optional[str]):</strong>  The unit of elevation of the location. Defaults to None.</li>\n<li><strong>vertical_datum (Optional[str]):</strong>  The native vertical datum of the specified elevation. Defaults to None.</li>\n<li><strong>vertical_datum_info (Optional[Union[str, dict[str,Any]]]):</strong>  The vertical datum info for the location. Overrides <code>elevation</code>, <code>elevation_unit</code>, and <code>vertical_datum</code> parameters, if also specified. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">office</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">latitude</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">longitude</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">horizontal_datum</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">elevation</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">elevation_unit</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">vertical_datum</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kind</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">vertical_datum_info</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "hec.Location.basename", "modulename": "hec", "qualname": "Location.basename", "kind": "variable", "doc": "<p>The name of the location up to any initial '-' character</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.Location.elevation", "modulename": "hec", "qualname": "Location.elevation", "kind": "variable", "doc": "<p>The elevation of the location</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[hec.unit.UnitQuantity]"}, {"fullname": "hec.Location.horizontal_datum", "modulename": "hec", "qualname": "Location.horizontal_datum", "kind": "variable", "doc": "<p>The horizontal datum of the location's latitude/longitude</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.Location.kind", "modulename": "hec", "qualname": "Location.kind", "kind": "variable", "doc": "<p>The kind of the location</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.Location.latitude", "modulename": "hec", "qualname": "Location.latitude", "kind": "variable", "doc": "<p>The latitude of the location</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[float]"}, {"fullname": "hec.Location.longitude", "modulename": "hec", "qualname": "Location.longitude", "kind": "variable", "doc": "<p>The longitude of the location</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[float]"}, {"fullname": "hec.Location.name", "modulename": "hec", "qualname": "Location.name", "kind": "variable", "doc": "<p>The full name of the location</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.Location.office", "modulename": "hec", "qualname": "Location.office", "kind": "variable", "doc": "<p>The office that owns the location</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.Location.subname", "modulename": "hec", "qualname": "Location.subname", "kind": "variable", "doc": "<p>The name of the location after any initial '-' character</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.Location.time_zone", "modulename": "hec", "qualname": "Location.time_zone", "kind": "variable", "doc": "<p>The time zone of the location</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.Location.vertical_datum", "modulename": "hec", "qualname": "Location.vertical_datum", "kind": "variable", "doc": "<p>The native vertical datum of the location's elevation</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.Location.vertical_datum_info", "modulename": "hec", "qualname": "Location.vertical_datum_info", "kind": "variable", "doc": "<p>The vertical datum information for the location.\n    * The getter returns a _VerticalDatumInfo object.\n    * The setter accepts _VerticalDatumInfo objects</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[hec.parameter.ElevParameter._VerticalDatumInfo]"}, {"fullname": "hec.Location.vertical_datum_json", "modulename": "hec", "qualname": "Location.vertical_datum_json", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.Location.vertical_datum_xml", "modulename": "hec", "qualname": "Location.vertical_datum_xml", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.LocationException", "modulename": "hec", "qualname": "LocationException", "kind": "class", "doc": "<p>Exception specific to Location operations</p>\n", "bases": "builtins.Exception"}, {"fullname": "hec.Parameter", "modulename": "hec", "qualname": "Parameter", "kind": "class", "doc": "<p>Holds info (name and unit) for a parameter.</p>\n\n<p>See <a href=\"parameter.html#base_parameter_definitions\">base_parameter_definitions</a> for information on base parameters and their conversions.</p>\n"}, {"fullname": "hec.Parameter.__init__", "modulename": "hec", "qualname": "Parameter.__init__", "kind": "function", "doc": "<p>Initializer</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The full parmeter name</li>\n<li><strong>unit_or_system (Optional[str]):</strong> <br>\n<ul>\n<li>If <code>EN</code> or <code>None</code>, the default English unit for the base parameter will be assigned</li>\n<li>if <code>SI</code>,  the default Syst\u00e8me International unit for the base parameter will be assigned</li>\n<li>Otherwise the specified unit will be assigned</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ParameterException:</strong>  If the parameter name does not contain a valid base parameter name,\nor if the specified unit is not valid for the parameter</li>\n<li><strong>KeyError:</strong>  If the specified unit is not a valid unit name, alias or Pint unit definition</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">unit_or_system</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "hec.Parameter.accumulatable_base_parameters", "modulename": "hec", "qualname": "Parameter.accumulatable_base_parameters", "kind": "function", "doc": "<p>Returns a list of base parameter names that can be accumulated over time for the specified context</p>\n\n<p>See <a href=\"parameter.html#base_parameter_definitions\">base_parameter_definitions</a> for information on base parameters and their conversions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context (str):</strong>  The context for the base parameter names. Currently only \"CWMS\" is supported. Defaults to \"CWMS\"</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ParameterException:</strong>  If an invalid context is specified</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: A sorted list of names of base parameter that can be integrated over time for the context</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;CWMS&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Parameter.base_parameter", "modulename": "hec", "qualname": "Parameter.base_parameter", "kind": "variable", "doc": "<p>The actual base parameter used. Will be same as <code>basename</code> unless the\nparameter was created using a parameter alias</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.Parameter.base_parameters", "modulename": "hec", "qualname": "Parameter.base_parameters", "kind": "function", "doc": "<p>Returns a list of valid base parameter names for the specified context</p>\n\n<p>See <a href=\"parameter.html#base_parameter_definitions\">base_parameter_definitions</a> for information on base parameters and their conversions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context (str):</strong>  The context for the base parameter names. Currently only \"CWMS\" is supported. Defaults to \"CWMS\"</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ParameterException:</strong>  If an invalid context is specified</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: A sorted list of valid base parameter names for the context</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;CWMS&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Parameter.basename", "modulename": "hec", "qualname": "Parameter.basename", "kind": "variable", "doc": "<p>The name of the parameter as specified up to any initial '-' character</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.Parameter.differentiable_base_parameters", "modulename": "hec", "qualname": "Parameter.differentiable_base_parameters", "kind": "function", "doc": "<p>Returns a list of base parameter names that can be differentiated with respect to time for the specified context</p>\n\n<p>See <a href=\"parameter.html#base_parameter_definitions\">base_parameter_definitions</a> for information on base parameters and their conversions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context (str):</strong>  The context for the base parameter names. Currently only \"CWMS\" is supported. Defaults to \"CWMS\"</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ParameterException:</strong>  If an invalid context is specified</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: A sorted list of names of base parameter that can be differentiated with respect to time for the context</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;CWMS&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Parameter.differentiation_info", "modulename": "hec", "qualname": "Parameter.differentiation_info", "kind": "function", "doc": "<p>Returns differentiation information for a base parameter name</p>\n\n<p>See <a href=\"parameter.html#base_parameter_definitions\">base_parameter_definitions</a> for information on base parameters and their conversions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>base_parameter (str):</strong>  The base parameter to get the information for.</li>\n<li><strong>context (str):</strong>  The context for the base parameter names. Currently only \"CWMS\" is supported. Defaults to \"CWMS\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: A dictionary with the following content:\n  {\n      \"base_parameter\": <base_parameter_name of differentiated time series>,\n      \"EN\" : <floating point factor for converting original parameter unit/second to the differentiated parameter unit>,\n      \"SI\" : <floating point factor for convertiig original parameter unit/second to the differentiated parameter unit>,\n  }</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">base_parameter</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;CWMS&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Parameter.get_compatible_units", "modulename": "hec", "qualname": "Parameter.get_compatible_units", "kind": "function", "doc": "<p>Returns the list of unit names compatible with this parameter's unit</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: The list of compatible unit names</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Parameter.integrable_base_parameters", "modulename": "hec", "qualname": "Parameter.integrable_base_parameters", "kind": "function", "doc": "<p>Returns a list of base parameter names that can be integrated over time for the specified context</p>\n\n<p>See <a href=\"parameter.html#base_parameter_definitions\">base_parameter_definitions</a> for information on base parameters and their conversions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context (str):</strong>  The context for the base parameter names. Currently only \"CWMS\" is supported. Defaults to \"CWMS\"</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ParameterException:</strong>  If an invalid context is specified</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: A sorted list of names of base parameter that can be integrated over time for the context</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;CWMS&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Parameter.ito", "modulename": "hec", "qualname": "Parameter.ito", "kind": "function", "doc": "<p>Assigns a unit to this parameter.</p>\n\n<p>Identical to calling <a href=\"#Parameter.to\">.to(unit_or_system, in_place=True)</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit_or_system (str):</strong> <br>\n<ul>\n<li>If <code>EN</code>, the default English unit for the base parameter will be assigned</li>\n<li>if <code>SI</code>,  the default Syst\u00e8me International unit for the base parameter will be assigned</li>\n<li>Otherwise the specified unit will be assigned</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ParameterException:</strong>  If the specified unit is not valid for the parameter</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Parameter: The converted object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">unit_or_system</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">Parameter</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Parameter.name", "modulename": "hec", "qualname": "Parameter.name", "kind": "variable", "doc": "<p>The full name of the parameter as specified</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.Parameter.subname", "modulename": "hec", "qualname": "Parameter.subname", "kind": "variable", "doc": "<p>The name of the parameter as specified after any initial '-' character</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.Parameter.to", "modulename": "hec", "qualname": "Parameter.to", "kind": "function", "doc": "<p>Assigns a unit to this parameter or a copy of this parameter</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit_or_system (str):</strong> <br>\n<ul>\n<li>If <code>EN</code>, the default English unit for the base parameter will be assigned</li>\n<li>if <code>SI</code>,  the default Syst\u00e8me International unit for the base parameter will be assigned</li>\n<li>Otherwise the specified unit will be assigned</li>\n</ul></li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to modify and return this object (True)\nor a copy of this object (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ParameterException:</strong>  If the specified unit is not valid for the parameter</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Parameter: The converted object (self if in_place == True, otherwise a converted copy)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">unit_or_system</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">Parameter</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Parameter.unit", "modulename": "hec", "qualname": "Parameter.unit", "kind": "variable", "doc": "<p>The unit assigned to the parameter</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": pint.registry.Unit"}, {"fullname": "hec.Parameter.unit_name", "modulename": "hec", "qualname": "Parameter.unit_name", "kind": "variable", "doc": "<p>The unit name assigned to the parameter</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.ParameterException", "modulename": "hec", "qualname": "ParameterException", "kind": "class", "doc": "<p>Exception specific to Parameter operations</p>\n", "bases": "builtins.Exception"}, {"fullname": "hec.ParameterType", "modulename": "hec", "qualname": "ParameterType", "kind": "class", "doc": "<p>Holds info about parameter types.</p>\n\n<p>Parameter types have 3 separate contexts, RAW, CWMS, and DSS. There's not much use for the RAW context\nexcept for providing a bridge between the CWMS and DSS contexts. Users would normally work in either\nthe CWMS or DSS context.</p>\n\n<p>The contexts of already-instantiated objects can also be set.</p>\n\n<p>Parameter type names in the different contexts are:</p>\n\n<table>\n<tr><th>RAW</th><th>CWMS</th><th>DSS</th></tr>\n<tr><td>Total</td><td>Total</td><td>PER-CUM</td></tr>\n<tr><td>Maximum</td><td>Max</td><td>PER-MAX</td></tr>\n<tr><td>Minimum</td><td>Min</td><td>PER-MIN</td></tr>\n<tr><td>Constant</td><td>Const</td><td>CONST</td></tr>\n<tr><td>Average</td><td>Ave</td><td>PER-AVER</td></tr>\n<tr><td rowspan=\"2\">Instantaneous</td><td rowspan=\"2\">Inst</td><td>INST-CUM (for Precip or Count)</td></tr><tr><td>INST-VAL (for others)</td></tr>\n</table>\n"}, {"fullname": "hec.ParameterType.__init__", "modulename": "hec", "qualname": "ParameterType.__init__", "kind": "function", "doc": "<p>Initializes a ParameterType object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>param_type (str):</strong>  The name of the parameter type</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ParameterTypeException:</strong>  If <code>param_type</code> is not one of the values listed in the table above (context-insensitive)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">param_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "hec.ParameterType.context", "modulename": "hec", "qualname": "ParameterType.context", "kind": "variable", "doc": "<p>The context of this object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.ParameterType.get_cwms_name", "modulename": "hec", "qualname": "ParameterType.get_cwms_name", "kind": "function", "doc": "<p>Returns the name of the parameter time for the CWMS context</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The CWMS context name</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.ParameterType.get_dss_name", "modulename": "hec", "qualname": "ParameterType.get_dss_name", "kind": "function", "doc": "<p>Returns the name of the parameter time for the DSS context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>is_precip (bool, optional):</strong>  Whether the parameter type is for a precipitation parameter.\nThis matters only for the <code>Instantaneous</code> parameter type (CWMS=<code>Inst</code>). Defaults to False.\n<ul>\n<li><code>False</code>: <code>INST-CUM</code></li>\n<li><code>True</code> : <code>INST-VAL</code></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The DSS context name</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">is_precip</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.ParameterType.get_raw_name", "modulename": "hec", "qualname": "ParameterType.get_raw_name", "kind": "function", "doc": "<p>Returns the name of the parameter time for the RAW context</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The RAW context name</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.ParameterType.name", "modulename": "hec", "qualname": "ParameterType.name", "kind": "variable", "doc": "<p>The context-specific name of the object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.ParameterType.parameter_type_names", "modulename": "hec", "qualname": "ParameterType.parameter_type_names", "kind": "function", "doc": "<p>Returns a list of valid parameter type names for the context.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context (str):</strong>  The context for the parameter type names. Currently only \"RAW\", \"CWMS\", \"DSS\", and \"ALL\" are supported.</li>\n<li>If \"RAW\", the parameter types for all contexts are returned</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ParameterTypeException:</strong>  If an invlid context is specified</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: A sorted list of valid parameter type names for the context</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.ParameterType.set_context", "modulename": "hec", "qualname": "ParameterType.set_context", "kind": "function", "doc": "<p>Sets the context for this object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context (str):</strong>  The context - must be one of RAW, CWMS, or DSS</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ParameterTypeException:</strong>  If the specified context isn't one of the valid values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.ParameterType.set_default_context", "modulename": "hec", "qualname": "ParameterType.set_default_context", "kind": "function", "doc": "<p>Sets the default context for new ParameterType objects</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context (str):</strong>  The default context (RAW, CWMS, or DSS)</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ParameterTypeException:</strong>  If an invalid context is specified</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.ParameterTypeException", "modulename": "hec", "qualname": "ParameterTypeException", "kind": "class", "doc": "<p>Exception specific to ParameterType operations</p>\n", "bases": "builtins.Exception"}, {"fullname": "hec.Quality", "modulename": "hec", "qualname": "Quality", "kind": "class", "doc": "<p>Holds a quality code and provides quality tests and operations</p>\n"}, {"fullname": "hec.Quality.__init__", "modulename": "hec", "qualname": "Quality.__init__", "kind": "function", "doc": "<p>Initializes a Quality object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>init_from (Any, optional):</strong>  The object to initialize from. Defaults to 0.\n<ul>\n<li><strong>Not specified</strong>: the quality code is set to 0</li>\n<li><strong>Integer</strong>: the quality code is set to the integer</li>\n<li><strong>String</strong>: the quality code is set from the unique beginning of one of the following (case insensitive):\n<ul>\n<li>\"Unscreened\": the quality code is 0 (Unscreened)</li>\n<li>\"Unknown\" or \"Indeterminate\": the quality code is 1 (Screened Indeterminate)</li>\n<li>\"Okay\": the quality code is 3 (Screened Okay)</li>\n<li>\"Missing\": the quality code is 5 (Screened Missing)</li>\n<li>\"Questionable\": the quality code is 9 (Screened Questionable)</li>\n<li>\"Rejected\": the quality code is 17 (Screened Rejected)</li>\n</ul></li>\n<li><strong>Quality</strong>: the quality code is set to the other object's quality code</li>\n<li><strong>List or tuple</strong>: the quality code is set from the list of component identifiers.<br>\nThe zero value can be set for any of the component by setting its identifier to <code>None</code>.<br>\nThe sequence must have a mininum length of 8, in this order:\n<ul>\n<li>screened identifier</li>\n<li>validity identifier</li>\n<li>range identifier</li>\n<li>changed identifier</li>\n<li>replacement cause identifier</li>\n<li>replacement method identifier</li>\n<li>test failed identifier (may be multiple identifiers concatenated with <code>+</code> character)</li>\n<li>protected identifier</li>\n</ul></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">init_from</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span>)</span>"}, {"fullname": "hec.Quality.add_test_failed", "modulename": "hec", "qualname": "Quality.add_test_failed", "kind": "function", "doc": "<p>Adds a failed test to the test failed component of this object from a code or identifier and returns the modified object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[int, str]):</strong>  The test failed component code or identifier of the failed test to be added</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Quality: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Quality.changed", "modulename": "hec", "qualname": "Quality.changed", "kind": "variable", "doc": "<p>The changed component code of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.Quality.changed_id", "modulename": "hec", "qualname": "Quality.changed_id", "kind": "variable", "doc": "<p>The changed component identifier of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.Quality.code", "modulename": "hec", "qualname": "Quality.code", "kind": "variable", "doc": "<p>The internal quality code as a signed or unsigned integer depending on the default setting.<br></p>\n\n<p>See</p>\n\n<ul>\n<li><a href=\"#Quality.set_return_signed_codes\">set_return_signed_codes</a></li>\n<li><a href=\"#Quality.set_return_unsigned_codes\">set_return_unsigned_codes</a></li>\n</ul>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.Quality.protection", "modulename": "hec", "qualname": "Quality.protection", "kind": "variable", "doc": "<p>The protection component code of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.Quality.protection_id", "modulename": "hec", "qualname": "Quality.protection_id", "kind": "variable", "doc": "<p>The protection component identifier of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.Quality.range", "modulename": "hec", "qualname": "Quality.range", "kind": "variable", "doc": "<p>The range component code of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.Quality.range_id", "modulename": "hec", "qualname": "Quality.range_id", "kind": "variable", "doc": "<p>The range component identifier of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.Quality.remove_test_failed", "modulename": "hec", "qualname": "Quality.remove_test_failed", "kind": "function", "doc": "<p>Removes a failed test from the test failed component of this object from a code or identifier and returns the modified object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[int, str]):</strong>  The test failed component code or identifier of the failed test to be removed</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Quality: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Quality.repl_cause", "modulename": "hec", "qualname": "Quality.repl_cause", "kind": "variable", "doc": "<p>The replacement cause component code of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.Quality.repl_cause_id", "modulename": "hec", "qualname": "Quality.repl_cause_id", "kind": "variable", "doc": "<p>The replacement cause component identifier of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.Quality.repl_method", "modulename": "hec", "qualname": "Quality.repl_method", "kind": "variable", "doc": "<p>The replacement method component code of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.Quality.repl_method_id", "modulename": "hec", "qualname": "Quality.repl_method_id", "kind": "variable", "doc": "<p>The replacement method component identifier of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.Quality.score", "modulename": "hec", "qualname": "Quality.score", "kind": "variable", "doc": "<p>A score to compare qualities by:</p>\n\n<table>\n<tr><th>Screened</th><th>Validity Code</th><th>Score</th></tr>\n<tr><td>UNSCREENED</td><td>UNKNOWN</td><td>1</td></tr>\n<tr><td>SCREENED</td><td>MISSING</td><td>0</td></tr>\n<tr><td>SCREENED</td><td>REJECTED</td><td>0</td></tr>\n<tr><td>SCREENED</td><td>UNKNOWN</td><td>2</td></tr>\n<tr><td>SCREENED</td><td>QUESTIONABLE</td><td>3</td></tr>\n<tr><td>SCREENED</td><td>OKAY</td><td>4</td></tr>\n</table>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.Quality.screened", "modulename": "hec", "qualname": "Quality.screened", "kind": "variable", "doc": "<p>The screened component code of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.Quality.screened_id", "modulename": "hec", "qualname": "Quality.screened_id", "kind": "variable", "doc": "<p>The screened component identifier of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.Quality.set_changed", "modulename": "hec", "qualname": "Quality.set_changed", "kind": "function", "doc": "<p>Sets the changed component of this object from a code or identifier and returns the modified object.</p>\n\n<p>Using this method instead of setting the <code>changed</code> or <code>changed_id</code> properties allows chained operations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[int, str]):</strong>  The changed component code or identifier</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Quality: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Quality.set_protection", "modulename": "hec", "qualname": "Quality.set_protection", "kind": "function", "doc": "<p>Sets the protection component of this object from a code or identifier and returns the modified object.</p>\n\n<p>Using this method instead of setting the <code>protection</code> or <code>protection_id</code> properties allows chained operations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[int, str]):</strong>  The protection component code or identifier</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Quality: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Quality.set_range", "modulename": "hec", "qualname": "Quality.set_range", "kind": "function", "doc": "<p>Sets the range component of this object from a code or identifier and returns the modified object.</p>\n\n<p>Using this method instead of setting the <code>range</code> or <code>range_id</code> properties allows chained operations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[int, str]):</strong>  The range component code or identifier</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Quality: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Quality.set_repl_cause", "modulename": "hec", "qualname": "Quality.set_repl_cause", "kind": "function", "doc": "<p>Sets the replacement cause component of this object from a code or identifier and returns the modified object.</p>\n\n<p>Using this method instead of setting the <code>repl_cause</code> or <code>repl_cause_id</code> properties allows chained operations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[int, str]):</strong>  The replacement cause component code or identifier</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Quality: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Quality.set_repl_method", "modulename": "hec", "qualname": "Quality.set_repl_method", "kind": "function", "doc": "<p>Sets the replacement method component of this object from a code or identifier and returns the modified object.</p>\n\n<p>Using this method instead of setting the <code>repl_method</code> or <code>repl_method_id</code> properties allows chained operations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[int, str]):</strong>  The replacement method component code or identifier</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Quality: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Quality.set_screened", "modulename": "hec", "qualname": "Quality.set_screened", "kind": "function", "doc": "<p>Sets the screened component of this object from a code or identifier and returns the modified object.</p>\n\n<p>Using this method instead of setting the <code>screened</code> or <code>screened_id</code> properties allows chained operations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[int, str]):</strong>  The screened component code or identifier</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Quality: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Quality.set_test_failed", "modulename": "hec", "qualname": "Quality.set_test_failed", "kind": "function", "doc": "<p>Sets the test failed component of this object from a code or identifier and returns the modified object.</p>\n\n<p>Using this method instead of setting the <code>test_failed</code> or <code>test_failed_id</code> properties allows chained operations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[int, str]):</strong>  The test failed component code or identifier</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Quality: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Quality.set_validity", "modulename": "hec", "qualname": "Quality.set_validity", "kind": "function", "doc": "<p>Sets the validity component of this object from a code or identifier and returns the modified object.</p>\n\n<p>Using this method instead of setting the <code>validity</code> or <code>validity_id</code> properties allows chained operations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[int, str]):</strong>  The validity component code or identifier</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Quality: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Quality.set_return_signed_codes", "modulename": "hec", "qualname": "Quality.set_return_signed_codes", "kind": "function", "doc": "<p>Sets the type (signed or unsigned of the <code>code</code> property)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (bool, optional):</strong>  Sets default type to signed if true, otherwise unsigned. Defaults to True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Quality.set_return_unsigned_codes", "modulename": "hec", "qualname": "Quality.set_return_unsigned_codes", "kind": "function", "doc": "<p>Sets the type (signed or unsigned of the <code>code</code> property)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (bool, optional):</strong>  Sets default type to unsigned if true, otherwise signed. Defaults to True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.Quality.signed", "modulename": "hec", "qualname": "Quality.signed", "kind": "variable", "doc": "<p>The internal quality code as a signed integer.</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.Quality.symbol", "modulename": "hec", "qualname": "Quality.symbol", "kind": "variable", "doc": "<p>The text symbol of the quality.</p>\n\n<p>The symbol will be one or two characters, with the first character being:</p>\n\n<ul>\n<li><code>~</code>: Not screened</li>\n<li><code>u</code> or 'U': Screened, validity is unknown</li>\n<li><code>o</code> or <code>O</code>: Screened, validity is okay</li>\n<li><code>m</code> or <code>M</code>: Screened, validity is missing</li>\n<li><code>q</code> or <code>Q</code>: Screened, validity is questioned</li>\n<li><code>r</code> or <code>R</code>: Screened, validity is rejected</li>\n</ul>\n\n<p>If a screened quality has the protection bit set, the first chanacter will be uppercase; if not, it will be lowercase.</p>\n\n<p>A second character of <code>+</code> signifies that the quality has additional information about one or more of the following:</p>\n\n<ul>\n<li>value range</li>\n<li>value replacement cause and method</li>\n<li>test(s) failed</li>\n</ul>\n\n<p>This property is used when the quality is used in a string context (e.g., <code>print(q)</code>)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.Quality.test_failed", "modulename": "hec", "qualname": "Quality.test_failed", "kind": "variable", "doc": "<p>The test failed component code of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.Quality.test_failed_id", "modulename": "hec", "qualname": "Quality.test_failed_id", "kind": "variable", "doc": "<p>The test failed component identifier of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.Quality.text", "modulename": "hec", "qualname": "Quality.text", "kind": "variable", "doc": "<p>The text description of the quality.</p>\n\n<p>A space separated list of words specifying the state of the following, in order:</p>\n\n<ul>\n<li>Screened: (\"Unscreened\" or \"Screened\")</li>\n<li>Validity: (\"Unknown\", \"Okay\", \"Missing\", \"Questionable\", or \"Rejected\")</li>\n<li>Range: (\"No_range\", \"Range_1\", \"Range_2\", or \"Range_3\")</li>\n<li>Changed: (\"Original\" or \"Modified\")</li>\n<li>Replacement Cause: (\"None\", \"Automatic\", \"Interactive\", \"Manual\", \"Restored\")</li>\n<li>Replacement Method: (\"None\", \"Lin_Interp\", \"Explicit\", \"Missing\", \"Graphical\")</li>\n<li>Test Failed: (\"None\" or one or more of the following concatenated with \"+\"):\n<ul>\n<li>\"Absolute_Value\"</li>\n<li>\"Constant_Value\"</li>\n<li>\"Rate_Of_Change\"</li>\n<li>\"Relative_Value\"</li>\n<li>\"Duration_Value\"</li>\n<li>\"Neg_Increment\"</li>\n<li>\"Skip_List\"</li>\n<li>\"User_Defined\"</li>\n<li>\"Distribution\"</li>\n</ul></li>\n<li>Protection: (\"Unprotected\" or \"Protected\")</li>\n</ul>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.Quality.unsigned", "modulename": "hec", "qualname": "Quality.unsigned", "kind": "variable", "doc": "<p>The internal quality code as an unsigned integer.</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.Quality.validity", "modulename": "hec", "qualname": "Quality.validity", "kind": "variable", "doc": "<p>The validity component code of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.Quality.validity_id", "modulename": "hec", "qualname": "Quality.validity_id", "kind": "variable", "doc": "<p>The validity component identifier of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.QualityException", "modulename": "hec", "qualname": "QualityException", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "hec.Safety", "modulename": "hec", "qualname": "Safety", "kind": "class", "doc": "<p>Enumeration for specifying behavior of potentially unsafe operations.</p>\n\n<ul>\n<li><code>NOOP_ON_UNSAFE</code>: No action is taken on potientially unsafe operations</li>\n<li><code>WARN_ON_UNSAFE</code>: Potentially unsafe operations will generate a warning</li>\n<li><code>ERROR_ON_UNSAFE</code>: Potentially unsafe operations will raise an exception</li>\n</ul>\n", "bases": "enum.Enum"}, {"fullname": "hec.Safety.NOOP_ON_UNSAFE", "modulename": "hec", "qualname": "Safety.NOOP_ON_UNSAFE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Safety.NOOP_ON_UNSAFE: 0&gt;"}, {"fullname": "hec.Safety.WARN_ON_UNSAFE", "modulename": "hec", "qualname": "Safety.WARN_ON_UNSAFE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Safety.WARN_ON_UNSAFE: 1&gt;"}, {"fullname": "hec.Safety.ERROR_ON_UNSAFE", "modulename": "hec", "qualname": "Safety.ERROR_ON_UNSAFE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Safety.ERROR_ON_UNSAFE: 2&gt;"}, {"fullname": "hec.Select", "modulename": "hec", "qualname": "Select", "kind": "class", "doc": "<p>Enumeration for specifying items to select</p>\n\n<ul>\n<li><code>NONE</code>: Set all items to unselected</li>\n<li><code>ALL</code>: Set all items to selected</li>\n<li><code>INVERT</code>: Set all items to the inverse of their currently selected state</li>\n</ul>\n", "bases": "enum.Enum"}, {"fullname": "hec.Select.NONE", "modulename": "hec", "qualname": "Select.NONE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Select.NONE: 0&gt;"}, {"fullname": "hec.Select.ALL", "modulename": "hec", "qualname": "Select.ALL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Select.ALL: 1&gt;"}, {"fullname": "hec.Select.INVERT", "modulename": "hec", "qualname": "Select.INVERT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Select.INVERT: 2&gt;"}, {"fullname": "hec.SelectionState", "modulename": "hec", "qualname": "SelectionState", "kind": "class", "doc": "<p>Enumeration for specifying selection durability</p>\n\n<ul>\n<li><code>TRANSIENT</code>: Selection is cleared after next operation</li>\n<li><code>DURABLE</code>: Selection persists until explicitly modified</li>\n</ul>\n", "bases": "enum.Enum"}, {"fullname": "hec.SelectionState.TRANSIENT", "modulename": "hec", "qualname": "SelectionState.TRANSIENT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SelectionState.TRANSIENT: 0&gt;"}, {"fullname": "hec.SelectionState.DURABLE", "modulename": "hec", "qualname": "SelectionState.DURABLE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SelectionState.DURABLE: 1&gt;"}, {"fullname": "hec.StoreRule", "modulename": "hec", "qualname": "StoreRule", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "hec.StoreRule.DELETE_INSERT", "modulename": "hec", "qualname": "StoreRule.DELETE_INSERT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StoreRule.DELETE_INSERT: 1&gt;"}, {"fullname": "hec.StoreRule.DO_NOT_REPLACE", "modulename": "hec", "qualname": "StoreRule.DO_NOT_REPLACE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StoreRule.DO_NOT_REPLACE: 2&gt;"}, {"fullname": "hec.StoreRule.REPLACE_ALL", "modulename": "hec", "qualname": "StoreRule.REPLACE_ALL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StoreRule.REPLACE_ALL: 3&gt;"}, {"fullname": "hec.StoreRule.REPLACE_MISSING_VALUES_ONLY", "modulename": "hec", "qualname": "StoreRule.REPLACE_MISSING_VALUES_ONLY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StoreRule.REPLACE_MISSING_VALUES_ONLY: 4&gt;"}, {"fullname": "hec.StoreRule.REPLACE_WITH_NON_MISSING", "modulename": "hec", "qualname": "StoreRule.REPLACE_WITH_NON_MISSING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StoreRule.REPLACE_WITH_NON_MISSING: 5&gt;"}, {"fullname": "hec.TimeSeries", "modulename": "hec", "qualname": "TimeSeries", "kind": "class", "doc": "<p>Holds time series and provides time series operations.</p>\n\n<h3 id=\"structure\">Structure</h3>\n\n<p>TimeSeries objects contain the following properties</p>\n\n<ul>\n<li><code>watershed</code> (Optional): A string that holds the the DSS A pathname part. Unused in CWMS contexts.</li>\n<li><code>location</code> (Required): A <a href=\"./location.html#Location\">Location</a> object. Its <code>name</code> property is used\nfor the CWMS location identifier or DSS B pathname part.</li>\n<li><code>parameter</code> (Required): A <a href=\"./parameter.html#Parameter\">Parameter</a> object. May be an <a href=\"./parameter.html#ElevParameter\">ElevParameter</a>\nif the base parameter is \"Elev\", but only if there is vertical datum info. Its <code>name</code> property is\nused for the CWMS parameter identifier or DSS C pathname part.</li>\n<li><code>parameter_type</code> (Optional): A <a href=\"./parameter.html#ParameterType\">ParameterType</a> object. Its <code>name</code>\nproperty is used for the CWMS parameter type identifier or DSS data type</li>\n<li><code>interval</code> (Required): An <a href=\"./interval.html#Interval\">Interval</a> object. Its <code>name</code> property is used\nfor the CWMS interval identier or DSS E pathname poart</li>\n<li><code>duration</code> (Optional): A <a href=\"./duration.html#Durationg\">Duration</a> object. Its <code>name</code> property is used\nfor the CWMS duration identifier. Unused in DSS contexts.</li>\n<li><code>version</code> (Optional): A string that holds the CWMS version identifier or DSS F pathname part.</li>\n<li><code>data</code> (Optiona): A pandas.DataFrame object containing the time series data. The DataFrame has a DateTime index,\na float column named \"value\" and a integer column named \"quality\"</li>\n</ul>\n\n<h3 id=\"other-properties\">Other properties</h3>\n\n<ul>\n<li><code>name</code>: The name used to initalize the object. Will be a valid CWMS time series identifier or DSS time series pathname.</li>\n<li><code>unit</code>: The unit of the parameter. Also available as the <code>unit_name</code> property of the <code>parameter</code> proerty.</li>\n<li><code>time_zone</code>: The time zone of the data or None if not set</li>\n<li><code>vertical_datum_info_xml</code>: The vertical datum info as an XML string</li>\n<li><code>vertical_datum_info_dict</code>: The vertical datum info as a dictionary</li>\n<li><code>times</code>: The times of the data values as a list of strings</li>\n<li><code>values</code>: The data values as a list of floats</li>\n<li><code>qualities</code>: The quality codes of the data values as a list of integers</li>\n<li><code>slice_stop_exclusive</code>: Controls slicing behavior</li>\n</ul>\n\n<h3 id=\"indexing-and-slicing\">Indexing and slicing</h3>\n\n<p>In addition to operations available on the <code>data</code> DataFrame, TimeSeries objects may also be indexed by\nindividual indexes or slices.</p>\n\n<p>The result of an index or slice operation is a copy TimeSeries object with the data as indicated in\nthe index or slice.</p>\n\n<p>Indexes (single, as well as start and stop values for slices) may be one of:</p>\n\n<ul>\n<li>HecTime object</li>\n<li>datetime object</li>\n<li>String - must be in the format yyyy&#8209;mm&#8209;dd&nbsp;hh:mm:ss([+|&#8209;]hh:mm). The time zone portion is required\nif the data times have the time zone specified</li>\n<li>Integer (index into the list of data times using normal python indexing)</li>\n</ul>\n\n<p>Slice steps are supported and must be a positive integer value (times must always increase)</p>\n\n<p>By default, slicing follows python behavior where the stop value is exclusive (not included in the returned data).\nTo use DataFrame behavior where the stop value is inclusive (returned in the data):</p>\n\n<ul>\n<li>call <code>TimeSeries.set_slice_stop_inclusive()</code> before creating any TimeSeries objects</li>\n<li>set the <code>slice_stop_exclusive</code> property to False on existing TimeSeries objects.</li>\n</ul>\n\n<p>Note that slicing of the <code>data</code> object will always use DataFrame behavior.</p>\n\n<h3 id=\"in-place-methods\">In-Place Methods</h3>\n\n<p>All methods that return a time series have an optional parameter named <code>in_place</code> that defaults to <code>False</code>:</p>\n\n<ul>\n<li>Leaving unspecified or specifying <code>False</code> will cause the method to return a new time series, leaving the time series\non which the method is called unchanged and available for future use.</li>\n<li>Specifying <code>True</code> will modify the time series on which the method is called and return the modified time series. The\nreturn value may of course be ignored if desired.</li>\n</ul>\n\n<p>Each of these method also has a \"in-place\" method without the <code>in_place</code> parameter and which simply calls the original\nmethod with <code>in_place=True</code>. The methods are named the same as the original methods prepended with the letter 'i' (e.g.,\n<code>select()</code> --> <code>iselect()</code>, <code>set_parameter()</code> --> <code>iset_parameter()</code>)</p>\n"}, {"fullname": "hec.TimeSeries.__init__", "modulename": "hec", "qualname": "TimeSeries.__init__", "kind": "function", "doc": "<p>Initializes a new TimeSeries object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>init_from (Any):</strong>  The object to initialize from.\n<ul>\n<li><strong>str</strong>: A CWMS time series identifier or HEC-DSS time series pathname.\n<ul>\n<li>If CWMS\n<ul>\n<li>The following components are set from the identifier:\n<ul>\n<li>location (may be in the format &lt;<em>office</em>&gt;/&lt;<em>location</em>&gt; to set office)</li>\n<li>parameter</li>\n<li>parameter type</li>\n<li>interval</li>\n<li>duration</li>\n<li>version</li>\n</ul></li>\n<li>The following components are not set:\n<ul>\n<li>watershed</li>\n</ul></li>\n</ul></li>\n<li>If HEC-DSS\n<ul>\n<li>The following components are set from the pathname:\n<ul>\n<li>A =&gt; watershed</li>\n<li>B =&gt; location</li>\n<li>C =&gt; parameter</li>\n<li>E =&gt; interval</li>\n<li>F =&gt; version</li>\n</ul></li>\n<li>The following components are set by default:\n<ul>\n<li>parameter type:\n<ul>\n<li>INST_CUM if C includes \"Precip\" (case insensitive)</li>\n<li>INST_VAL otherwise</li>\n</ul></li>\n</ul></li>\n<li>The following compents are not set:\n<ul>\n<li>duration</li>\n</ul></li>\n</ul></li>\n<li>The parameter unit is set to the default English unit</li>\n<li>No vertical datum information is set for elevation parameter</li>\n</ul></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">init_from</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "hec.TimeSeries.accum", "modulename": "hec", "qualname": "TimeSeries.accum", "kind": "function", "doc": "<p>Returns a time series whose values are the accumulation of values in this time series.</p>\n\n<p>Missing values are ignored; the accumulation at those times is the same as for the\nprevious time.</p>\n\n<p>If a selection is present, all non-selected items are set to missing before the\naccumulation is computed. They remain missing in the retuned time series.</p>\n\n<p><strong>Restrictions</strong></p>\n\n<ul>\n<li>May be performed only on time series with accumulatable base parameters. Use <a href=\"parameter.html#Parameter.accumulatable_base_parameters\">Parameter.accumulatable_base_parameters()</a> to\nlist the accumulatable base parameters.</li>\n<li>May be performed only on Instantaneous, Average, or Total time series (CWMS: Inst, Ave, Total, DSS: INST-VAL, INST-CUM, PER-CUM)</li>\n</ul>\n\n<p>See <a href=\"parameter.html#base_parameter_definitions\">base_parameter_definitions</a> for information on base parameters and their conversions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>in_place (bool, optional):</strong>  If True, this object is modified and retured, otherwise\na copy of this object is modified and returned.. Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data or one of the restrictions listed above is violated.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The accumulation time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.aggregate", "modulename": "hec", "qualname": "TimeSeries.aggregate", "kind": "function", "doc": "<p>Perform an aggregation of the values in a time series time series.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func (Union[list[Union[Callable[[Any], Any], str]],Callable[[Any], Any], str]):</strong>  The aggregation function(s).</li>\n<li><p><strong>May be one of:</strong>  <ul>\n<li><b>list[Union[Callable[[Any], Any], str]]</b>: A list comprised of items from the following two options\n(note that there is overlap between the python builtin functions and the pandas functions)\n<li><b>Callable[[Any], Any]</b>: Must take an iterable of floats and return a float timeseries<br>\n    May be a function defined in the code (including lambda funtions) or a standard python aggregation function:</p>\n\n<pre><code><ul>\n<li><code>all</code></li>\n<li><code>any</code></li>\n<li><code>len</code></li>\n<li><code>max</code></li>\n<li><code>min</code></li>\n<li><code>sum</code></li>\n<li><code>math.prod</code></li>\n<li><code>statistics.fmean</code></li>\n<li><code>statistics.geometric_mean</code></li>\n<li><code>statistics.harmonic_mean</code></li>\n<li><code>statistics.mean</code></li>\n<li><code>statistics.median</code></li>\n<li><code>statistics.median_grouped</code></li>\n<li><code>statistics.median_high</code></li>\n<li><code>statistics.median_low</code></li>\n<li><code>statistics.mode</code></li>\n<li><code>statistics.multimode</code></li>\n<li><code>statistics.pstdev</code></li>\n<li><code>statistics.pvariance</code></li>\n<li><code>statistics.quantiles</code></li>\n<li><code>statistics.stdev</code></li>\n<li><code>statistics.variance</code></li>\n</ul>\n</code></pre>\n\n<p></li>\n<li><b>str</b>: Must be the name of a pandas aggregation function:</p>\n\n<pre><code><ul>\n<li><code>\"all\"</code></li>\n<li><code>\"any\"</code></li>\n<li><code>\"count\"</code></li>\n<li><code>\"describe\"</code></li>\n<li><code>\"first\"</code></li>\n<li><code>\"last\"</code></li>\n<li><code>\"max\"</code></li>\n<li><code>\"mean\"</code></li>\n<li><code>\"median\"</code></li>\n<li><code>\"min\"</code></li>\n<li><code>\"nunique\"</code></li>\n<li><code>\"prod\"</code></li>\n<li><code>\"sem\"</code></li>\n<li><code>\"size\"</code></li>\n<li><code>\"skew\"</code></li>\n<li><code>\"std\"</code></li>\n<li><code>\"sum\"</code></li>\n<li><code>\"var\"</code></li>\n</ul>\n</code></pre>\n\n<p></li>\n</ul></p></li>\n\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n\n<p><li><strong>TimeSeriesException:</strong>  If the time series has no data, or if there are less than two items</li>\n<li>to aggregate over.</li></p>\n\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n\n<p><p>The result of the aggregation function(s)</p>\n</blockquote></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"nb\">str</span><span class=\"p\">]],</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.aggregate_ts", "modulename": "hec", "qualname": "TimeSeries.aggregate_ts", "kind": "function", "doc": "<p>Generate a time series that is an aggregation of multiple time series.</p>\n\n<p>Note that some usages (marked with <sup>1</sup>, <sup>2</sup>, <sup>3</sup>, or <sup>4</sup>) generate non-standard TimeSeries results.\nIn these cases the <code>.data</code> property of the TimeSeries should be used directly instead of using the <code>.values</code> property or using the\nTimeSeries in further operations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func (Union[list[Union[Callable[[Any], Any], str]], Callable[[Any], Any], str]):</strong>  The aggregation function(s).</li>\n<li><p><strong>May be one of:</strong>  <ul>\n<li><b>list[Union[Callable[[Any], Any], str]]</b><sup>1</sup>: A list comprised of items from the following two options\n(note that there is overlap between the python builtin functions and the pandas functions)\n<li><b>Callable[[Any], Any]</b>: Must take an iterable of floats and return a single value<br>\n    May be a function defined in the code (including lambda funtions) or a standard python aggregation function:</p>\n\n<pre><code><ul>\n<li><code>all</code><sup>2</sup></li>\n<li><code>any</code><sup>2</sup></li>\n<li><code>len</code></li>\n<li><code>max</code></li>\n<li><code>min</code></li>\n<li><code>sum</code></li>\n<li><code>math.prod</code></li>\n<li><code>statistics.fmean</code></li>\n<li><code>statistics.geometric_mean</code></li>\n<li><code>statistics.harmonic_mean</code></li>\n<li><code>statistics.mean</code></li>\n<li><code>statistics.median</code></li>\n<li><code>statistics.median_grouped</code></li>\n<li><code>statistics.median_high</code></li>\n<li><code>statistics.median_low</code></li>\n<li><code>statistics.mode</code></li>\n<li><code>statistics.multimode</code><sup>3</sup></li>\n<li><code>statistics.pstdev</code></li>\n<li><code>statistics.pvariance</code></li>\n<li><code>statistics.quantiles</code><sup>3</sup></li>\n<li><code>statistics.stdev</code></li>\n<li><code>statistics.variance</code></li>\n</ul>\n</code></pre>\n\n<p></li>\n<li><b>str</b>: Must be the name of a pandas aggregation function:</p>\n\n<pre><code><ul>\n<li><code>\"all\"</code><sup>2</sup></li>\n<li><code>\"any\"</code><sup>2</sup></li>\n<li><code>\"count\"</code></li>\n<li><code>\"describe\"</code><sup>1</sup></li>\n<li><code>\"first\"</code></li>\n<li><code>\"last\"</code></li>\n<li><code>\"max\"</code></li>\n<li><code>\"mean\"</code></li>\n<li><code>\"median\"</code></li>\n<li><code>\"min\"</code></li>\n<li><code>\"nunique\"</code></li>\n<li><code>\"prod\"</code></li>\n<li><code>\"sem\"</code></li>\n<li><code>\"size\"</code><sup>4</sup></li>\n<li><code>\"skew\"</code></li>\n<li><code>\"std\"</code></li>\n<li><code>\"sum\"</code></li>\n<li><code>\"var\"</code></li>\n</ul>\n</code></pre>\n\n<p></li>\n</ul></p></li>\n\n<p><li><strong>timeseries (list[TimeSeries]):</strong>  The time series for the function to aggregate over</li></p>\n\n</ul>\n\n<sup>1</sup>The `.data` property is a DataFrame with named columns.<br>\n<sup>2</sup>The \"Values\" column of the `.data` property contains bool values float values<br>\n<sup>3</sup>The \"Values\" column of the `.data` property contains lists of values instead of float values.<br>\n<sup>4</sup>The `.data` property is a DataFrame with one unnamed column.<br>\n\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n\n<p><li><strong>TimeSeriesException:</strong>  If less than two of the time series have data, or if the time series have\nno common times.</li></p>\n\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n\n<p><p>TimeSeries: The time series that is the result of the aggregation function. The times series name will be\n  modified from the first time series specified in the following way:</p>\n<br />\n  <ul>\n  <li>The parameter will be \"Code\"</li>\n  <li>the version will be \"Aggregate\"</li>\n  </ul>\n</blockquote></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"nb\">str</span><span class=\"p\">]],</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">timeseries</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.can_determine_unit_system", "modulename": "hec", "qualname": "TimeSeries.can_determine_unit_system", "kind": "variable", "doc": "<p>Returns whether the unit of this time series is recognized as an English unit, or a Metric unit, but not both</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.TimeSeries.centered_moving_average", "modulename": "hec", "qualname": "TimeSeries.centered_moving_average", "kind": "function", "doc": "<p>Computes and returns a time series that is the centered moving average of this time series.</p>\n\n<p>A centered moving average sets the value at each time to be the average of the values at that\ntime and a number of previous and following consecutive times.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>window (int):</strong>  The number of values to average over. The result at each time will be\nthe average of the values at ((window-1)/2) previous times, the value at the current\ntime, and the values at ((window-1)/2) following times. The span between times is not\naccounted for so discretion should be used if the time series is irregular. Must be an odd number.</li>\n<li><strong>only_valid (bool):</strong>  Specifies whether to only average over windows where every value is\nvalid. If False, the average at any given time may be computed using fewer values\nthat specified in the window parameter.</li>\n<li><strong>use_reduced (bool):</strong>  Specifies whether to allow averages using less than window number\nof values will be computed at the beginning and end of the times series. If False, the\nvalues at the first and last ((window-1)/2) times will be set to missing.</li>\n<li><strong>in_place (bool, optional):</strong>  If True, this time series is modified and returned.\nOtherwise this time series is not modified. Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data or if the window is invalid.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The averaged time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">window</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">only_valid</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">use_reduced</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.clone", "modulename": "hec", "qualname": "TimeSeries.clone", "kind": "function", "doc": "<p>Creates a copy of this object, with or without data</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>include_data (bool, optional):</strong>  Specifies whether to include the data in the copy. Defaults to True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The copy of this object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">include_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.collapse", "modulename": "hec", "qualname": "TimeSeries.collapse", "kind": "function", "doc": "<p>Collapses a regular time series (either this one or a copy of this one), removing all missing values unless they are\neither protected or marked as part of the current selection.</p>\n\n<p>Irregular time series (including pseudo-regular time series) are not affected.</p>\n\n<p>Does not alter any selection, even if selection state is <code>SelectionState.TRANSIENT</code>. Selected items remain\nselected after collapse even though their location in the data may change.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to collapse this time series (True) or a copy of this time series (False).</li>\n<li>Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The collapsed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.context", "modulename": "hec", "qualname": "TimeSeries.context", "kind": "variable", "doc": "<p>The context of the time series. Valid contexts are \"CWMS\" and \"DSS\"</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.TimeSeries.convert_to_time_zone", "modulename": "hec", "qualname": "TimeSeries.convert_to_time_zone", "kind": "function", "doc": "<p>Converts a time series (either this one or a copy of it) to the spcified time zone and returns it</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>time_zone (Union[HecTime, datetime, ZoneInfo, str]):</strong>  The target time zone or object containg the target time zone.\nUse <code>\"local\"</code> to specify the system time zone.</li>\n<li><strong>on_tz_not_set (int, optional):</strong>  Specifies behavior if this object has no time zone attached. Defaults to 1.\n<ul>\n<li><code>0</code>: Quietly behave as if this object had the local time zone attached.</li>\n<li><code>1</code>: (default) Same as <code>0</code>, but issue a warning.</li>\n<li><code>2</code>: Raise an exception preventing objectes with out time zones attached from using this method.</li>\n</ul></li>\n<li><strong>in_place (bool):</strong>  Specifies whether to convert this time series (True) or a copy of it (False). Defaults to False</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The converted time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">on_tz_not_set</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.data", "modulename": "hec", "qualname": "TimeSeries.data", "kind": "variable", "doc": "<p>The data as a DataFrame or None if not set. Note this exposes the interal DataFrame object to\nallow direct modification. For uses that should not modify this TimeSeries object, the DataFrame\nshould be copied using its <code>copy()</code> method prior to modification (e.g., <code>df = ts.data.copy()</code>)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[pandas.core.frame.DataFrame]"}, {"fullname": "hec.TimeSeries.diff", "modulename": "hec", "qualname": "TimeSeries.diff", "kind": "function", "doc": "<p>Returns a time series whose values are the differences of successive values in this time series.</p>\n\n<p>A missing value at a specific time in the source time series will cause the value at that\nand the next time in the result time sereies to be missing.</p>\n\n<p>If a selection is present, all non-selected items are set to missing before the\naccumulation is computed. They remain missing in the retuned time series.</p>\n\n<p><strong>Restrictions</strong></p>\n\n<ul>\n<li>May be performed only on time series with accumulatable base parameters. Use <a href=\"parameter.html#Parameter.accumulatable_base_parameters\">Parameter.accumulatable_base_parameters()</a> to\nlist the accumulatable base parameters.</li>\n<li>May be performed only on Instantaneous, Average, or Total time series (CWMS: Inst, Ave, Total, DSS: INST-VAL, INST-CUM, PER-CUM)</li>\n</ul>\n\n<p>See <a href=\"parameter.html#base_parameter_definitions\">base_parameter_definitions</a> for information on base parameters and their conversions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>in_place (bool, optional):</strong>  If True, this object is modified and retured, otherwise\na copy of this object is modified and returned.. Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The time series of differences</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.duration", "modulename": "hec", "qualname": "TimeSeries.duration", "kind": "variable", "doc": "<p>The duration object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[hec.duration.Duration]"}, {"fullname": "hec.TimeSeries.estimate_missing_values", "modulename": "hec", "qualname": "TimeSeries.estimate_missing_values", "kind": "function", "doc": "<p>Estimates missing values in a time series using specified criteria, and returns the estimated time series (either this time series or a copy of it).\nValues are estimated using linear interpolation between the bounding valid values</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>max_missing_count (int):</strong>  The maximum number of consecutive missing values that will be replaced with estimates.\nGroups of consecutive missing values larger than this number remain missing (except see <code>accumulation</code>).</li>\n<li><strong>accumulation (bool, optional):</strong>  Specifies whether the time series is an accumulation (e.g., cumulative precipitaion).\nThe estimation behavior for accumulation time series differs in that\n<ul>\n<li>If the bounding valid values for a group of consecutive missing values decrease with increasing time, no estimations are performed</li>\n<li>If the bounding valid values for a group of consecutive missing values are equal, the all missing values in the group are replaced\nwith the same value, without regard to <code>max_missing_count</code>\nDefaults to False.</li>\n</ul></li>\n<li><strong>estimate_rejected (bool, optional):</strong>  Specifies whether to treat values in the time series with Rejected quality as missing. Defaults to True.</li>\n<li><strong>set_questioned (bool, optional):</strong>  Specifies whether to set the quality for estimated values to Questionable. If False, quality is set to Okay. Defaults to True.</li>\n<li><strong>in_place (bool, optional):</strong>  Specfies whether to modify and return this time series (True) or a copy of this time series (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If there are no values in the time series</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The estimated time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">max_missing_count</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">accumulation</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">estimate_rejected</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">set_questioned</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.expand", "modulename": "hec", "qualname": "TimeSeries.expand", "kind": "function", "doc": "<p>Expands a regular time series (either this one or a copy of this one) so that there are no gaps in time\n(fills gaps with missing values) and returns the expanded time series. If <code>start_time</code> and/or <code>end_time</code>\nare specified, the times between the start_time and the first time and between the last time and the end_time\nare considered as gaps to be filled.</p>\n\n<p>Irregular time series (including pseudo-regular time series) are not affected.</p>\n\n<p>Does not alter any selection, even if selection state is <code>SelectionState.TRANSIENT</code>. Selected items remain\nselected after expansion even though their location in the data may change.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>start_time (Optional[Union[str, datetime, HecTime]]):</strong>  The beginning of the timespan before the first time\nto fill with missing values. Does not need to fall on the time series interval. If not at least one full\ninterval prior to the first time, no missing values will be inserted before the first time. Defaults to None.</li>\n<li><strong>end_time (Optional[Union[str, datetime, HecTime]]):</strong>  The end of the timespan after the last time to fill\nwith missing values. Does not need to fall on the time series interval. If not at least one full interval after\nthe last time, no missing values will be inserted after the last time. Defaults to None.</li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to expand this time series (True) or a copy of this time series (False).</li>\n<li>Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The expanded time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">start_time</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end_time</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.filter", "modulename": "hec", "qualname": "TimeSeries.filter", "kind": "function", "doc": "<p>Filters a time series (either this one or a copy of this one) and returns the results. The returned time series\nwill contain only the selected or unselected items in the original time series.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unselected (bool, optional):</strong>  Specifies including only selected itmes (False) or only unselected items (True). Defaults to False.</li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to modifiy this time series (True) or a copy of it (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The filtered time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">unselected</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.ifilter", "modulename": "hec", "qualname": "TimeSeries.ifilter", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.filter\">fileter(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">unselected</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.first_valid_time", "modulename": "hec", "qualname": "TimeSeries.first_valid_time", "kind": "variable", "doc": "<p>The time of the first valid value in the time series. Values are valid unless any of the following are true:</p>\n\n<ul>\n<li>The quality is MISSING</li>\n<li>The quality is REJECTED</li>\n<li>The value is NaN</li>\n<li>The value is Infinite</li>\n</ul>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[numpy.datetime64]"}, {"fullname": "hec.TimeSeries.first_valid_value", "modulename": "hec", "qualname": "TimeSeries.first_valid_value", "kind": "variable", "doc": "<p>The first valid value in the time series. Values are valid unless any of the following are true:</p>\n\n<ul>\n<li>The quality is MISSING</li>\n<li>The quality is REJECTED</li>\n<li>The value is NaN</li>\n<li>The value is Infinite</li>\n</ul>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[float]"}, {"fullname": "hec.TimeSeries.format_time_for_index", "modulename": "hec", "qualname": "TimeSeries.format_time_for_index", "kind": "function", "doc": "<p>Formats a time item for indexing into the times of this object. The formatting depends on\nthe setting of this object's <a href=\"#TimeSeries.midnight_as_2400\"><code>mindnight_as_2400</code></a> property</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>item (Union[HecTime, datetime, str]):</strong>  The time item to format.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The formatted string with the midnight setting of this object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.forward_moving_average", "modulename": "hec", "qualname": "TimeSeries.forward_moving_average", "kind": "function", "doc": "<p>Computes and returns a time series that is the forward moving average of this time series.</p>\n\n<p>A forward moving average sets the value at each time to be the average of the values at that\ntime and a number of previous consecutive times.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>window (int):</strong>  The number of values to average over. The result at each time will be\nthe average of the values at (window-1) previous times and the value at the current\ntime. The span between times is not accounted for so discretion should be used if\nthe time series is irregular.</li>\n<li><strong>only_valid (bool):</strong>  Specifies whether to only average over windows where every value is\nvalid. If False, the average at any given time may be computed using fewer values\nthat specified in the window parameter.</li>\n<li><strong>use_reduced (bool):</strong>  Specifies whether to allow averages using less than window number\nof values will be computed at the beginning of the times series. If False, the\nvalues at the first (window-1) times will be set to missing.</li>\n<li><strong>in_place (bool, optional):</strong>  If True, this time series is modified and returned.\nOtherwise this time series is not modified. Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data or if the window is invalid.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The averaged time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">window</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">only_valid</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">use_reduced</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.get_differentiation_parameter", "modulename": "hec", "qualname": "TimeSeries.get_differentiation_parameter", "kind": "function", "doc": "<p>Returns a new Parameter object appropriate for differentiating this time series with respect to time.</p>\n\n<p>The new parameter will preserve any sub-parameter of this time series as well as the unit system of this time sereis.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If time series is not integrable (see <a href=\"parameter.html#Parameter.differentiable_base_parameters\">Parameter.differentiable_base_parameters</a>)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Parameter: The new parameter object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">Parameter</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.get_integration_parameter", "modulename": "hec", "qualname": "TimeSeries.get_integration_parameter", "kind": "function", "doc": "<p>Returns a new Parameter object appropriate for integrating this time series over time.</p>\n\n<p>The new parameter will preserve any sub-parameter of this time series as well as the unit system of this time sereis.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If time series is not integrable (see <a href=\"parameter.html#Parameter.integrable_base_parameters\">Parameter.integrable_base_parameters</a>)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Parameter: The new parameter object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">Parameter</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.has_same_times", "modulename": "hec", "qualname": "TimeSeries.has_same_times", "kind": "function", "doc": "<p>Returns whether another time series has the same times as this time series.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (TimeSeries):</strong>  The other time series</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether another time series has the same times as this time series.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.has_selection", "modulename": "hec", "qualname": "TimeSeries.has_selection", "kind": "variable", "doc": "<p>Whether the object has a current selection specified</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.TimeSeries.iaccum", "modulename": "hec", "qualname": "TimeSeries.iaccum", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.accum\">accum(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.icentered_moving_average", "modulename": "hec", "qualname": "TimeSeries.icentered_moving_average", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.centered_moving_average\">centered_moving_average(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">window</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">only_valid</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">use_reduced</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.icollapse", "modulename": "hec", "qualname": "TimeSeries.icollapse", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.collapse\">collapse(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.iconvert_to_time_zone", "modulename": "hec", "qualname": "TimeSeries.iconvert_to_time_zone", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.convert_to_time_zone\">convert_to_time_zone(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">on_tz_not_set</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.idiff", "modulename": "hec", "qualname": "TimeSeries.idiff", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.diff\">diff(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.iestimate_missing_values", "modulename": "hec", "qualname": "TimeSeries.iestimate_missing_values", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.estimate_missing_values\">estimate_missing_values(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">max_missing_count</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">accumulation</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">estimate_rejected</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">set_questioned</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.iexpand", "modulename": "hec", "qualname": "TimeSeries.iexpand", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.expand\">expand(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">start_time</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end_time</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.iforward_moving_average", "modulename": "hec", "qualname": "TimeSeries.iforward_moving_average", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.forward_moving_average\">forward_moving_average(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">window</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">only_valid</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">use_reduced</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.imap", "modulename": "hec", "qualname": "TimeSeries.imap", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.map\">map(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.ilabel_as_time_zone", "modulename": "hec", "qualname": "TimeSeries.ilabel_as_time_zone", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.label_as_time_zone\">label_as_time_zone(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">on_already_set</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.imerge", "modulename": "hec", "qualname": "TimeSeries.imerge", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.merge\">merge(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.index_of", "modulename": "hec", "qualname": "TimeSeries.index_of", "kind": "function", "doc": "<p>Retrieves the data index of a specified object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>item_to_index (Union[HecTime, datetime, int, str]):</strong>  The object to retrieve the index of.\n<ul>\n<li><strong>HecTime</strong>: an HecTime object</li>\n<li><strong>datetime</strong>:  a datetime object</li>\n<li><strong>int</strong>: a normal python index</li>\n<li><strong>str</strong>: a date-time string</li>\n</ul></li>\n<li><strong>not_found (Optional[str]):</strong>  Specifies the behavior if <code>item_to_index</code> is not in the index:\n<ul>\n<li>'next': return the higher of the bounding indices of the item</li>\n<li>'previous': return the lower of the bounding indices of the item</li>\n<li>'stop': used for the stop index of slices - return the lower of the bounding indices plus one (unless beyond end)</li>\n<li>None (default): raise an IndexError</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no values, or if <code>not_found</code> is specifed and is not \"next\" \"previous\", or \"stop\"</li>\n<li><strong>TypeError:</strong>  If <code>item_to_index</code> is not one of the expected types</li>\n<li><strong>IndexError:</strong>  * <strong>int</strong>: If the integer is out of range of the number of times\n<ul>\n<li><strong>Others</strong>: If no index item matches the input object</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The actual index item that for the specified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">item_to_index</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.interval", "modulename": "hec", "qualname": "TimeSeries.interval", "kind": "variable", "doc": "<p>The interval object (used in HEC-DSS E pathname part)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": hec.interval.Interval"}, {"fullname": "hec.TimeSeries.iolympic_moving_average", "modulename": "hec", "qualname": "TimeSeries.iolympic_moving_average", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.olympic_moving_average\">olympic_moving_average(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">window</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">only_valid</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">use_reduced</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.iresample", "modulename": "hec", "qualname": "TimeSeries.iresample", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.resample\">resample(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">operation</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">start_time</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end_time</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_missing_percent</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">25.0</span>,</span><span class=\"param\">\t<span class=\"n\">entire_interval</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">before</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">after</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;LAST&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.iround_off", "modulename": "hec", "qualname": "TimeSeries.iround_off", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.round_off\">round_off(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">precision</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">tens_place</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.is_any_irregular", "modulename": "hec", "qualname": "TimeSeries.is_any_irregular", "kind": "variable", "doc": "<p>Specifies whether the time series is a normal irregular or pseudo-regular time series</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.TimeSeries.is_any_regular", "modulename": "hec", "qualname": "TimeSeries.is_any_regular", "kind": "variable", "doc": "<p>Specifies whether the time series is a normal regular or local regular time series</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.TimeSeries.is_cwms_ts_id", "modulename": "hec", "qualname": "TimeSeries.is_cwms_ts_id", "kind": "function", "doc": "<p>Returns whether the specified identifier is a valid CWMS time series identifier</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>identifier (str):</strong>  The identifier</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether the identifier is a valid CWMS time series identifier</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.is_dss_ts_pathname", "modulename": "hec", "qualname": "TimeSeries.is_dss_ts_pathname", "kind": "function", "doc": "<p>Returns whether the specified identifier is a valid HEC-DSS time series pathname</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>identifier (str):</strong>  The identifier</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether the identifier is a valid HEC-DSS time series pathname</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.is_english", "modulename": "hec", "qualname": "TimeSeries.is_english", "kind": "variable", "doc": "<p>Returns whether the unit of this time series is recognized as an English unit</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.TimeSeries.is_irregular", "modulename": "hec", "qualname": "TimeSeries.is_irregular", "kind": "variable", "doc": "<p>Specifies whether the time series is a normal irregular time series</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.TimeSeries.is_local_regular", "modulename": "hec", "qualname": "TimeSeries.is_local_regular", "kind": "variable", "doc": "<p>Specifies whether the time series is a local regular time series</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.TimeSeries.is_metric", "modulename": "hec", "qualname": "TimeSeries.is_metric", "kind": "variable", "doc": "<p>Returns whether the unit of this time series is recognized as an Metric unit</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.TimeSeries.is_pseudo_regular", "modulename": "hec", "qualname": "TimeSeries.is_pseudo_regular", "kind": "variable", "doc": "<p>Specifies whether the time series is a normal irregular or pseudo-regular time series</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.TimeSeries.is_regular", "modulename": "hec", "qualname": "TimeSeries.is_regular", "kind": "variable", "doc": "<p>Specifies whether the time series is a normal regular time series</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.TimeSeries.is_valid", "modulename": "hec", "qualname": "TimeSeries.is_valid", "kind": "function", "doc": "<p>Returns whether the index is in the time series and the value at the index is valid</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>index (Union[int, str, datetime, HecTime]):</strong>  The index to test.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: False if any of the following are true, otherwise True:</p>\n  \n  <ul>\n  <li>The time series does not contain the index</li>\n  <li>The quality is MISSING</li>\n  <li>The quality is REJECTED</li>\n  <li>The value is NaN</li>\n  <li>The value is Infinite</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.iscreen_with_constant_value", "modulename": "hec", "qualname": "TimeSeries.iscreen_with_constant_value", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.screen_with_constant_value\">screen_with_constant_value(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">duration</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">duration</span><span class=\"o\">.</span><span class=\"n\">Duration</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">missing_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">min_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">percent_valid_required</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.iscreen_with_duration_magnitude", "modulename": "hec", "qualname": "TimeSeries.iscreen_with_duration_magnitude", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.screen_with_duration_magnitude\">screen_with_duration_magnitude(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">duration</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">duration</span><span class=\"o\">.</span><span class=\"n\">Duration</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">min_missing_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">min_reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">min_question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">max_question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">max_reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">max_missing_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">percent_valid_required</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.iscreen_with_forward_moving_average", "modulename": "hec", "qualname": "TimeSeries.iscreen_with_forward_moving_average", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.screen_with_forward_moving_average\">screen_with_forward_moving_average(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">window</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">only_valid</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">use_reduced</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">diff_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">invalid_validity</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;M&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.iscreen_with_value_change_rate", "modulename": "hec", "qualname": "TimeSeries.iscreen_with_value_change_rate", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.screen_with_value_change_rate\">screen_with_value_change_rate(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">min_reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">min_question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">max_question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">max_reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.iscreen_with_value_range", "modulename": "hec", "qualname": "TimeSeries.iscreen_with_value_range", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.screen_with_value_range\">screen_with_value_range(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">min_reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">min_question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">max_question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">max_reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.iscreen_with_value_range_or_change", "modulename": "hec", "qualname": "TimeSeries.iscreen_with_value_range_or_change", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.screen_with_value_range_or_change\">screen_with_value_range_or_change(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">min_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">max_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">change_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">replace_invalid_value</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">invalid_value_replacement</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">invalid_validity</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;M&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.iselect", "modulename": "hec", "qualname": "TimeSeries.iselect", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.select\">select(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">selection</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">Select</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeriesValue</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">combination</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">Combine</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Combine</span><span class=\"o\">.</span><span class=\"n\">REPLACE</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.iselect_valid", "modulename": "hec", "qualname": "TimeSeries.iselect_valid", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.select_valid\">select_valid(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.iset_duration", "modulename": "hec", "qualname": "TimeSeries.iset_duration", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.set_duration\">set_duration(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">duration</span><span class=\"o\">.</span><span class=\"n\">Duration</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.iset_interval", "modulename": "hec", "qualname": "TimeSeries.iset_interval", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.set_interval\">set_interval(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.iset_location", "modulename": "hec", "qualname": "TimeSeries.iset_location", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.set_location\">set_location(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">location</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.iset_parameter", "modulename": "hec", "qualname": "TimeSeries.iset_parameter", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.set_parameter\">set_parameter(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">Parameter</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.iset_parameter_type", "modulename": "hec", "qualname": "TimeSeries.iset_parameter_type", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.set_parameter_type\">set_parameter_type(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">ParameterType</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.iset_protected", "modulename": "hec", "qualname": "TimeSeries.iset_protected", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.set_protected\">set_protected(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.iset_quality", "modulename": "hec", "qualname": "TimeSeries.iset_quality", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.set_quality\">set_quality(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">quality</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.iset_unit", "modulename": "hec", "qualname": "TimeSeries.iset_unit", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.set_unit\">set_unit(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.iset_unprotected", "modulename": "hec", "qualname": "TimeSeries.iset_unprotected", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.set_unprotected\">set_unprotected(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.iset_value", "modulename": "hec", "qualname": "TimeSeries.iset_value", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.set_value\">set_value(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.iset_value_quality", "modulename": "hec", "qualname": "TimeSeries.iset_value_quality", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.set_value_quality\">set_value_quality(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">quality</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.iset_vertical_datum_info", "modulename": "hec", "qualname": "TimeSeries.iset_vertical_datum_info", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.set_vertical_datum_info\">set_vertical_datum_info(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.isnap_to_regular", "modulename": "hec", "qualname": "TimeSeries.isnap_to_regular", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.snap_to_regular\">snap_to_regular(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">backward</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">forward</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.itime_derivative", "modulename": "hec", "qualname": "TimeSeries.itime_derivative", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.time_derivative\">time_derivative(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.ito", "modulename": "hec", "qualname": "TimeSeries.ito", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.to\">to(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">unit_parameter_or_datum</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">Parameter</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.ito_irregular", "modulename": "hec", "qualname": "TimeSeries.ito_irregular", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.to_irregular\">to_irregular(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.itrim", "modulename": "hec", "qualname": "TimeSeries.itrim", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.trim\">trim(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.kurtosis", "modulename": "hec", "qualname": "TimeSeries.kurtosis", "kind": "function", "doc": "<p>Computes the kurtosis coefficient of the values in the time series</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data or fewer than 2 items selected.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: The kurtosis coefficient</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.label_as_time_zone", "modulename": "hec", "qualname": "TimeSeries.label_as_time_zone", "kind": "function", "doc": "<p>Attaches the specified time zone to this object or a copy of this object and returns it. Does not change the actual times</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>time_zone (Optional[Union[\"HecTime\", datetime, ZoneInfo, str]]):</strong>  The time zone to attach or\nobject containing that time zone.\n<ul>\n<li>Use <code>\"local\"</code> to specify the system time zone.</li>\n<li>Use <code>None</code> to remove time zone information</li>\n</ul></li>\n<li><strong>on_already_set (int):</strong>  Specifies action to take if a different time zone is already\nattached. Defaults to 1.\n<ul>\n<li><code>0</code>: Quietly attach the new time zone</li>\n<li><code>1</code>: (default) Issue a warning about attaching a different time zone</li>\n<li><code>2</code>: Raises an exception</li>\n</ul></li>\n<li><strong>in_place (bool):</strong>  Specifies whether to attach the time zone to this time series (True) or a copy of it (False). Defaults to False</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  if a different time zone is already attached and <code>on_already_set</code> == 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">on_already_set</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.last_valid_time", "modulename": "hec", "qualname": "TimeSeries.last_valid_time", "kind": "variable", "doc": "<p>The time of the last valid value in the time series. Values are valid unless any of the following are true:</p>\n\n<ul>\n<li>The quality is MISSING</li>\n<li>The quality is REJECTED</li>\n<li>The value is NaN</li>\n<li>The value is Infinite</li>\n</ul>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[numpy.datetime64]"}, {"fullname": "hec.TimeSeries.last_valid_value", "modulename": "hec", "qualname": "TimeSeries.last_valid_value", "kind": "variable", "doc": "<p>The last valid value in the time series. Values are valid unless any of the following are true:</p>\n\n<ul>\n<li>The quality is MISSING</li>\n<li>The quality is REJECTED</li>\n<li>The value is NaN</li>\n<li>The value is Infinite</li>\n</ul>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[float]"}, {"fullname": "hec.TimeSeries.location", "modulename": "hec", "qualname": "TimeSeries.location", "kind": "variable", "doc": "<p>The location object (used in HEC-DSS B pathname part)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": hec.location.Location"}, {"fullname": "hec.TimeSeries.map", "modulename": "hec", "qualname": "TimeSeries.map", "kind": "function", "doc": "<p>Applies a function of one variable to the values of this object and returns the modified object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func (Callable):</strong>  The function of one variable to apply to the values</li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to operate on this object (True)\nor a copy of this object (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: Either this object (modified) or a modified copy of this object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.max_value", "modulename": "hec", "qualname": "TimeSeries.max_value", "kind": "function", "doc": "<p>Returns the maximum value in the time series.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: The maximum value in the time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.max_value_time", "modulename": "hec", "qualname": "TimeSeries.max_value_time", "kind": "function", "doc": "<p>Returns the time of maximum value in the time series.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: The time of maximum value in the time series. If the maximum value\n      occurs more than once, the earliest time is returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.merge", "modulename": "hec", "qualname": "TimeSeries.merge", "kind": "function", "doc": "<p>Merges one or more time series into either this time series or a copy of it, and returns the merged time series.</p>\n\n<p>When the same time exists while merging, the following precedence is followed:</p>\n\n<ul>\n<li>other protected value (incoming protected trumps existing protected)</li>\n<li>this protected value</li>\n<li>this unprotected value if it is not NaN or infinite</li>\n<li>other unprotected value if it is not NaN or infinte</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (Union[&quot;TimeSeries&quot;, List[&quot;TimeSeries&quot;]]):</strong>  The other times series (one or a list) to merge.\nIf a list, each other time series is merged in sequence, with earlier results acting as this time series for later merges</li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to merge into this time series (True) or a copy of it (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If this time series is a regular time series and the merged times are not all on the interval</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The merged time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.midnight_as_2400", "modulename": "hec", "qualname": "TimeSeries.midnight_as_2400", "kind": "variable", "doc": "<p>The object's current setting of whether to show midnight as hour 24 (default) or not.</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.TimeSeries.min_value", "modulename": "hec", "qualname": "TimeSeries.min_value", "kind": "function", "doc": "<p>Returns the minimum value in the time series.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: The minimum value in the time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.min_value_time", "modulename": "hec", "qualname": "TimeSeries.min_value_time", "kind": "function", "doc": "<p>Returns the time of minimum value in the time series.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: The time of minimum value in the time series. If the minimum value\n      occurs more than once, the earliest time is returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.name", "modulename": "hec", "qualname": "TimeSeries.name", "kind": "variable", "doc": "<p>The CWMS time series identifier or HEC-DSS pathname</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.TimeSeries.new_regular_time_series", "modulename": "hec", "qualname": "TimeSeries.new_regular_time_series", "kind": "function", "doc": "<p>Generates and returns a new regular (possibly local regular) interval time series with the\nspecified times, values, and qualities.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the time series. The interval portion will be overwritten by the <code>interval</code> if they don't agree</li>\n<li><strong>start (Union[HecTime, datetime, str]):</strong>  The specified start time. The actual start time may be later than this, depending on <code>interval</code> and <code>offset</code></li>\n<li><strong>end (Union[HecTime, datetime, str, int]):</strong>  Either the specified end time or, if int, the number of intervals in the time series.\nThe actual end time may be earlier than the specified end time, depending on <code>interval</code> and <code>offset</code></li>\n<li><strong>interval (Union[Interval, timedelta, str]):</strong>  The interval of the time series. Will overwrite the interval portion of <code>name</code>. If it\nis a local regular interval and <code>start</code> includes a time zone, then the time series will be a local regular time series</li>\n<li><strong>offset (Optional[Union[TimeSpan, timedelta, str, int]]):</strong>  The interval offset. If int, then number of minutes. If none, then the\noffset is determined from <code>start</code> (it's offset into the specified interval). Defaults to None.</li>\n<li><strong>time_zone (Optional[str]):</strong>  The time zone. Must be specified if <code>interval</code> is a local-regular interval.</li>\n<li><strong>value (Union[List[float], float], optional):</strong>  The value(s) to populate the time series with. If float, it specifies all values.\nIf list, the list is repeated as many whole and/or partial time as necessary to fill the time series Defaults to 0.0.</li>\n<li><strong>quality (Union[List[Quality], List[int], Quality, int], optional):</strong>  The qualities to fill the time series with. If Quality or int,\nit specifies all qualities. If list, the list is repeated as many whole and/or partial times to fill the time sries Defaults to 0.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If an irregular interval is specified</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The generated regular (possible local regular) interval time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">quality</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.number_invalid_values", "modulename": "hec", "qualname": "TimeSeries.number_invalid_values", "kind": "variable", "doc": "<p>The number of invalid values in the time series. Values are invalid if any of the following are true:</p>\n\n<ul>\n<li>The quality is MISSING</li>\n<li>The quality is REJECTED</li>\n<li>The value is NaN</li>\n<li>The value is Infinite</li>\n</ul>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.TimeSeries.number_missing_values", "modulename": "hec", "qualname": "TimeSeries.number_missing_values", "kind": "variable", "doc": "<p>The number of invalid values in the time series. Values are missing if either of the following are true:</p>\n\n<ul>\n<li>The quality is MISSING</li>\n<li>The value is NaN</li>\n</ul>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.TimeSeries.number_questioned_values", "modulename": "hec", "qualname": "TimeSeries.number_questioned_values", "kind": "variable", "doc": "<p>The number of values in the time series that have quality of QUESTIONABLE:</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.TimeSeries.number_rejected_values", "modulename": "hec", "qualname": "TimeSeries.number_rejected_values", "kind": "variable", "doc": "<p>The number of values in the time series that have quality of REJECTED:</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.TimeSeries.number_valid_values", "modulename": "hec", "qualname": "TimeSeries.number_valid_values", "kind": "variable", "doc": "<p>The number of valid values in the time series. Values are valid unless any of the following are true:</p>\n\n<ul>\n<li>The quality is MISSING</li>\n<li>The quality is REJECTED</li>\n<li>The value is NaN</li>\n<li>The value is Infinite</li>\n</ul>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.TimeSeries.number_values", "modulename": "hec", "qualname": "TimeSeries.number_values", "kind": "variable", "doc": "<p>The number of values in the time series. Same as len(ts).</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.TimeSeries.olympic_moving_average", "modulename": "hec", "qualname": "TimeSeries.olympic_moving_average", "kind": "function", "doc": "<p>Computes and returns a time series that is the olympic moving average of this time series.</p>\n\n<p>An olympic moving average sets the value at each time to be the average of the values at that\ntime and a number of previous and following consecutive times, disregarding the minimum\nand maximum values in the range to average over.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>window (int):</strong>  The number of values to average over. The result at each time will be\nthe average of the values at ((window-1)/2) previous times, the value at the current\ntime, and the values at ((window-1)/2) following times, not using the minimum and\nmaximum values in the window. The span between times is not accounted for so discretion\nshould be used if the time series is irregular. Must be an odd number.</li>\n<li><strong>only_valid (bool):</strong>  Specifies whether to only average over windows where every value is\nvalid. If False, the average at any given time may be computed using fewer values\nthat specified in the window parameter.</li>\n<li><strong>use_reduced (bool):</strong>  Specifies whether to allow averages using less than window number\nof values will be computed at the beginning and end of the times series. If False, the\nvalues at the first and last ((window-1)/2) times will be set to missing.</li>\n<li><strong>in_place (bool, optional):</strong>  If True, this time series is modified and returned.\nOtherwise this time series is not modified. Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data or if the window is invalid.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The averaged time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">window</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">only_valid</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">use_reduced</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.parameter", "modulename": "hec", "qualname": "TimeSeries.parameter", "kind": "variable", "doc": "<p>The parameter object (used in HEC-DSS C pathname part)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": hec.parameter.Parameter"}, {"fullname": "hec.TimeSeries.parameter_type", "modulename": "hec", "qualname": "TimeSeries.parameter_type", "kind": "variable", "doc": "<p>The parameter type object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[hec.parameter.ParameterType]"}, {"fullname": "hec.TimeSeries.percentile", "modulename": "hec", "qualname": "TimeSeries.percentile", "kind": "function", "doc": "<p>Computes the specified percentile of the values in the time series</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pct (float):</strong>  The desired percentile in the range of 1..100</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data or fewer than 2 items selected.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: The value for the specified percentile</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pct</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.percentile_ts", "modulename": "hec", "qualname": "TimeSeries.percentile_ts", "kind": "function", "doc": "<p>Computes the specified percentile of the values in the time series</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pct (Union[tuple[float, ...], list[float], float]):</strong>  The desired percentile in the range of 1..100\nor a list or tuple of such percentiles.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data or fewer than 2 items selected.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The time series of percentiles for each time. The times series name will be\n  modified from the first time series specified in the following way:</p>\n  \n  <ul>\n  <li>The parameter will be \"Code-Percentile\"</li>\n  <li>the version will be \"<pct>-percentile\" with <pct> replaced by the pct parameter with any decimal\n  point replaced with an underscore (_) character</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pct</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">timeseries</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.qualities", "modulename": "hec", "qualname": "TimeSeries.qualities", "kind": "variable", "doc": "<p>The qualities as a list of integers (empty if there is no data)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": list[int]"}, {"fullname": "hec.TimeSeries.resample", "modulename": "hec", "qualname": "TimeSeries.resample", "kind": "function", "doc": "<p>Resamples a time series using a specified operation onto an interval or time pattern and returns the result, which may be a new time series or this time series modified.</p>\n\n<p>For this method document:</p>\n\n<ul>\n<li><strong>old</strong>: pertains to the time series this method is called on</li>\n<li><strong>new</strong>: pertains to the result time series</li>\n<li><strong>point</strong>: a time/value combination in a time series</li>\n<li><strong>interval</strong>: the time between one point (exclusive) and the next (inclusive), regardless of whether it corresponds to an actual <a href=\"interval.html#Interval\"><code>Interval</code></a></li>\n<li><strong>interval time</strong>: the ending time of the interval</li>\n</ul>\n\n<p><strong>Operation Types</strong></p>\n\n<p>The resample operations are divided in to discreet and continuous operations:</p>\n\n<ul>\n<li><strong>Discreet</strong>:\n<ul>\n<li><code>Count</code>: The number of valid old points in each new interval</li>\n<li><code>Maximum</code>: The maximum value of valid old points in each new interval</li>\n<li><code>Minimum</code>: The minimum value of valid old points in each new interval</li>\n<li><code>Previous</code>: The value of the latest valid old point prior to each new interval time</li>\n</ul></li>\n<li><strong>Continuous</strong>:\n<ul>\n<li><code>Interpolate</code>: Find the value at each new interval time (see callouts in plots below)</li>\n<li><code>Integrate</code>: Integrate the time series for each new interval(see shaded area in plots below)</li>\n<li><code>Average</code>: The integration of the time series for each new interval divided by the sum of the times used for integration for that interval.\nNote that this generates the <em>average value in the interval</em> which can be greater than the <em>average value over the interval</em> (integration divided by new interval span)\nif one or more old points in the new interval are missing or invalid.</li>\n<li><code>Accumulate</code>: The accumulation over each new interval (see computations below each plot below). Note that this differs from the <a href=\"#TimeSeries.accum\"><code>accum</code></a> method which accumulates\nsuccessive values in a time series.</li>\n<li><code>Volume</code>: A special case of <code>Integrate</code> that requires the old time series to have the base parameter of \"Flow'; the new base parameter is \"Volume\"</li>\n</ul></li>\n</ul>\n\n<p>For discreet operations (except <code>Previous</code>) the <code>entire_interval</code> argument specifies whether to require that each entire old interval falls within the new interval\n(True) or to allow all old points whose interval time is in the new interval (False).</p>\n\n<p>See <a href=\"parameter.html#base_parameter_definitions\">base_parameter_definitions</a> for information on base parameters and their conversions.</p>\n\n<p><strong>Parameter Type Effects</strong></p>\n\n<p>Interpolation, which is performed for all continous operations, and accumulation are dependent on the <a href=\"#TimeSeries.parameter_type\"><code>parameter_type</code></a> of the time series. Each plot below\nis for a 1-Hour regular time series with the following points:</p>\n\n<table>\n<thead>\n<tr>\n  <th>Time</th>\n  <th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>01Feb2025 01:10</td>\n  <td>1.0</td>\n</tr>\n<tr>\n  <td>01Feb2025 02:10</td>\n  <td>2.0</td>\n</tr>\n<tr>\n  <td>01Feb2025 03:10</td>\n  <td>3.0</td>\n</tr>\n<tr>\n  <td>01Feb2025 04:10</td>\n  <td>4.0</td>\n</tr>\n<tr>\n  <td>01Feb2025 05:10</td>\n  <td>3.0</td>\n</tr>\n<tr>\n  <td>01Feb2025 06:10</td>\n  <td>2.0</td>\n</tr>\n</tbody>\n</table>\n\n<p>The callouts show the interpolated values at 01:00 (except for Intantaneous), 02:00, 03:00, 04:00, 05:00, and 06:00. The shaded portion show the area used for integration,\nwhich is performed not only for the <code>Integrate</code> operation, but <code>Average</code> and <code>Volume</code> operations as well. Below each plot the accumulation from 02:00 to 04:00 is computed.</p>\n\n<ul>\n<li><strong>Instantaneous Types</strong> (CWMS: Inst, DSS: INST-VAL, INST-CUM): <img src=\"images/Interpolate_Integrate_Instantaneous.png\" alt=\"Intantaneous interpolataion and integration\" />\n<br><em>For instantaeous accumulation (e.g., CWMS: Precip.Inst, DSS INST-CUM), any point with a value lower than the previous point is considered to be invalid, so 05:00 and and 06:00 would be invalid values.</em>\n<br><code>Accumulation (02:00-04:00) = 3.8333 - 1.8333 = 2.0</code>.</li>\n<li><strong>Period Constant Types</strong> (CWMS: Ave, Const, Min, Max, DSS: PER-AVER, PER-MIN, PER-MAX): <img src=\"images/Interpolate_Integrate_Average.png\" alt=\"Period value interpolataion and integration\" />\n<br><code>Accumulation (02:00-04:00) = 4.0000 - 2.0000 = 2.0</code>.</li>\n<li><strong>Period Total Types</strong> (CWMS: Total, DSS: PER-CUM): <img src=\"images/Interpolate_Integrate_Total.png\" alt=\"Total interpolataion and integration\" />\n<br><code>Accumulation (02:00-04:00) = 2.0000 - 1.6667 + 3.0 + 3.3333 = 6.6667</code>.</li>\n</ul>\n\n<p><strong>Parameters, Units, and Parameter Types</strong></p>\n\n<p>The new time series may have different parameter, unit, and/or parameter than the old time series:</p>\n\n<ul>\n<li><code>Count</code>:\n<ul>\n<li><strong>Parameter</strong>: will be \"Count-&lt;old_parameter&gt;\"</li>\n<li><strong>Unit</strong>: will be \"unit\"</li>\n<li><strong>Parameter Type</strong>: will be Total (CWMS: Total, DSS: PER-CUM)</li>\n</ul></li>\n<li><code>Maximum</code>\n<ul>\n<li><strong>Parameter Type</strong>: will be Maximum (CWMS: Max, DSS: PER-MAX)</li>\n</ul></li>\n<li><code>Minimum</code>\n<ul>\n<li><strong>Parameter Type</strong>: will be Minimum (CWMS: Min, DSS: PER-MIN)</li>\n</ul></li>\n<li><code>Integrate</code>:\n<ul>\n<li><strong>Parameter</strong>: will be the integration parameter returned by <a href=\"#TimeSeries.get_integration_parameter\">get_integration_parameter()</a></li>\n<li><strong>Unit</strong>: will be the unit of the parameter returned by <a href=\"#TimeSeries.get_integration_parameter\">get_integration_parameter()</a>, which preserves the unit system of the old time series</li>\n</ul></li>\n<li><code>Average</code>\n<ul>\n<li><strong>Parameter Type</strong>: will be Average (CWMS: Ave, DSS: PER-AVER)</li>\n</ul></li>\n<li><code>Volume</code>:\n<ul>\n<li><strong>Parameter</strong>: will be \"Volume\"</li>\n<li><strong>Unit</strong>: will be \"ft3\" or \"m3\" depending on the unit system of the old time series</li>\n</ul></li>\n</ul>\n\n<p><a name=\"restrictions\"></a>\n<strong>Restrictions</strong></p>\n\n<p>Not all continuous resample operations can be performed on all time series.</p>\n\n<ul>\n<li><code>Integrate</code>:\n<ul>\n<li>May be performed only on time series with integrable base parameters. Use <a href=\"parameter.html#Parameter.integrable_base_parameters\">Parameter.integrable_base_parameters()</a> to\nlist the integrable base parameters.</li>\n<li>May be performed only on Instantaneous, Average, or constant time series (CWMS: Inst, Ave, Const, DSS: INST-VAL, INST-CUM, PER-AVER)</li>\n</ul></li>\n<li><code>Accumulate</code>:\n<ul>\n<li>May be performed only on time series with accumulatable base parameters. Use <a href=\"parameter.html#Parameter.accumulatable_base_parameters\">Parameter.accumulatable_base_parameters()</a> to\nlist the accumulatable base parameters.</li>\n<li>May be performed only on Instantaneous, Average, or Total time series (CWMS: Inst, Ave, Total, DSS: INST-VAL, INST-CUM, PER-CUM)</li>\n</ul></li>\n<li><code>Volume</code>:\n<ul>\n<li>May be performed only on Instantaneous, Average, or Constant time series (CWMS: Inst, Ave, Const, DSS: INST-VAL, INST-CUM, PER-AVER) with base parameter of \"Flow\"</li>\n</ul></li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>operation (str):</strong>  The resample operation to perform. Must be one of <code>Count</code>, <code>Maximum</code>, <code>Minimum</code>, <code>Previous</code>, <code>Interpolate</code>, <code>Integrate</code>, <code>Average</code>, <code>Accumulate</code>, or <code>Volume</code> or a unique\nbeginning portion (case insensitive). 'c' is interpeted as <code>Count</code>, but 'INT' is ambiguous between <code>Interpolate</code> and <code>Integrate</code>.</li>\n<li><strong>interval (Optional[Union[&quot;TimeSeries&quot;, TimeSpan, timedelta]]):</strong>  The interval or time pattern to resample onto. If None, the old interval is used. Otherwise the following\ncan be used:\n<ul>\n<li><a href=\"interval.html#Interval\"><code>Interval</code></a>: resample onto a standard regular or local-regular interval</li>\n<li><a href=\"timespan.html#TimeSpan\"><code>TimeSpan</code></a> or <code>timedelta</code>: resample onto non-standard regular interval</li>\n<li><a href=\"#TimeSeries\"><code>TimeSeries</code></a>: resample onto an irregular time interval\nDefaults to None.</li>\n</ul></li>\n<li><strong>offset (Optional[Union[int, TimeSpan, timedelta]]):</strong>  Offset into <code>interval</code> for each new time. If specified as an int, the value is in minutes. None is the\nsame as specifying <code>0</code>, <code>TimeSpan(\"PT0S\")</code>, or <code>timedelta(seconds=0)</code>. Defaults to None</li>\n<li><strong>start_time (Optional[Union[HecTime, datetime, str]]):</strong>  Start time of the new time series. None specifies the same start time as the old time sereies. Defaults to None.</li>\n<li><strong>end_time (Optional[Union[HecTime, datetime, str]]):</strong>  End time of the new time series. None specifies the same end time as the old time sereies. Defaults to None.</li>\n<li><strong>max_missing_percent (float, optional):</strong>  The maximum amount of time in each new interval that can be invalid or missing and still perform the resample operation for that interval.\nIf the old time series is regular interval, this is approximately equivalent to the max percent of points that can be invalid or missing. If more than this amount of time\nis invalid or missing in any new interval, the value for that interval will be set to missing. Defaults to 25.0.</li>\n<li><strong>entire_interval (Optional[bool]):</strong>  <em>Used only for discreet resample operations (except <code>Previous</code>)</em>. Specifies whether to require each old interval to begin and end in the new\ninterval in order to be considered (True) or to allow all old intervals that end in the new interval (False). If None, each old interval is required toe begin and end in the new interval\nfor all data types except Instantaneous (CWMS: Inst, DSS: INST-VAL, INST-CUM). Defaults to None.</li>\n<li><strong>before (Union[str, float], optional):</strong>  <em>Used only for time patterns</em>. Specfies the value for new points (points in the time pattern) that are prior to the beginning of the old time series.\n<ul>\n<li><strong>float</strong>: The floating point value to set the new points to.</li>\n<li><strong>str</strong>: May be one of\n<ul>\n<li>\"FIRST\": sets the new values to the first value in the old time series</li>\n<li>\"MISSING\": sets the new values to missing\nDefaults to 0.0.</li>\n</ul></li>\n</ul></li>\n<li><strong>after (Union[str, float], optional):</strong>  <em>Used only for time patterns</em>. Specfies the value for new points (points in the time pattern) that are after to the end of the old time series.\n<ul>\n<li><strong>float</strong>: The floating point value to set the new points to.</li>\n<li><strong>str</strong>: May be one of\n<ul>\n<li>\"LAST\": sets the new values to the last value in the old time series</li>\n<li>\"MISSING\": sets the new values to missing\nDefaults to \"LAST\".</li>\n</ul></li>\n</ul></li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to resample onto this time series (True) or onto a new time series (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong> <br>\n<ul>\n<li>on time series with no data</li>\n<li>on time series with no parameter type</li>\n<li>on invalid <code>operation</code> parameter (matches zero or more than one)</li>\n<li>on invalid <code>before</code> paremeter</li>\n<li>on invalid <code>after</code> parameter</li>\n<li>on empty pattern time series</li>\n<li>on attempt perform invalid continuous resample operation (see <a href=\"#restrictions\">Restrictions</a>) above</li>\n</ul></li>\n<li><strong>TypeError:</strong> <br>\n<ul>\n<li>on unexpected <code>interval</code> type parameter</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The resampled time series, whether this one or a new one.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">operation</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">start_time</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end_time</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_missing_percent</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">25.0</span>,</span><span class=\"param\">\t<span class=\"n\">entire_interval</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">before</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">after</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;LAST&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.round_off", "modulename": "hec", "qualname": "TimeSeries.round_off", "kind": "function", "doc": "<p>Return a time series whose values are rounded according to the parameters.</p>\n\n<table>\n<tr><th>value</th><th>precision</th><th>tens_place></th><th>result</th></tr>\n<tr><td>123456.789</td><td>5</td><td>0</td><td>123460.0</td></tr>\n<tr><td>123456.789</td><td>7</td><td>-1</td><td>123456.8</td></tr>\n<tr><td>123456.789</td><td>7</td><td>0</td><td>123457.0</td></tr>\n<tr><td>123456.789</td><td>7</td><td>1</td><td>123460.0</td></tr>\n</table>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>precision (int):</strong>  The maximum number of significant digits to use.</li>\n<li><strong>tens_place (int):</strong>  The lowest power of 10 to have a non-zero value.</li>\n<li><strong>in_place (bool, optional):</strong>  Modify and return this object if True, otherwise modify\nand return a copy of this object. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">precision</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">tens_place</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.screen_with_constant_value", "modulename": "hec", "qualname": "TimeSeries.screen_with_constant_value", "kind": "function", "doc": "<p>Screens a time series - either this one or a copy of this one - setting values and/or quality codes\nwhere the value changes over a specified duration are below specified limits.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>duration (Union[Duration, str]):</strong>  The duration over which to screen the value changes. May be a\n<a href=\"duration.html#Duration\"><code>Duration</code></a> object or the name of a valid duration (e.g., '6Hours', '1Day', ...).</li>\n<li><strong>missing_limit (float, optional):</strong>  The mininum value change over the duration that is not flagged as missing. Values flagged as missing also have the value modified to math.nan. Defaults to math.nan (test not performed).</li>\n<li><strong>reject_limit (float, optional):</strong>  The mininum non-missing value change over the duration that is not flagged as rejected. Defaults to math.nan (test not performed).</li>\n<li><strong>question_limit (float, optional):</strong>  The mininum non-rejected, non-missing value change over the duration that is not flagged as questionable. Defaults to math.nan (test not performed).</li>\n<li><strong>min_threshold (float, optional):</strong>  Values less than this will not be screened. Defaults to math.nan (test not performed)</li>\n<li><strong>percent_valid_required (float, optional):</strong>  The minimum percent (0..100) of valid values in the duration that will allow the value to be screened. Defaults to math.nan (test not performed).\nDefaults to math.nan. Values are invalid if any of the following are true:\n<ul>\n<li>The quality is MISSING</li>\n<li>The quality is REJECTED</li>\n<li>The value is NaN</li>\n<li>The value is Infinite</li>\n</ul></li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to modify this time series (True) or a copy of it. Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If any of the following are true:\n<ul>\n<li>The time series has fewer than two values to be screened.</li>\n<li>If <code>percent_valid_required</code> is not in the range 0..100</li>\n<li>If the non-NaN limits are not in the following increasing-value order:\n<ul>\n<li><code>missing_limit</code></li>\n<li><code>reject_limit</code></li>\n<li><code>question_limit</code></li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The screened time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">duration</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">duration</span><span class=\"o\">.</span><span class=\"n\">Duration</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">missing_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">min_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">percent_valid_required</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.screen_with_duration_magnitude", "modulename": "hec", "qualname": "TimeSeries.screen_with_duration_magnitude", "kind": "function", "doc": "<p>Screens a time series - either this one or a copy of this one - setting values and/or quality codes\nwhere the accumulated values over a specified duration are outside the specified range.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>duration (Union[Duration, str]):</strong>  The duration over which to screen the accumulated values. May be a\n<a href=\"duration.html#Duration\"><code>Duration</code></a> object or the name of a valid duration (e.g., '6Hours', '1Day', ...). Accumulations for durations that are not even multiples\nof regular time series intervals may be used. Irregular time series may also be screened. The end of the duration is always positioned at the time (assumed to be EOP) of\nthe accumulation to be screened. If the beginning of the duration does not align with a data time in the time series, a fraction of the first interval's accumulation is used.\nOnly EOP durations may be used.</li>\n<li><strong>min_missing_limit (float, optional):</strong>  The minimum accumulation over the duration that is not flagged as missing. Values flagged as missing also have the value modified to math.nan. Defaults to <code>math.nan</code> (test disabled).</li>\n<li><strong>min_reject_limit (float, optional):</strong>  The minimum non-missing accumulation over the duration that is not flagged as rejected. Defaults to <code>math.nan</code> (test disabled).</li>\n<li><strong>min_question_limit (float, optional):</strong>  The minimum non-rejected, non-missing accumulation over the duration that is not flagged as questioned. Defaults to <code>math.nan</code> (test disabled).</li>\n<li><strong>max_question_limit (float, optional):</strong>  The maximum non-rejected, non-missing accumulation over the duration that is not flagged as questioned. Defaults to <code>math.nan</code> (test disabled).</li>\n<li><strong>max_reject_limit (float, optional):</strong>  The maximum non-missing accumulation over the duration that is not flagged as rejected. Defaults to <code>math.nan</code> (test disabled).</li>\n<li><strong>max_missing_limit (float, optional):</strong>  The maximum accumulation over the duration that is not flagged as missing. Values flagged as missing also have the value modified to math.nan. Defaults to <code>math.nan</code> (test disabled).</li>\n<li><strong>percent_valid_required (float, optional):</strong>  The minimum percent (0..100) of valid values in the accumulation that will allow the value to be screened. Defaults to 0.\nValues are invalid if any of the following are true:\n<ul>\n<li>The quality is MISSING</li>\n<li>The quality is REJECTED</li>\n<li>The value is NaN</li>\n<li>The value is Infinite</li>\n</ul></li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to modify this time series (True) or a copy of it. Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If any of the following are true:\n<ul>\n<li>The time series has fewer than two values to be screened.</li>\n<li>If <code>percent_valid_required</code> is not in the range 0..100</li>\n<li>If the non-NaN limits are not in the following increasing-value order:\n<ul>\n<li><code>min_missing_limit</code></li>\n<li><code>min_reject_limit</code></li>\n<li><code>min_question_limit</code></li>\n<li><code>max_question_limit</code></li>\n<li><code>max_reject_limit</code></li>\n<li><code>max_missing_limit</code></li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The screened time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">duration</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">duration</span><span class=\"o\">.</span><span class=\"n\">Duration</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">min_missing_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">min_reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">min_question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">max_question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">max_reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">max_missing_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">percent_valid_required</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.screen_with_forward_moving_average", "modulename": "hec", "qualname": "TimeSeries.screen_with_forward_moving_average", "kind": "function", "doc": "<p>Screens a time series - either this one or a copy of this one - setting values and/or quality codes where the value differ from\nthose of a forward moving averge of the time series by a specified amount.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>window (int):</strong>  The number of values to average over. See <a href=\"#TimeSeries.forward_moving_average\"><code>forward_moving_average()</code></a> for more info.</li>\n<li><strong>only_valid (bool):</strong>  Specifies whether to only average over windows where every value is\nvalid. See <a href=\"#TimeSeries.forward_moving_average\"><code>forward_moving_average()</code></a> for more info.</li>\n<li><strong>use_reduced (bool):</strong>  Specifies whether to allow averages using less than window number\nof values will be computed at the beginning of the times series. See <a href=\"#TimeSeries.forward_moving_average\"><code>forward_moving_average()</code></a> for more info.</li>\n<li><strong>diff_limit (float):</strong>  The maximum difference between a value and the value at the same time in the forward moving average\nthat will not be flagged as questionable, rejected, or missing. See <a href=\"#TimeSeries.forward_moving_average\"><code>forward_moving_average()</code></a> for more info.</li>\n<li><strong>failed_validity (str, optional):</strong>  Specifies the validity portion of the quality code for failed values\nMust be one of \"M\" (Missing), \"R\" (Rejected) or \"Q\" (Questionable). Values flagged as missing also have the value modified to math.nan.\nDefaults to \"M\".</li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to modify this time series (True) or a copy of it. Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If any of the following are true:\n<ul>\n<li>The time series has no data</li>\n<li>The window is invalid</li>\n<li><code>failed_validity</code> is not one of \"M\", \"R\", or \"Q\"</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The screened time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">window</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">only_valid</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">use_reduced</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">diff_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">failed_validity</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;M&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.screen_with_value_change_rate", "modulename": "hec", "qualname": "TimeSeries.screen_with_value_change_rate", "kind": "function", "doc": "<p>Screens a time series - either this one or a copy of this one - settting the quality codes to\n\"Okay\", \"Missing\", \"Questionable\" or \"Rejected\" based on specified criteria about the rate of change.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>min_reject_limit (float, optional):</strong>  The minimum change per minute from one value to the next (increasing or decreasing) that is not flagged as rejected. Defaults to <code>math.nan</code> (test disabled).</li>\n<li><strong>min_question_limit (float, optional):</strong>  The minimum non-rejected change per minute  from one value to the next (increasing or decreasing) that is not flagged as questioned. Defaults to <code>math.nan</code> (test disabled).</li>\n<li><strong>max_question_limit (float, optional):</strong>  The maximum non-rejected change per minute  from one value to the next (increasing or decreasing) that is not flagged as questioned. Defaults to <code>math.nan</code> (test disabled).</li>\n<li><strong>max_reject_limit (float, optional):</strong>  The maximum change per minute  from one value to the next (increasing or decreasing) that is not flagged as rejected. Defaults to <code>-ath.nan</code> (test disabled).</li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to modify and return this time series (True) or a copy of this\ntime series (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If this time series has no data, or if:\n<ul>\n<li><code>min_reject_limit</code> (if not <code>math.nan</code>) is not less than <code>min_question_limit</code> (if not <code>math.nan</code>) or <code>max_reject_limit</code> (if not <code>math.nan</code>)</li>\n<li><code>min_question_limit</code> (if not <code>math.nan</code>) is not less than <code>max_question_limit</code> (if not <code>math.nan</code>) or <code>max_reject_limit</code> (if not <code>math.nan</code>)</li>\n<li><code>max_question_limit</code> (if not <code>math.nan</code>) is not less thatn <code>max_reject_limit</code> (if not <code>math.nan</code>)</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The screened time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">min_reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">min_question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">max_question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">max_reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.screen_with_value_range", "modulename": "hec", "qualname": "TimeSeries.screen_with_value_range", "kind": "function", "doc": "<p>Screens a time series - either this one or a copy of this one - settting the quality codes to\n\"Okay\", \"Missing\", \"Questionable\" or \"Rejected\" based on specified criteria about the value magnitudes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>min_reject_limit (float, optional):</strong>  The minimum value that is not flagged as rejected. Defaults to <code>-math.nan</code> (test disabled).</li>\n<li><strong>min_question_limit (float, optional):</strong>  The minium non-rejected value that is flagged as questionable. Defaults to <code>-math.nan</code> (test disabled).</li>\n<li><strong>max_question_limit (float, optional):</strong>  The maxium non-rejected value that is flagged as questionable. Defaults to <code>-math.nan</code> (test disabled).</li>\n<li><strong>max_reject_limit (float, optional):</strong>  The minimum value that is not flagged as rejected. Defaults to <code>-math.nan</code> (test disabled).</li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to modify and return this time series (True) or a copy of this\ntime series (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If this time series has no data, or if:\n<ul>\n<li><code>min_reject_limit</code> (if not <code>math.nan</code>) is not less than <code>min_question_limit</code> (if not <code>math.nan</code>) or <code>max_reject_limit</code> (if not <code>math.nan</code>)</li>\n<li><code>min_question_limit</code> (if not <code>math.nan</code>) is not less than <code>max_question_limit</code> (if not <code>math.nan</code>) or <code>max_reject_limit</code> (if not <code>math.nan</code>)</li>\n<li><code>max_question_limit</code> (if not <code>math.nan</code>) is not less than <code>max_reject_limit</code> (if not <code>math.nan</code>)</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The screened time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">min_reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">min_question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">max_question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">max_reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.screen_with_value_range_or_change", "modulename": "hec", "qualname": "TimeSeries.screen_with_value_range_or_change", "kind": "function", "doc": "<p>Screens a time series - either this one or a copy of this one - setting values and/or quality codes\nwhere the values are outside the specified range or differ more than the specified change.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>min_limit (float):</strong>  The minimum valid value. Values below this value will have their values and/or quality codes changed.\nDefaults to <code>math.nan</code> (test disabled).</li>\n<li><strong>max_limit (float):</strong>  The maximum valid value. Values above this value will have their values and/or quality codes changed.\nDefaults to <code>math.nan</code> (test disabled).</li>\n<li><strong>change_limit (float):</strong>  The maxium valid change from one value to the next. Values whose change (either increasing or decreasing)\nis greater that is will have their values and/or quality codes changed. Defaults to <code>math.nan</code> (test disabled).</li>\n<li><strong>replace_invalid_value (bool, optional):</strong>  Replace screened-out values with the specified value. Defaults to True.</li>\n<li><strong>invalid_value_replacement (float, optional):</strong>  The value to replace screen-out values with if <code>replace_invalid_value=True</code>.\nDefaults to <code>math.nan</code> (missing value).</li>\n<li><strong>invalid_validity (str, optional):</strong>  Specifies the validity component of the quality code for screened-out values.\nMay be \"M\" (Missing), \"Q\" (Questionable), or \"R\" (Rejected). Values flagged as missing also have the value modified to math.nan.\nDefaults to \"M\".</li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to modify and return this time series (True) or a copy of this\ntime series (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data or f <code>invalid_validity</code> (if specified) is not 'M', 'Q', or 'R'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The screened time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">min_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">max_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">change_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">replace_invalid_value</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">invalid_value_replacement</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">invalid_validity</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;M&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.select", "modulename": "hec", "qualname": "TimeSeries.select", "kind": "function", "doc": "<p>Marks individual items in this object - or a copy of this object - as selected for pariticpation the next operation,\neither directly or by combining each item's current selected state with the result of a function.\nOn creation the selection is cleared (i.e., every item is selected)</p>\n\n<p>This object's selection_state property determines the selection of this object after the next operation:</p>\n\n<ul>\n<li><code>SelectionState.TRANSIENT</code>: (default) The selection will be cleared after the next operation.</li>\n<li><code>SelectionState.DURABLE</code>: The selection will remain until explicitly changed by a call to iselect()</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>selection (Union[Select, int, slice, Callable[[TimeSeriesValue], bool]]):</strong>  One of the following:\n<ul>\n<li><code>Select.NONE</code>: Marks all items as unselected. Any <code>combination</code> is ignored.</li>\n<li><code>Select.ALL</code>: Marks all items as selected. Any <code>combination</code> is ignored.</li>\n<li><code>Select.INVERT</code>: Inverts the current selected state of each item. Any <code>combination</code> is ignored.</li>\n<li>integer: An integer offset from the beginning of the time series</li>\n<li><code>HecTime</code> object: single item matching specified time</li>\n<li>datetime object: single item matching specified time</li>\n<li>string convertible to HecTime object: : single item matching specified time</li>\n<li>slice: One or more items.\n<ul>\n<li>The start parameter (if specified) and stop parameter may be:\n<ul>\n<li>integers - offsets from the first value in the time series</li>\n<li><code>HecTime</code> objects</li>\n<li>datetime objects</li>\n<li>strings convertible to HecTime objects</li>\n</ul></li>\n<li>The step parameter must be an integer, if specified</li>\n</ul></li>\n<li>function: A function that takes a single <code>TimeSeriesValue</code> parameter and returns a bool result.\nAn item is marked as selected if and only if the result of the function is True for the item (when combined with the current state if necessary).</li>\n</ul></li>\n<li><strong>combination (Combine, optional):</strong>  Specifies how to combine the function result with an item's current selected state.\nUsed when <code>selection</code> is not one of eh <code>Select</code> values. Defaults to Combine.REPLACE.\n<ul>\n<li><code>Combine.REPLACE</code>: Current selected state of each item is ignored and is replaced by the result of the function.</li>\n<li><code>Combine.AND</code>: Current selected state of each item is ANDed with the result of the function to generate new selected state.</li>\n<li><code>Combine.OR</code>: Current selected state of each items is ORed with the result of the function to generate new selected state.</li>\n<li><code>Combine.XOR</code>: Current selected state of each item is XORed with the result of the function to generate new selected state.</li>\n</ul></li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to mark itmes in this object (True) or a copy of this object (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If this object has no data</li>\n<li><strong>ValueError:</strong>  If an invalid selection or combination is specified.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The marked object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">selection</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">Select</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeriesValue</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">combination</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">Combine</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Combine</span><span class=\"o\">.</span><span class=\"n\">REPLACE</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.select_valid", "modulename": "hec", "qualname": "TimeSeries.select_valid", "kind": "function", "doc": "<p>Marks individual items in this object - or a copy of this object - as selected for pariticpation the next operation based on whether\nthe items are valid. Items are valid unless any of the following are true:</p>\n\n<ul>\n<li>The quality is MISSING</li>\n<li>The quality is REJECTED</li>\n<li>The value is NaN</li>\n<li>The value is Infinite</li>\n</ul>\n\n<p>This selection replaces any other selection - if it is to be combined with other selection criteria\nit must be performed before the other criteria</p>\n\n<p>This object's selection_state property indicates/determines whether the selection is cleared af the next operation (via\nan automatic ts.select(Select.NONE)) or maintained until explicitly modified.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to mark itmes in this object (True) or a copy of this object (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If this object has no data</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The marked object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.selected", "modulename": "hec", "qualname": "TimeSeries.selected", "kind": "variable", "doc": "<p>The current selection (empty if all items are selected)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": list[bool]"}, {"fullname": "hec.TimeSeries.selection_state", "modulename": "hec", "qualname": "TimeSeries.selection_state", "kind": "variable", "doc": "<p>The persistence state of selections in this object.</p>\n\n<p>The default selection_state of <a href=\"./const.html#SelectionState\">SelectionState.TRANSIENT</a></p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": hec.const.SelectionState"}, {"fullname": "hec.TimeSeries.set_duration", "modulename": "hec", "qualname": "TimeSeries.set_duration", "kind": "function", "doc": "<p>Sets the Duration for this time series, or a copy of it, and returns the modified time series</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[Duration, str]):</strong>  * Interval: The Duration object to use\n<ul>\n<li>str: The duration name</li>\n<li>int: The (actual or characteristic) number of minutes for the duration</li>\n</ul></li>\n<li><strong>in_place (bool):</strong>  Specifies whether to modify and return this time series (True) or a copy of this\ntime series. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modified time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">duration</span><span class=\"o\">.</span><span class=\"n\">Duration</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.set_interval", "modulename": "hec", "qualname": "TimeSeries.set_interval", "kind": "function", "doc": "<p>Sets the interval for this time series, or a copy of it, and returns the modified time series</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[Interval, str]):</strong>  * Interval: The Interval object to use\n<ul>\n<li>str: The interval name</li>\n<li>int: The (actual or characteristic) number of minutes for the interval</li>\n</ul></li>\n<li><strong>in_place (bool):</strong>  Specifies whether to modify and return this time series (True) or a copy of this\ntime series. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modified time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.set_location", "modulename": "hec", "qualname": "TimeSeries.set_location", "kind": "function", "doc": "<p>Sets the location for this time series or a copy of it and returns the modified time series</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[Location, str]):</strong>  * Location: The Location object to use\n<ul>\n<li>str: The location name (may be in the format &lt;<em>office</em>&gt;/&lt;<em>location</em>&gt; to set office)</li>\n</ul></li>\n<li><strong>in_place (bool):</strong>  Specifies whether to modify and return this time series (True) or a copy of this\ntime series. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modified time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">location</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.set_parameter", "modulename": "hec", "qualname": "TimeSeries.set_parameter", "kind": "function", "doc": "<p>Sets the parameter for this time series or a copy of it, and returns the modified time series</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[Parameter, str]):</strong>  * Parameter: The Parameter object to use\n<ul>\n<li>str: The parameter name - the unit will be set to the default English unit</li>\n</ul></li>\n<li><strong>in_place (bool):</strong>  Specifies whether to modify and return this time series (True) or a copy of this\ntime series. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modified time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">Parameter</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.set_parameter_type", "modulename": "hec", "qualname": "TimeSeries.set_parameter_type", "kind": "function", "doc": "<p>Sets the parameter type for this time series, or a copy of it, and returns the modified time series</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[ParameterType, str]):</strong>  * ParameterType: The ParameterType object to use\n<ul>\n<li>str: The parameter type name</li>\n</ul></li>\n<li><strong>in_place (bool):</strong>  Specifies whether to modify and return this time series (True) or a copy of this\ntime series. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">ParameterType</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.set_protected", "modulename": "hec", "qualname": "TimeSeries.set_protected", "kind": "function", "doc": "<p>Sets the quality protection bit of selected items of this time series - or a copy of it - and\nreturns the modified time series.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to modify and return this time series (True)\nor a copy of this time series (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modidified time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.set_unprotected", "modulename": "hec", "qualname": "TimeSeries.set_unprotected", "kind": "function", "doc": "<p>Un-sets the quality protection bit of selected items of this time series - or a copy of it - and\nreturns the modified time series.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to modify and return this time series (True)\nor a copy of this time series (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modidified time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.set_quality", "modulename": "hec", "qualname": "TimeSeries.set_quality", "kind": "function", "doc": "<p>Sets the quality of selected items of this object or a copy of this object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>quality:</strong>  Union[Quality, int]: The quality to set for selected items</li>\n<li><strong>in_place (bool):</strong>  Specifies whether to set the values in this object\n(True) or a copy of this object (False)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">quality</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.set_slice_stop_exclusive", "modulename": "hec", "qualname": "TimeSeries.set_slice_stop_exclusive", "kind": "function", "doc": "<p>Set the default slicing behavior of new TimeSeries objects</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (bool, optional):</strong>  Defaults to True.\n<ul>\n<li><code>True</code>: python behavior (stop value is excluded)</li>\n<li><code>False</code>: DataFrame behavior (stop value is included)</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.set_slice_stop_inclusive", "modulename": "hec", "qualname": "TimeSeries.set_slice_stop_inclusive", "kind": "function", "doc": "<p>Set the default slicing behavior of new TimeSeries objects</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (bool, optional):</strong>  Defaults to True.\n<ul>\n<li><code>True</code>: DataFrame behavior (stop value is included)</li>\n<li><code>False</code>: python behavior (stop value is excluded)</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.set_unit", "modulename": "hec", "qualname": "TimeSeries.set_unit", "kind": "function", "doc": "<p>Sets the parameter unit for this time series, or a copy of it, and returns the modified time series.</p>\n\n<p><strong>NOTE</strong>: This does <em>not</em> modify any data values. Use the <a href=\"#TimeSeries.ito\">ito()</a> method\nto modify data, which also sets the unit.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[Unit, str]):</strong>  <ul>\n<li>Unit: The Unit object or name to use</li>\n<li>str: The unit name</li>\n</ul></li>\n\n<p><li><strong>in_place (bool):</strong>  Specifies whether to modify and return this time series (True) or a copy of this\ntime series. Defaults to False.</li></p>\n\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n\n<p><p>TimeSeries: The modified time series</p>\n</blockquote></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.set_value", "modulename": "hec", "qualname": "TimeSeries.set_value", "kind": "function", "doc": "<p>Sets the value of selected items of this object or a copy of this object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (float):</strong>  The value to set for selected items</li>\n<li><strong>in_place (bool):</strong>  Specifies whether to set the values in this object\n(True) or a copy of this object (False)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.set_value_quality", "modulename": "hec", "qualname": "TimeSeries.set_value_quality", "kind": "function", "doc": "<p>Sets the value and quality of selected items of this object or a copy of this object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (float):</strong>  The value to set for selected items</li>\n<li><strong>quality:</strong>  Union[Quality, int]: The quality to set for selected items</li>\n<li><strong>in_place (bool):</strong>  Specifies whether to set the values in this object\n(True) or a copy of this object (False)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">quality</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.set_vertical_datum_info", "modulename": "hec", "qualname": "TimeSeries.set_vertical_datum_info", "kind": "function", "doc": "<p>Sets the vertical datum info for this time series, or a copy  of it, and returns the modified time series</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[str, dict[str, Any]]):</strong>  <ul>\n<li>str: the vertical datum info as an XML string\n<li>dict: the vertical datum info as a dictionary</li>\n</ul></li>\n\n<p><li><strong>in_place (bool):</strong>  Specifies whether to modify and return this time series (True) or a copy of this\ntime series. Defaults to False.</li></p>\n\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n\n<p><li><strong>TimeSeriesException:</strong>  If the base parameter is not \"Elev\"</li></p>\n\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n\n<p><p>TimeSeries: The modified time series</p>\n</blockquote></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.slice_stop_exclusive", "modulename": "hec", "qualname": "TimeSeries.slice_stop_exclusive", "kind": "variable", "doc": "<p>Whether the <code>stop</code> portion of <code>[start:stop]</code> slicing is exclusive for this object.</p>\n\n<ul>\n<li>If <code>True</code>, the slicing TimeSeries objects follows Python rules, where <code>stop</code>\nspecifies the lowest index not included.</li>\n<li>If <code>False</code>, the slicing of TimeSeries objects follows pandas.DataFrame rules,\nwhere <code>stop</code> specifies the highest index included.</li>\n</ul>\n\n<p>The default value is determined by the class state, which defaults to <code>True</code>, but\ncan be set by calling <a href=\"#TimeSeries.set_slice_stop_exclusive\">set_slice_stop_exclusive()</a> or\n<a href=\"#TimeSeries.set_slice_stop_inclusive\">set_slice_stop_inclusive()</a> before creating a\nTimeSeries object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.TimeSeries.snap_to_regular", "modulename": "hec", "qualname": "TimeSeries.snap_to_regular", "kind": "function", "doc": "<p>Modifies and returns a time series (either this one or a copy of this one) by snapping values to a specified regular interval\n(with an optional interval offset) and setting the interval to the one specified.</p>\n\n<ul>\n<li>Only values within the <code>forward</code> and <code>backward</code> time spans around the new interval/offset will be included in the modified time series</li>\n<li>If multiple values in the source time series are within the <code>forward</code> and <code>backward</code> time spans:\n<ul>\n<li>If some values are protected and others unprotected, the protected value closest to the snapping time is used.</li>\n<li>If all or none of the values are protected:\n<ul>\n<li>If some values are valid and others invalid the valid value closest to the snapping time is used.</li>\n<li>If all or none of the values are valid, the value closest to the snapping time is used.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p>This method does not respect selections. To snap based on a selection, first use the <a href=\"#TimeSeries.filter\"><code>filter()</code></a> or\n<a href=\"#TimeSeries.ifilter\"><code>ifilter()</code></a> method to genrate a time series from the selected values.</p>\n\n<p>The resulting time series is always a regular time series, but if the time series has an attached time zone and <code>interval</code> is an\n<a href=\"./interval.html#Interval\"><code>Interval</code></a> object with the <a href=\"./interval.html#Interval.is_local_regular\"><code>is_local_regular</code></a> property of True, then the resulting time series will be a Local Regular Time Series (LRTS).</p>\n\n<p>The resulting time series will be a collapsed time series, with no values at times for which no values in the original time series\nwere within the <code>forward</code> and <code>backward</code> time spans. The <a href=\"#TimeSeries.expand\"><code>expand()</code></a> method may be used to expand the collapsed time series.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>interval (Union[Interval, str]):</strong>  The new interval</li>\n<li><strong>offset (Optional[Union[TimeSpan, timedelta, str]]):</strong>  The offset into the interval to snap the vlues to. Defaults to None.</li>\n<li><strong>backward (Optional[Union[TimeSpan, timedelta, str]]):</strong>  The time span prior to the interval/offset to accept values from.\nDefaults to None.</li>\n<li><strong>forward (Optional[Union[TimeSpan, timedelta, str]]):</strong>  The time span after the interval/offset to accept values from.\nDefaults to None.</li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to modify this time series (True) or a copy of it (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the specified interval is not a valid regular interval for the context of the time series. E.g., an\nirregular interval or a DSS-only regluar interval is specified for a CWMS time series</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modified time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">backward</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">forward</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.time_derivative", "modulename": "hec", "qualname": "TimeSeries.time_derivative", "kind": "function", "doc": "<p>Returns a time series whose values are the differences of successive values in this time series divided\nby the number of minutes between the times of the values.</p>\n\n<p>A missing value at a specific time in the source time series will cause the value at that\nand the next time in the result time sereies to be missing.</p>\n\n<p>If a selection is present, all non-selected items are set to missing before the\naccumulation is computed. They remain missing in the retuned time series.</p>\n\n<p><strong>Restrictions</strong>\n    * May be performed only on time series with differentiable base parameters. Use <a href=\"parameter.html#Parameter.differentiable_base_parameters\">Parameter.differentiable_base_parameters()</a> to\n      list the accumulatable base parameters.</p>\n\n<p>See <a href=\"parameter.html#base_parameter_definitions\">base_parameter_definitions</a> for information on base parameters and their conversions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>in_place (bool, optional):</strong>  If True, this object is modified and retured, otherwise\na copy of this object is modified and returned.. Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The time series of time-based differences</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.time_zone", "modulename": "hec", "qualname": "TimeSeries.time_zone", "kind": "variable", "doc": "<p>The time zone of the data</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.TimeSeries.times", "modulename": "hec", "qualname": "TimeSeries.times", "kind": "variable", "doc": "<p>The times as a list of strings (empty if there is no data). Items are formatted as yyyy&#8209;mm&#8209;dd&nbsp;hh:mm:ss([+|&#8209;]hh:mm)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": list[str]"}, {"fullname": "hec.TimeSeries.to", "modulename": "hec", "qualname": "TimeSeries.to", "kind": "function", "doc": "<p>Converts this object - or a copy of this object - to another unit, parameter, or vertical datum</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit_parameter_or_datum (Union[str, Unit, Parameter]):</strong>  The unit, parameter or vertical datum to convert to</li>\n<li><strong>in_place (bool, optional):</strong>  Whether to convert this object (True) or a copy of this object (False).\nDefaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If setting the vertical datum on a non Elev parameter or an Elev parameter\nwithout vertical datum information</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The converted object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">unit_parameter_or_datum</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">Parameter</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.to_irregular", "modulename": "hec", "qualname": "TimeSeries.to_irregular", "kind": "function", "doc": "<p>Sets a time series (either this one or a copy of this one) to a specified irregular interval, and returns\nthe modified time series. The times of the data values are not changed.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>interval (Union[Interval, str]):</strong>  The irregular interval to set the time series to.</li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to modify this time series (True) or a copy of it (False).\nDefaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the specified interval is not a valid irregular interval for the\ncontext of the time series (e.g., a regular interval or a DSS-only irregular interval\nfor a CWMS time series)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modified time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.trim", "modulename": "hec", "qualname": "TimeSeries.trim", "kind": "function", "doc": "<p>Trims a regular time series (either this one or a copy of this one), removing all missing values from the beginning and\nend of the time series unless they are either protected or marked as part of the current selection.</p>\n\n<p>Irregular time series (including pseudo-regular time series) are not affected.</p>\n\n<p>Does not alter any selection, even if selection state is <code>SelectionState.TRANSIENT</code>. Selected items remain\nselected after trim even though their location in the data may change.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to trim this time series (True) or a copy of this time series (False).</li>\n<li>Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The trimmed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeries.tsv", "modulename": "hec", "qualname": "TimeSeries.tsv", "kind": "variable", "doc": "<p>The times, values, and qualities as a list of TimeSeriesValue objects (empty if there is no data)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": list[hec.timeseries.TimeSeriesValue]"}, {"fullname": "hec.TimeSeries.unit", "modulename": "hec", "qualname": "TimeSeries.unit", "kind": "variable", "doc": "<p>The parameter unit object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.TimeSeries.values", "modulename": "hec", "qualname": "TimeSeries.values", "kind": "variable", "doc": "<p>The values as a list of floats (empty if there is no data)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": list[float]"}, {"fullname": "hec.TimeSeries.version", "modulename": "hec", "qualname": "TimeSeries.version", "kind": "variable", "doc": "<p>The version (HEC-DSS F pathname part)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.TimeSeries.version_time", "modulename": "hec", "qualname": "TimeSeries.version_time", "kind": "variable", "doc": "<p>The version date/time</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[hec.hectime.HecTime]"}, {"fullname": "hec.TimeSeries.vertical_datum_info", "modulename": "hec", "qualname": "TimeSeries.vertical_datum_info", "kind": "variable", "doc": "<p>The vertical datum info object or None if not set</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[hec.parameter.ElevParameter._VerticalDatumInfo]"}, {"fullname": "hec.TimeSeries.vertical_datum_info_dict", "modulename": "hec", "qualname": "TimeSeries.vertical_datum_info_dict", "kind": "variable", "doc": "<p>The vertical datum info as a dictionary or None if not set</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[dict[str, Any]]"}, {"fullname": "hec.TimeSeries.vertical_datum_info_xml", "modulename": "hec", "qualname": "TimeSeries.vertical_datum_info_xml", "kind": "variable", "doc": "<p>The vertical datum info as an XML string or None if not set</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.TimeSeries.watershed", "modulename": "hec", "qualname": "TimeSeries.watershed", "kind": "variable", "doc": "<p>The watershed (DSS A pathname part)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.TimeSeriesException", "modulename": "hec", "qualname": "TimeSeriesException", "kind": "class", "doc": "<p>Exception specific to time series operations</p>\n", "bases": "builtins.Exception"}, {"fullname": "hec.TimeSeriesValue", "modulename": "hec", "qualname": "TimeSeriesValue", "kind": "class", "doc": "<p>Holds a single time series value</p>\n"}, {"fullname": "hec.TimeSeriesValue.__init__", "modulename": "hec", "qualname": "TimeSeriesValue.__init__", "kind": "function", "doc": "<p>Initializes a TimeSeriesValue object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>time (Any):</strong>  The time. Must be an HecTime object or <a href=\"./hectime.html#HecTime.__init__\">convertible to an HecTime object</a></li>\n<li><strong>value (Any):</strong>  The value. Must be a UnitQuantity object or <a href=\"./unit.html#UnitQuantity.__init__\">convertible to a UnitQuantity</a> object</li>\n<li><strong>quality (Union[Quality, int], optional):</strong>  The quality code. Must be a Quality object or a valid quality integer. Defaults to 0.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">quality</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span>)</span>"}, {"fullname": "hec.TimeSeriesValue.equals", "modulename": "hec", "qualname": "TimeSeriesValue.equals", "kind": "function", "doc": "<p>Returns whether two TimeSeriesValue objects are equal to the specified strictness.\nIf the strictness indicates comparing the value fields, the comparison can use either of the following for value equality:</p>\n\n<ul>\n<li>normal: equivalent values are considered equal even if they have different units. (e.g., 12 in == 1 ft)</li>\n<li>strict: values must have same magnitude and units to be considered equal</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (object):</strong>  The other TimeSeriesValue object to compare to</li>\n<li><strong>degree (int):</strong>  Specifies how strict to make the comparison. Valid values are:\n<ul>\n<li><code>1</code>: Compares only time fields (same as == operator).</li>\n<li><code>2</code>: Compares only time and value fields with normal value equality.</li>\n<li><code>3</code>: Compares only time and value fields with strict value equality.</li>\n<li><code>4</code>: Compares time, value, and quality fields with normal value equality.</li>\n<li><code>5</code>: Compares time, value, and quality fields with stict value equality.\n<br>Defaults to <code>4</code></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether the time, value, and quality of two TimeSeriesValue objects are equal to the specified strictness.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"nb\">object</span>, </span><span class=\"param\"><span class=\"n\">degree</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSeriesValue.is_valid", "modulename": "hec", "qualname": "TimeSeriesValue.is_valid", "kind": "variable", "doc": "<p>Whether this object is valid. TimeSeriesValues are valid unless any of the following are True:</p>\n\n<ul>\n<li>The quality is MISSING</li>\n<li>The quality is REJECTED</li>\n<li>The value is NaN</li>\n<li>The value is Infinite</li>\n</ul>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.TimeSeriesValue.quality", "modulename": "hec", "qualname": "TimeSeriesValue.quality", "kind": "variable", "doc": "<p>The Quality</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": hec.quality.Quality"}, {"fullname": "hec.TimeSeriesValue.time", "modulename": "hec", "qualname": "TimeSeriesValue.time", "kind": "variable", "doc": "<p>The time</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": hec.hectime.HecTime"}, {"fullname": "hec.TimeSeriesValue.value", "modulename": "hec", "qualname": "TimeSeriesValue.value", "kind": "variable", "doc": "<p>The value</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": hec.unit.UnitQuantity"}, {"fullname": "hec.TimeSpan", "modulename": "hec", "qualname": "TimeSpan", "kind": "class", "doc": "<p>Class to provide generic timespan capabilities that includes both calendar-based and non-calendar-based\nfunctionality. Internal fields are:</p>\n\n<ul>\n<li>years</li>\n<li>months</li>\n<li>days</li>\n<li>hours</li>\n<li>minutes</li>\n<li>seconds</li>\n</ul>\n\n<p><strong>Comparison/Contrast with <code>timedelta</code></strong></p>\n\n<pre>\n<table>\n<tr><th>timedelta</th><th>TimeSpan</th></tr>\n<tr><td><b>Does not </b> support calendar-based\noperations</td><td><b>Does</b> support calendar-based operations</td></tr>\n<tr><td><b>Does</b> have sub-second resolution</td><td><b>Does not</b> have sub-second resolution</td></tr>\n<tr><td>Can <b>always</b> be combined/compared\nwith other timedelta objects</td><td>\n<ul>\n<li>Can <b>always</b> be combined with other TimeSpan\nobjects</li>\n<li>Can be combined with timedelta objects <b>if</b> <em>years</em>\nand <em>months</em> are both zero</li>\n<li>Can be compared with other TimeSpan objects <b>if</b> <em>days</em>\nvalues don't conflict with <em>years</em> or <em>months</em> values</li>\n<li>Can be compared with timedelta objects <b>if</b> <em>years</em>\nand <em>months</em> are both zero</li>\n</ul>\n</td></tr>\n</table>\n</pre>\n\n<p><strong>Fractional Months</strong></p>\n\n<p>Since HEC-DSS supports intervals of 1/3 and 1/2 month, the month portion of a <code>TimeSpan</code> object may be an integer\nor a <code>Fraction</code> object from the fractions package. Rules for using fractions are:</p>\n\n<ul>\n<li>Fractions can be used for the month portion only</li>\n<li><code>n/2</code> and <code>n/3</code> are the only fractions allowed</li>\n<li>Fractions can be specified as:\n<ul>\n<li>mathimatical expression (<code>1/3</code>)</li>\n<li>Fraction object (<code>Fraction(1,3)</code>)</li>\n<li>string (<code>\"1/3\"</code>)</li>\n</ul></li>\n</ul>\n\n<p><strong>Uninitialized Objects</strong></p>\n\n<p>Objects constructed without any initializer (e.g., <code>ts = TimeSpan()</code>) are initialized to be instantaneous (all values are zero).</p>\n\n<p><a id=\"string_representation\"></a>\n<strong>String Representation</strong></p>\n\n<p>The <code>repr</code> function returns: <pre>TimeSpan([<em>years</em>, <em>months</em>, <em>days</em>, <em>hours</em>, <em>minutes</em>, <em>seconds</em>])</pre>\nThe <code>str</code> function returns one or two ISO 8601 duration strings or <em>pseudo-</em>duration strings if the months value is a fraction.</p>\n\n<ul>\n<li>If the object has both calendar- and non-calendar-based (non-zero) values, and the signs of those portions are different,\nthe result will be one duration string for the calendar portion and one for the non-calendar portion, separated by a comma.</li>\n<li>Otherwise the result will be a single duration string.</li>\n</ul>\n\n<pre>\nPT0S\nP1Y2M3DT4H5M\n-P1Y2M3DT4H5M\nP1Y2M,-P3DT4H5M\n-P1Y2M,P3DT4H5M\nP3Y1/3M\n-P2/3M\n</pre>\n"}, {"fullname": "hec.TimeSpan.__init__", "modulename": "hec", "qualname": "TimeSpan.__init__", "kind": "function", "doc": "<p>Initialiazes the object at construction.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>Default</strong>\n<ul>\n<li><strong><code>TimeSpan()</code></strong> Initializes to default value of instantaneous (all values equal zero)</li>\n</ul></li>\n<li><p><strong>Positional</strong></p>\n\n<ul>\n<li><strong><code>TimeSpan(</code><em><code>timedelta</code></em><code>)</code></strong></li>\n<li><strong><code>TimeSpan(</code><em><code>string</code></em><code>)</code></strong> where <em>string</em> is:\n<ul>\n<li>an integer as a string</li>\n<li>one or two ISO 8601 strings or <em>pseudo-</em>duration strings as discussed under\n<a href=\"#string_representation\"><strong>String Representation</strong></a></li>\n</ul></li>\n<li><strong><code>TimeSpan(</code><em><code>list</code></em><code>)</code></strong> where <em>list</em> contains 1..6 values interpreted as years,\nmonths, days, hours, minutes, and seconds. Values must be convertable via the\n<code>int()</code> function except for the second value, which may also be convertable via the <code>Fraction()</code> constructor.</li>\n<li><strong><code>TimeSpan(</code><em><code>tuple</code></em><code>)</code></strong> where <em>tuple</em> contains 1..6 values interpreted as years,\nmonths, days, hours, minutes, and seconds. Values must be convertable via the\n<code>int()</code> function except for the second value, which may also be convertable via the <code>Fraction()</code> constructor.</li>\n<li><strong><code>TimeSpan(</code><em><code>years</code></em><code>[,</code><em><code>months</code></em><code>[,</code><em><code>days</code></em><code>[,</code><em><code>hours</code></em><code>[,</code><em><code>minutes</code></em><code>[,</code><em><code>seconds</code></em><code>]]]]])</code></strong>\nAll values must be convertable via the <code>int()</code> function except for <em>months</em>,  which may\nalso be convertable via the <code>Fraction()</code> constructor.</li>\n</ul></li>\n<li><p><strong>Keyword</strong>:<br></p>\n\n<ul>\n<li><strong><code>TimeSpan([years=</code><em><code>years</code></em><code>,] [months=</code><em><code>months</code></em><code>,] [days=</code><em><code>days</code></em><code>,] [hours=</code><em><code>hours</code></em><code>,] [minutes=</code><em><code>minutes</code></em><code>,] [seconds=</code><em><code>seconds</code></em><code>])</code></strong>\nAll values must be convertable via the <code>int()</code> function except for <em>months</em>,  which may\nalso be convertable via the <code>Fraction()</code> constructor.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSpanException:</strong>  if invalid initializers are specified</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "hec.TimeSpan.set", "modulename": "hec", "qualname": "TimeSpan.set", "kind": "function", "doc": "<p>Initialiazes or re-initializes the object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><p><strong>Positional</strong></p>\n\n<ul>\n<li><strong><code>set(</code><em><code>timedelta</code></em><code>)</code></strong></li>\n<li><strong><code>set(</code><em><code>string</code></em><code>)</code></strong> where <em>string</em> is:\n<ul>\n<li>an integer as a string</li>\n<li>one or two ISO 8601 strings or <em>pseudo-</em>duration strings as discussed under\n<a href=\"#string_representation\"><strong>String Representation</strong></a></li>\n</ul></li>\n<li><strong><code>set(</code><em><code>list</code></em><code>)</code></strong> where <em>list</em> contains 1..6 values interpreted as years,\nmonths, days, hours, minutes, and seconds. Values must be convertable via the\n<code>int()</code> function except for the second value, which may also be convertable via the <code>Fraction()</code> constructor.</li>\n<li><strong><code>set(</code><em><code>tuple</code></em><code>)</code></strong> where <em>tuple</em> contains 1..6 values interpreted as years,\nmonths, days, hours, minutes, and seconds. Values must be convertable via the\n<code>int()</code> function except for the second value, which may also be convertable via the <code>Fraction()</code> constructor.</li>\n<li><strong><code>set(</code><em><code>years</code></em><code>[,</code><em><code>months</code></em><code>[,</code><em><code>days</code></em><code>[,</code><em><code>hours</code></em><code>[,</code><em><code>minutes</code></em><code>[,</code><em><code>seconds</code></em><code>]]]]])</code></strong>\nAll values must be convertable via the <code>int()</code> function except for <em>months</em>,  which may\nalso be convertable via the <code>Fraction()</code> constructor.</li>\n</ul></li>\n<li><p><strong>Keyword</strong>:<br></p>\n\n<ul>\n<li><strong><code>set([years=</code><em><code>years</code></em><code>], [months=</code><em><code>months</code></em><code>], [days=</code><em><code>days</code></em><code>], [hours=</code><em><code>hours</code></em><code>], [minutes=</code><em><code>minutes</code></em><code>], [seconds=</code><em><code>seconds</code></em><code>])</code></strong>\nAll values must be convertable via the <code>int()</code> function except for <em>months</em>,  which may\nalso be convertable via the <code>Fraction()</code> constructor.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSpanException:</strong>  if invalid initializers are specified</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSpan.timedelta", "modulename": "hec", "qualname": "TimeSpan.timedelta", "kind": "function", "doc": "<p>Returns an equivalent <code>timedelta</code> object</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSpanException:</strong>  if the object contains any calendar-based values</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>timedelta: The equivalent <code>timedelta</code> object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSpan.total_seconds", "modulename": "hec", "qualname": "TimeSpan.total_seconds", "kind": "function", "doc": "<p>Returns the total number of seconds represented by this object</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSpanException:</strong>  if the object contains any calendar-based values</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The total number of seconds</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.TimeSpan.values", "modulename": "hec", "qualname": "TimeSpan.values", "kind": "variable", "doc": "<p>A list of years, months, days, hours, minutes, and seconds in this time span.\nOn read, all values will be normalized:</p>\n\n<ul>\n<li>years and days are unconstrained in magnitude</li>\n<li>integer months will be in the range of \u00b10..12</li>\n<li>fractional months normalized</li>\n<li>hours will be in the range of \u00b10..23</li>\n<li>minutes and seconds will be in the range \u00b10..59</li>\n<li>calendar-based values (years, months) will have the same sign if not zero</li>\n<li>non-calendar-based values (days, hours, minutes, seconds) will have the same sign if not zero</li>\n<li>calendar- and non-calendar-based values may have different signs</li>\n</ul>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[list[Union[int, fractions.Fraction]]]"}, {"fullname": "hec.TimeSpanException", "modulename": "hec", "qualname": "TimeSpanException", "kind": "class", "doc": "<p>Exception specific to TimeSpan operations</p>\n", "bases": "builtins.Exception"}, {"fullname": "hec.UnitQuantity", "modulename": "hec", "qualname": "UnitQuantity", "kind": "class", "doc": "<p>Class for scalar values with units.</p>\n\n<p>Thinly wraps pint.UnitRegistry.Quantity, but allows non-identifier unit names to be\nassociated with quantities. Can be used with mathematical, comparison, and conversion\noperators in conjuction with pint.UnitRegistry.Quantity objects and scalars (ints and floats).</p>\n"}, {"fullname": "hec.UnitQuantity.__init__", "modulename": "hec", "qualname": "UnitQuantity.__init__", "kind": "function", "doc": "<p>Creates a UnitQuantity object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>One argument:</strong> <br>\n<ul>\n<li><code>str</code>: Either:\n<ul>\n<li>A valid string for <a href=\"https://pint.readthedocs.io/en/stable/user/defining-quantities.html\">Pint string parsing</a></li>\n<li>A unit name (quantity will default to 1.0)</li>\n</ul></li>\n<li><code>UnitQuantity</code>: Another UnitQuantity object</li>\n<li><code>pint.Quantity</code>: A Pint Quantity object</li>\n</ul></li>\n<li><strong>Two arguments:</strong> <br>\n<ul>\n<li>args[0] (<code>Union[int, float, Fraction]</code>): The magnitude of the quantity</li>\n<li>args[1] (<code>Union[str, pint.Unit</code>): The uni of the quantity</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>UnitException:</strong>  if in valid arguments are specified</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "hec.UnitQuantity.dimensionality", "modulename": "hec", "qualname": "UnitQuantity.dimensionality", "kind": "variable", "doc": "<p>The dimensionality of the object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Only</p>\n</blockquote>\n", "annotation": ": pint.util.UnitsContainer"}, {"fullname": "hec.UnitQuantity.get_compatible_base_parameters", "modulename": "hec", "qualname": "UnitQuantity.get_compatible_base_parameters", "kind": "function", "doc": "<p>Returns a list of base parameter names that are compatible with this object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>parameter_context (str, optional):</strong>  Currently only \"CWMS\" is supported. Defaults to \"CWMS\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parameter_context</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;CWMS&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.UnitQuantity.get_compatible_units", "modulename": "hec", "qualname": "UnitQuantity.get_compatible_units", "kind": "function", "doc": "<p>Returns a list of compatible unit unit names for the specified unit of this object.\nCompatible units are those that have the same dimensionality.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: The list of compatible unit names for this object's specified unit</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.UnitQuantity.get_unit_aliases", "modulename": "hec", "qualname": "UnitQuantity.get_unit_aliases", "kind": "function", "doc": "<p>Returns a list of unit aliases for the specified unit of this object</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: The list of unit aliases for this object's specified unit</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.UnitQuantity.get_unit_systems", "modulename": "hec", "qualname": "UnitQuantity.get_unit_systems", "kind": "function", "doc": "<p>Returns a list of unit systems that include the name of this unit.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: Will be [], ['EN'], ['SI'], or ['EN', 'SI']</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.UnitQuantity.isnan", "modulename": "hec", "qualname": "UnitQuantity.isnan", "kind": "variable", "doc": "<p>Whether the magnitude of the objed is NaN</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.UnitQuantity.ito", "modulename": "hec", "qualname": "UnitQuantity.ito", "kind": "function", "doc": "<p>Converts this object to a different unit in place.</p>\n\n<p>Identical to calling <code>.to(..., in_place=True)</code></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit (Union[str, pint.Unit]):</strong>  The unit ot convert to</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>UnitQuantity: The converted object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">unit</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">unit</span><span class=\"o\">.</span><span class=\"n\">UnitQuantity</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.UnitQuantity.magnitude", "modulename": "hec", "qualname": "UnitQuantity.magnitude", "kind": "variable", "doc": "<p>The magnitude of the object (unitless value)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Only</p>\n</blockquote>\n", "annotation": ": Any"}, {"fullname": "hec.UnitQuantity.output_format", "modulename": "hec", "qualname": "UnitQuantity.output_format", "kind": "variable", "doc": "<p>The output format used for this object if a format specifier is not used. Any format specifier used\nwill override this property.</p>\n\n<p>If <code>None</code>, the unit name or alias specified when the object was creaed will be output (e.g., 10 dsf).\nSee <a href=\"https://pint.readthedocs.io/en/stable/user/formatting.html\">Pint format specification</a> for other formats.</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.UnitQuantity.round", "modulename": "hec", "qualname": "UnitQuantity.round", "kind": "function", "doc": "<p>Returns a copy of this object with the magnitude rounded to the specified number of decimal places</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>places (int):</strong>  The number of decimal places to round to. Default is 0.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>UnitQuantity: The rounded object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">places</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">unit</span><span class=\"o\">.</span><span class=\"n\">UnitQuantity</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.UnitQuantity.set_default_output_format", "modulename": "hec", "qualname": "UnitQuantity.set_default_output_format", "kind": "function", "doc": "<p>Sets the default output format for new UnitQuantity objects</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>format (Optional[str]):</strong>  <br>\n<ul>\n<li>None: (default value) outputs the units as specified when the UnitQuantity object was created</li>\n<li>Other: Must be a valid <a href=\"https://pint.readthedocs.io/en/stable/user/formatting.html\">Pint format specification</a></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.UnitQuantity.specified_unit", "modulename": "hec", "qualname": "UnitQuantity.specified_unit", "kind": "variable", "doc": "<p>The unit specified when the object was created. May be a unit name, alias, or a pint unit definition</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.UnitQuantity.to", "modulename": "hec", "qualname": "UnitQuantity.to", "kind": "function", "doc": "<p>Converts this object to a different unit</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit (Union[str, pint.Unit]):</strong>  The unit to convert to</li>\n<li><strong>in_place (bool, optional):</strong>  If True, this object is modified and returned. Otherwise\na new object is returned. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>UnitQuantity: The converted object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">unit</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">unit</span><span class=\"o\">.</span><span class=\"n\">UnitQuantity</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.UnitQuantity.unit", "modulename": "hec", "qualname": "UnitQuantity.unit", "kind": "variable", "doc": "<p>The Pint unit of the object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Only</p>\n</blockquote>\n", "annotation": ": pint.registry.Unit"}, {"fullname": "hec.UnitException", "modulename": "hec", "qualname": "UnitException", "kind": "class", "doc": "<p>Exception specific to Unit operations</p>\n", "bases": "builtins.Exception"}, {"fullname": "hec.const", "modulename": "hec.const", "kind": "module", "doc": "<p>Provides constants and related items</p>\n"}, {"fullname": "hec.const.UNDEFINED", "modulename": "hec.const", "qualname": "UNDEFINED", "kind": "variable", "doc": "<p></p>\n", "default_value": "-3.4028234663852886e+38"}, {"fullname": "hec.const.CWMS", "modulename": "hec.const", "qualname": "CWMS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;CWMS&#x27;"}, {"fullname": "hec.const.DSS", "modulename": "hec.const", "qualname": "DSS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;DSS&#x27;"}, {"fullname": "hec.const.Combine", "modulename": "hec.const", "qualname": "Combine", "kind": "class", "doc": "<p>Enumeration for combining selection states (current, new)</p>\n\n<ul>\n<li><code>NOOP</code>: Result is current selection state for all items</li>\n<li><code>REPLACE</code>: Result is new selection state for all items</li>\n<li><code>AND</code>: Result is current selection ANDed with new selection state</li>\n<li><code>OR</code>: Result is current selection ORed with new selection state</li>\n<li><code>XOR</code>: Result is current selection XORed with new selection state</li>\n</ul>\n", "bases": "enum.Enum"}, {"fullname": "hec.const.Combine.NOOP", "modulename": "hec.const", "qualname": "Combine.NOOP", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Combine.NOOP: 0&gt;"}, {"fullname": "hec.const.Combine.REPLACE", "modulename": "hec.const", "qualname": "Combine.REPLACE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Combine.REPLACE: 1&gt;"}, {"fullname": "hec.const.Combine.AND", "modulename": "hec.const", "qualname": "Combine.AND", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Combine.AND: 2&gt;"}, {"fullname": "hec.const.Combine.OR", "modulename": "hec.const", "qualname": "Combine.OR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Combine.OR: 3&gt;"}, {"fullname": "hec.const.Combine.XOR", "modulename": "hec.const", "qualname": "Combine.XOR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Combine.XOR: 4&gt;"}, {"fullname": "hec.const.Safety", "modulename": "hec.const", "qualname": "Safety", "kind": "class", "doc": "<p>Enumeration for specifying behavior of potentially unsafe operations.</p>\n\n<ul>\n<li><code>NOOP_ON_UNSAFE</code>: No action is taken on potientially unsafe operations</li>\n<li><code>WARN_ON_UNSAFE</code>: Potentially unsafe operations will generate a warning</li>\n<li><code>ERROR_ON_UNSAFE</code>: Potentially unsafe operations will raise an exception</li>\n</ul>\n", "bases": "enum.Enum"}, {"fullname": "hec.const.Safety.NOOP_ON_UNSAFE", "modulename": "hec.const", "qualname": "Safety.NOOP_ON_UNSAFE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Safety.NOOP_ON_UNSAFE: 0&gt;"}, {"fullname": "hec.const.Safety.WARN_ON_UNSAFE", "modulename": "hec.const", "qualname": "Safety.WARN_ON_UNSAFE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Safety.WARN_ON_UNSAFE: 1&gt;"}, {"fullname": "hec.const.Safety.ERROR_ON_UNSAFE", "modulename": "hec.const", "qualname": "Safety.ERROR_ON_UNSAFE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Safety.ERROR_ON_UNSAFE: 2&gt;"}, {"fullname": "hec.const.Select", "modulename": "hec.const", "qualname": "Select", "kind": "class", "doc": "<p>Enumeration for specifying items to select</p>\n\n<ul>\n<li><code>NONE</code>: Set all items to unselected</li>\n<li><code>ALL</code>: Set all items to selected</li>\n<li><code>INVERT</code>: Set all items to the inverse of their currently selected state</li>\n</ul>\n", "bases": "enum.Enum"}, {"fullname": "hec.const.Select.NONE", "modulename": "hec.const", "qualname": "Select.NONE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Select.NONE: 0&gt;"}, {"fullname": "hec.const.Select.ALL", "modulename": "hec.const", "qualname": "Select.ALL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Select.ALL: 1&gt;"}, {"fullname": "hec.const.Select.INVERT", "modulename": "hec.const", "qualname": "Select.INVERT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;Select.INVERT: 2&gt;"}, {"fullname": "hec.const.SelectionState", "modulename": "hec.const", "qualname": "SelectionState", "kind": "class", "doc": "<p>Enumeration for specifying selection durability</p>\n\n<ul>\n<li><code>TRANSIENT</code>: Selection is cleared after next operation</li>\n<li><code>DURABLE</code>: Selection persists until explicitly modified</li>\n</ul>\n", "bases": "enum.Enum"}, {"fullname": "hec.const.SelectionState.TRANSIENT", "modulename": "hec.const", "qualname": "SelectionState.TRANSIENT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SelectionState.TRANSIENT: 0&gt;"}, {"fullname": "hec.const.SelectionState.DURABLE", "modulename": "hec.const", "qualname": "SelectionState.DURABLE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;SelectionState.DURABLE: 1&gt;"}, {"fullname": "hec.datastore", "modulename": "hec.datastore", "kind": "module", "doc": "<p>Provides classes for cataloging, storing, retrieving, and deleting data using various types of data stores.</p>\n\n<p>Comprises the classes:</p>\n\n<ul>\n<li><a href=\"#CwmsDataStore\">CwmsDataStore</a>: Accesses CWMS databases via CDA</li>\n<li><a href=\"#DssDataStore\">DssDataStore</a>: Accesses HEC-DSS files</li>\n</ul>\n"}, {"fullname": "hec.datastore.DataStoreException", "modulename": "hec.datastore", "qualname": "DataStoreException", "kind": "class", "doc": "<p>Base class for all data store exceptions</p>\n", "bases": "builtins.Exception"}, {"fullname": "hec.datastore.CwmsDataStore", "modulename": "hec.datastore", "qualname": "CwmsDataStore", "kind": "class", "doc": "<p>Class to facilitate cataloging, storing, retrieving, and deleting data in CWMS databases.</p>\n\n<p>Requires installation of the <a href=\"https://pypi.org/project/cwms-python/\">cwms-python</a> &gt;= '0.6.0'.</p>\n", "bases": "AbstractDataStore"}, {"fullname": "hec.datastore.CwmsDataStore.__init__", "modulename": "hec.datastore", "qualname": "CwmsDataStore.__init__", "kind": "function", "doc": "<p>Creates and returns a new CwmsDataStore object.</p>\n\n<p>Equivalent of calling <a href=\"#CwmsDataStore.open\"><code>CwmsDataStore.open(name, **kwargs)</code></a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>api_key (Optional[str], must be passed by name):</strong>  The API key for this data store. Must be specified to write to or delete from this data store. Defaults to None. If None:\n<ul>\n<li>The value of environment variable \"cda_api_key\" is used, if it exists.</li>\n</ul></li>\n<li><strong>description (Optional[str], must be passed by name):</strong>  The description assocaited with the data store. Defaults to None</li>\n<li><strong>end_time (Optional[Any], must be passed by name):</strong>  Specifies the end time of the data store's time window. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor. Defaults to None</li>\n<li><strong>name (Optional[str], must be passed by name):</strong>  The API root (base URL). Defaults to None. If None:\n<ul>\n<li>The value of environment variable \"cda_api_root\" is used, if it exists.</li>\n<li>If the environment variable \"cda_api_root\" is not set, the default, the default value used in <code>cwms.api.init_session(api_root=None)</code> is used.</li>\n</ul></li>\n<li><strong>office (Optional[str], must be passed by name):</strong>  The default CWMS office for the data store. If None or not specified, each access method will have to have an office specified.</li>\n<li><strong>read_only (Optional[bool], must be passed by name):</strong>  Specifies whether to open the data store in read-only mode. Defaults to True</li>\n<li><strong>start_time (Optional[Any], must be passed by name):</strong>  Specifies the start time of the data store's time window. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor. Defaults to None</li>\n<li><strong>store_rule (Optional[str], must be passed by name):</strong>  Specifies the default behavior to use when storing data. If specified, it must be one of the following (case insensitive). Defaults to 'REPLACE_ALL'.\n<ul>\n<li>'DELETE_INSERT' - delete all existing data in the incoming time window, then store the incoming data</li>\n<li>'DO_NOT_REPLACE' - store only non-existing data</li>\n<li>'REPLACE_ALL' - store existing and non-existing data</li>\n<li>'REPLACE_MISSING_VALUES_ONLY' - store incoming data only where existing data is missing</li>\n<li>'REPLACE_WITH_NON_MISSING' - store only non-missing incoming data</li>\n</ul></li>\n<li><strong>time_zone (Optional[str], must be passed by name):</strong>  The default time zone for the data store. Defaults to the local time zone.</li>\n<li><strong>trim (Optional[bool], must be passed by name):</strong>  Specifies the data store's default setting to trim missing values from the beginning and end of any regular time series data set retrieved.\nDefaults to True.</li>\n<li><strong>units:</strong>  (Optional[str], must be passed by name): \"EN\" or \"SI\", specifying English or metric unit system as the default unit system for the data store. Defaults to \"EN\"</li>\n<li><strong>vertical_datum:</strong>  (Optional[str], must be passed by name): \"NGVD29\", \"NAVD88\", or \"NATIVE\", specifying the data store's default vertical datum for retrieving elevation data. Defaults to \"NATIVE\"</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "hec.datastore.CwmsDataStore.catalog", "modulename": "hec.datastore", "qualname": "CwmsDataStore.catalog", "kind": "function", "doc": "<p>Retrieves CWMS identifiers for the specified data type, optionally with extents for specific data types.</p>\n\n<p>Currently only time series objects may be cataloged.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data_type (str):</strong>  Must be one of the following (case insensitive):\n<ul>\n<li><strong>'TIMESERIES'</strong>: specifies cataloging CWMS time series objects in the data store</li>\n<li><strong>'LOCATION'</strong>: specfies catalog CWMS locations in the data store</li>\n</ul></li>\n<li><p><strong>pattern (Optional[str], must be passed by name):</strong>  An extended wildcard pattern to use for matching identifiers. <code>regex</code> takes precedence if both are specified. Defaults to None.</p>\n\n<table>\n<pre>\n<tr><th colspan=\"2\">Pattern Examples</th></tr>\n<tr><th>pattern</th><th>matches</th></tr>\n<tr><td><code>abc</code></td><td>the literal string \"abc\"</td></tr>\n<tr><td><code>ab{2,3}c{2}</code></td><td>1 \"a\" followed by 2 or 3 \"b\" followed by 2 \"c\"</td></tr>\n<tr><td><code>a*b?c</code></td><td>1 \"a\" followed by zero or more characters followed by \"b\" followed by 1 character followed by 1 \"c\"</td></tr>\n<tr><td><code>[abc]</code></td><td>1 \"a\" or \"b\" or \"c\"</td></tr>\n<tr><td><code>^[abc]$</code></td><td>beginning of string followed by 1 \"a\" or \"b\" or \"c\" followed by end of string</td></tr>\n<tr><td><code>[!abc]</code></td><td>1 character other than \"a\" or \"b\" or \"c\"</td></tr>\n<tr><td><code>[_a-z0-9]*</code></td><td>zero or more of characters \"_\" or \"a\" through \"z\" or \"0\" through \"9\"</td></tr>\n<tr><td><code style=\"white-space: nowrap;\">[!a-z0-9]{1,5}</code></td><td>1..5 characters other than \"a\" through \"z\" or \"0\" through \"9\"</td></tr>\n<tr><td><code>(abc|def)</code></td><td>either \"abc\" or \"def\"</td></tr>\n</pre>\n</table></li>\n<li><p><strong>regex (Optional[str], must be passed by name):</strong>  Regular expression to use for matching identifiers. Takes precedence over <code>pattern</code> if both are specified. Defaults to None.</p></li>\n<li><strong>bounding_office (Optional[str]), must be passed by name):</strong>  Specifies cataloging only identifiers that are physically located within the boundaries of the specified office.\nCan be a wildcard pattern. Matching is affected by <code>case_sensitive</code>.</li>\n<li><strong>case_sensitive (Optional[bool], must be passed by name):</strong>  Specifies whether and pattern or regular expression matching is case-sensitive.</li>\n<li><strong>category (Optional[str], must be passed by name, LOCATION only):</strong>  Specifies cataloging only locations in a location group belonging to the specified catgory(ies). Can be a wildcard pattern.\nMatching is affected by <code>case_sensitive</code>. Note that specifying <code>category</code> or <code>group</code>, or including \"aliases\" in <code>fields</code> will slow down the catalog operation.</li>\n<li><strong>fields (Optional[str]), must be passed by name):</strong>  A comma-separated list of fields to include in the catalog. Valid fields for <code>data_type</code> are listed below.\nThe catalog will include the fields in the order specified. Defaults to <code>identifier</code>.\n<ul>\n<li><strong><code>TIMESERIES</code></strong>:\n<ul>\n<li><code>identifier</code>: The time series identifier</li>\n<li><code>office</code>: The CWMS office for the time series</li>\n<li><code>name</code>: Same as <code>identifier</code></li>\n<li><code>time-zone</code>: The time zone of the location of the time seroies</li>\n<li><code>interval</code>: The interval of the time series</li>\n<li><code>offset</code>:  The offset into each interval of regular time series (in minutes), or <N/A> if interval is irregular</li>\n<li><code>earliest-time</code>: The earliest time in the database for this time series, or <None> if no data</li>\n<li><code>latest-time</code>: The latest time in the database for this time seires of <None> if no data</li>\n<li><code>last-update</code>: The most recent time this time series has been updated, or <None> of no data</li>\n</ul></li>\n<li><strong><code>LOCATION</code></strong>:\n<ul>\n<li><code>identifier</code>: The location identifier</li>\n<li><code>office</code>: The CWMS office for the location</li>\n<li><code>name</code>: Same as <code>identifier</code></li>\n<li><code>nearest-city</code>: The name of the city or town closest to the location</li>\n<li><code>public-name</code>: The public name of the location</li>\n<li><code>long-name</code>: The long name of the location</li>\n<li><code>kind</code>: The kind of location - constrained to:\n<ul>\n<li>SITE</li>\n<li>EMBANKMENT</li>\n<li>OVERFLOW</li>\n<li>TURBINE</li>\n<li>STREAM</li>\n<li>PROJECT</li>\n<li>STREAMGAGE</li>\n<li>BASIN</li>\n<li>OUTLET</li>\n<li>LOCK</li>\n<li>GATE</li>\n</ul></li>\n<li><code>time-zone</code>: The time zone of the location</li>\n<li><code>latitude</code>: The latitude of the location</li>\n<li><code>longitude</code>: The latitude of the location</li>\n<li><code>published-latitude</code>: The published latitude of the location</li>\n<li><code>published-longitude</code>: The published longitude of the location</li>\n<li><code>horizontal-datum</code>: The horizontal datum associated with the latitude and longitude</li>\n<li><code>elevation</code>: The elevation of the location</li>\n<li><code>unit</code>: The unit of the elevation</li>\n<li><code>vertical-datum</code>: The vertical datum of the elevation</li>\n<li><code>nation</code>: The nation containing the location</li>\n<li><code>state</code>: The state/province containing the location</li>\n<li><code>county</code>: The county containing the location</li>\n<li><code>bounding-office</code>: The CWMS office whose boundary includes the location</li>\n<li><code>map-label</code>: The map label of the location</li>\n<li><code>active</code>: Whether the location is active</li>\n<li><code>aliases</code>: The aliases associated with the location. Note that including this slows down the catalog operation. The aliases are specified as the string\nrepresentation of a dictionary (i.e., an actual dictionary can be obtained by passing this field to <code>eval()</code>). The dictionary keys are the location\ncategories and groups for each alias, and the values are the aliases. The keys are of the form {category}-{group} (e.g., \"Angency Aliases-NWS Handbook 5 ID\")</li>\n<li><code>description</code>: The description of the location</li>\n<li><code>type</code>: The unconstrained type of the location (cf <code>kind</code>)</li>\n</ul></li>\n</ul></li>\n<li><strong>group (Optional[str], must be passed by name, LOCATION only):</strong>  Specifies cataloging only locations in the specivied location group(s). Can be a wildcard pattern.\nMatching is affected by <code>case_sensitive</code>. Note that specifying <code>category</code> or <code>group</code>, or including \"aliases\" in <code>fields</code> will slow down the catalog operation.</li>\n<li><strong>header (Optional[bool], must be passed by name):</strong>  Specifies whether to include a header line in the catalog that identifies the fields</li>\n<li><strong>kind (Optional[str], must be passed by name, LOCATION only):</strong>  Specifies cataloging only locations of the specified location kind. Can be a wildcard pattern.\nMatching is affected by <code>case_sensitive</code>.</li>\n<li><strong>limit (Optional[int], must be passed by name):</strong>  The maximum number of identifiers to return. If None, no limit is imposed. Defaults to None.</li>\n<li><strong>office (Optional[str], must be passed by name):</strong>  The CWMS office to generate the catalog for. Defaults to None, which uses the data store's default office.</li>\n<li><strong>units (Optional[str], must be passed by name):</strong>  The unit system (\"EN\" or \"SI\") to return the elevation values in. Defaults to None.</li>\n<li><strong>vertical_datum (Optional[str], must be passed by name):</strong>  The vertical datum (\"NGVD29\", \"NAVD88\", or \"LOCAL\") to return the elevation values in. Defaults to None (Native datum).</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>DataStoreException:</strong>  if the data store is not open or an invalid <code>data_type</code> is specified</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: The CWMS identifiers that match the specified parameters, up to the specified limit, if any</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.datastore.CwmsDataStore.close", "modulename": "hec.datastore", "qualname": "CwmsDataStore.close", "kind": "function", "doc": "<p>Explicitly closes the data store, preventing further access.</p>\n\n<p>The data store is implicitly closed upon deletion or exiting a context manager ('with' block)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.datastore.CwmsDataStore.delete", "modulename": "hec.datastore", "qualname": "CwmsDataStore.delete", "kind": "function", "doc": "<p>Deletes a data set from the data store.</p>\n\n<p>Currently only time series data may be deleted.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>identifier (str):</strong>  The name of the data set to delete. Must be a valid one of the following:\n<ul>\n<li><strong>time series identifier</strong>: start and end times specify the time window of time series values to delete, inclusive</li>\n</ul></li>\n<li><strong>delete_action (Optional[str], must be passed by name):</strong>  Defaults to None. If specified, any time window is ignored and it must be one of (case insensitive):\n<ul>\n<li>'DELETE_ALL': delete all data and the identifier for the object</li>\n<li>'DELETE_DATA': delete all data for the identifier but does not delete the identifier</li>\n<li>'DELETE_KEY': delete only the object identifier - will fail if any data is associated with the identifier</li>\n</ul></li>\n<li><strong>end_time (Optional[Any], must be passed by name):</strong>  Specifies the end of the time window to delete data. Ignored if <code>delete_action</code> is specified. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor.\nDefaults to the end of the data store's time window.</li>\n<li><strong>office (Optional[str], must be passed by name):</strong>  The CWMS office to delete data for. Defaults to None, which uses the data store's default office.</li>\n<li><strong>start_time (Optional[Any], must be passed by name):</strong>  Specifies the start of the time window to delete data. Ignored if <code>delete_action</code> is specified. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor.\nDefaults to the start of the data store's time window.</li>\n<li><strong>version_time (Optional[Any], must be passed by name):</strong>  Specifies the version date/time of the data to delete (time series types only). Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor.\nDefaults to the None, meaning non-versioned data.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.datastore.CwmsDataStore.get_extents", "modulename": "hec.datastore", "qualname": "CwmsDataStore.get_extents", "kind": "function", "doc": "<p>Retrieves the data extents for the specified identifier</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>identifier (str):</strong>  The identifier to retrieve the extents for</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[HecTime]: The earliest time, latest time, and latest update time</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.datastore.CwmsDataStore.get_vertical_datum_info", "modulename": "hec.datastore", "qualname": "CwmsDataStore.get_vertical_datum_info", "kind": "function", "doc": "<p>Retrieves the vertical datum information for a CWMS location</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>identifier (str):</strong>  The location identifier</li>\n<li><strong>office (Optional[str]):</strong>  The CWMS office for the location. Defaults to the data store's default office.</li>\n<li><strong>format (Optional[str]):</strong>  The output format for the information. Must be one of 'JSON' or 'XML' (case insensitive). Defaults to 'JSON'</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[str]: The vertical datum information in the specified format</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.datastore.CwmsDataStore.open", "modulename": "hec.datastore", "qualname": "CwmsDataStore.open", "kind": "function", "doc": "<p>Creates and returns a new CwmsDataStore object.</p>\n\n<p>Equivalent of calling <a href=\"#CwmsDataStore\"><code>CwmsDataStore(**kwargs)</code></a> with <code>name</code> in <code>kwargs</code></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (Optional[str]):</strong>  The API root (base URL). Defaults to None. If None:\n<ul>\n<li>The value of environment variable \"cda_api_root\" is used, if it exists.</li>\n<li>If the environment variable \"cda_api_root\" is not set, the default, the default value used in <code>cwms.api.init_session()</code> is used.</li>\n</ul></li>\n<li><strong>api_key (Optional[str], must be passed by name):</strong>  The API key for this data store. Must be specified to write to or delete from this data store. Defaults to None. If None:\n<ul>\n<li>The value of environment variable \"cda_api_key\" is used, if it exists.</li>\n</ul></li>\n<li><strong>description (Optional[str], must be passed by name):</strong>  The description assocaited with the data store. Defaults to None</li>\n<li><strong>end_time (Optional[Any], must be passed by name):</strong>  Specifies the end time of the data store's time window. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor. Defaults to None</li>\n<li><strong>office (Optional[str], must be passed by name):</strong>  The default CWMS office for the data store. If None or not specified, each access method will have to have an office specified.</li>\n<li><strong>read_only (Optional[bool], must be passed by name):</strong>  Specifies whether to open the data store in read-only mode. Defaults to True</li>\n<li><strong>start_time (Optional[Any], must be passed by name):</strong>  Specifies the start time of the data store's time window. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor. Defaults to None</li>\n<li><strong>store_rule (Optional[str], must be passed by name):</strong>  Specifies the default behavior to use when storing data. If specified, it must be one of the following (case insensitive). Defaults to 'REPLACE_ALL'.\n<ul>\n<li>'DELETE_INSERT' - delete all existing data in the incoming time window, then store the incoming data</li>\n<li>'DO_NOT_REPLACE' - store only non-existing data</li>\n<li>'REPLACE_ALL' - store existing and non-existing data</li>\n<li>'REPLACE_MISSING_VALUES_ONLY' - store incoming data only where existing data is missing</li>\n<li>'REPLACE_WITH_NON_MISSING' - store only non-missing incoming data</li>\n</ul></li>\n<li><strong>time_zone (Optional[str], must be passed by name):</strong>  The default time zone for the data store. Defaults to the local time zone.</li>\n<li><strong>trim (Optional[bool], must be passed by name):</strong>  Specifies the data store's default setting to trim missing values from the beginning and end of any regular time series data set retrieved.\nDefaults to True.</li>\n<li><strong>units (Optional[str], must be passed by name):</strong>  \"EN\" or \"SI\", specifying English or metric unit system as the default unit system for the data store. Defaults to \"EN\"</li>\n<li><strong>vertical_datum (Optional[str], must be passed by name):</strong>  \"NGVD29\", \"NAVD88\", or \"NATIVE\", specifying the data store's default vertical datum for retrieving elevation data. Defaults to \"NATIVE\"</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">datastore</span><span class=\"o\">.</span><span class=\"n\">CwmsDataStore</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.datastore.CwmsDataStore.retrieve", "modulename": "hec.datastore", "qualname": "CwmsDataStore.retrieve", "kind": "function", "doc": "<p>Retrieves a data set from the data store.</p>\n\n<p>Currently only locations and time series may be retrieved. To retrieve all data for a time series, specifiy <code>start_time=None</code> and <code>end_time=None</code></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>office (Optional[str], must be passed by name):</strong>  The CWMS office to retrieve data for. Defaults to None, which uses the data store's default office.</li>\n<li><strong>identifier (str):</strong>  The name of the data set to retrieve:</li>\n<li><strong>Location Arguments:</strong> <br>\n<ul>\n<li><b>units (Optional[str], must be passed by name):</b> \"EN\" or \"SI\", specifying to retrieve data in English or metric units. Defaults to None, which uses the default unit system for the data store</li>\n<li><b>vertical_datum (Optional[str], must be passed by name):</b> \"NGVD29\", \"NAVD88\", or \"NATIVE\", specifying the vertical datum to retrieve elevation data for. Defaults to None, which uses the data store's default vertical datum</li>\n</ul></li>\n<li><strong>TimeSeries Arguments:</strong> <br>\n<ul>\n<li><b>start_time (Optional[Any], must be passed by name):</b> Specifies the start of the time window to retrieve data. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor.\nDefaults to the start of the data store's time window. If None or not specified and the data store's time window doesn't have a start time, the current time minus 24 hours is used</li>\n<li><b>end_time (Optional[Any], must be passed by name):</b> Specifies the end of the time window to retrieve data. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor.\nDefaults to the end of the data store's time window. If None or not specified and the data store's time window doesn't have an end time, the current time is used</li>\n<li><b>trim (Optional[bool], must be passed by name):</b> Specifies whether to trim missing values from the beginning and end of any regular time series data set retrieved.\nDefaults to the data store's trim setting.</li>\n<li><b>units (Optional[str], must be passed by name):</b> \"EN\" or \"SI\", specifying to retrieve data in English or metric units. Defaults to None, which uses the default unit system for the data store</li>\n<li><b>version_time (Optional[Any], must be passed by name):</b> Specifies the version date/time of the data to retrieve (time series types only). Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor.\nDefaults to the None, which uses the data store's default vertical datum.</li>\n<li><b>vertical_datum (Optional[str], must be passed by name):</b> \"NGVD29\", \"NAVD88\", or \"NATIVE\", specifying the vertical datum to retrieve elevation data for. Defaults to None, which uses the data store's default vertical datum</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Any: The <a href=\"location.html#Location\"><code>Location</code></a> or <a href=\"timeseries.html#TimeSeries\"><code>TimeSeries</code></a> object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.datastore.CwmsDataStore.store", "modulename": "hec.datastore", "qualname": "CwmsDataStore.store", "kind": "function", "doc": "<p>Stores a data set to the data store.</p>\n\n<p>Currently only locations and time series data may be stored.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>obj (object):</strong>  The data set to store.\n<ul>\n<li>For locations, must be a Location object or the name of the location</li>\n</ul></li>\n<li><p><strong>Location Arguments:</strong> <br></p>\n\n<ul>\n<li><b>name (Optional[str], must be passed by name):</b> The location's name, Defaults to the Location object's name</li>\n<li><b>office (Optional[str], must be passed by name):</b> The location's office. Defaults to the Location object's office</li>\n<li><b>kind (str, must be passed by name):</b> The location's kind. Must be on of:\n<ul>\n<li>SITE</li>\n<li>EMBANKMENT</li>\n<li>OVERFLOW</li>\n<li>TURBINE</li>\n<li>STREAM</li>\n<li>PROJECT</li>\n<li>STREAMGAGE</li>\n<li>BASIN</li>\n<li>OUTLET</li>\n<li>LOCK</li>\n<li>GATE</li>\n</ul></li>\n<li><b>active (Optional[bool], must be passed by name):</b> Whether the location is active in the datbase. Defaults to True</li>\n<li><b>latitude (Optional[float], must be passed by name):</b> The location's latitude. Defaults to the Location object's latitude.</li>\n<li><b>longitude (Optional[float], must be passed by name):</b> The location's longitude. Defaults to the Location object's longitude</li>\n<li><b>horizontal_datum (Optional[str], must be passed by name):</b> The location's horizontal datum</li>\n<li><b>elevation (Optional[float], must be passed by name):</b> The location's elevation. Defaults to the Location object's elevation</li>\n<li><b>elevation_unit (Optional[str], must be passed by name):</b> The unit of the location's elevation. Defaults to the Location object's elevation unit</li>\n<li><b>vertical_datum (Optional[str], must be passed by name):</b> The location's vertical datum. Defaults to the location's vertical datum</li>\n<li><b>nation (Optional[str], must be passed by name):</b> The location's nation. Defaults to \"US\"</li>\n<li><b>state (Optional[str], must be passed by name):</b> The location's state. Defaults to None</li>\n<li><b>county (Optional[str], must be passed by name):</b> The locations's county. Defaults to None</li>\n<li><b>bounding_office (Optional[str], must be passed by name):</b> The CWMS office whose boundar includes the location. Defaults to None</li>\n<li><b>nearest_city (Optional[str], must be passed by name):</b> The city nearest the location. Defaults to None</li>\n<li><b>time_zone (Optional[str], must be passed by name):</b> The location's time zone. Defaults to the location's time zone</li>\n<li><b>public_name (Optional[str], must be passed by name):</b> The location's public name. Defaults to None</li>\n<li><b>long_name (Optional[str], must be passed by name):</b> The location's long name. Defaults to None</li>\n<li><b>description (Optional[str], must be passed by name):</b> The location's description. Defaults to None</li>\n<li><b>map_label (Optional[str], must be passed by name):</b> The location's map label. Defaults to None</li>\n<li><b>published_latitude (Optional[float], must be passed by name):</b> The published latitude of the location. Defaults to None</li>\n<li><b>published_longitude (Optional[float], must be passed by name):</b> The published longitude of the location. Defaults to None</li>\n<li><b>type (Optional[str], must be passed by name):</b> An unconstrained type for the location. Defaults to None\n<br>&nbsp;</li>\n</ul>\n\n<div>The following items are required to be specified either in the Location object or arguments:\n    <ul>\n    <li>name</li>\n    <li>office</li>\n    <li>kind</li>\n    <li>latitude</li>\n    <li>longitude</li>\n    <li>horizontal_datum</li>\n    <li>time_zone</li>\n    </ul>\n</div>\n\n<p><p></p></li>\n<li><strong>TimeSeries Arguments:</strong> <br>\n<ul>\n<li><b>as_lrts (Optional[bool], must be passed by name):</b> Specifies whether to store the time series as LRTS is its interval starts with \"~\". Defaults to whether the time series is a local regular time series</li>\n<li><b>override_protecteion (Optional[bool], must be passed by name):</b> Specifies whether to store non-protected values over existing protected values. (Protected values always overwrite existing values and non-protected existing values are alway overwritten) Defaults to False</li>\n<li><b>store_rule (Optional[str], must be passed by name):</b> Specifies the default behavior to use when storing data. If specified, it must be one of the following (case insensitive). Defaults to 'REPLACE_ALL'.\n<ul>\n<li><b>'DELETE_INSERT'</b> - delete all existing data in the incoming time window, then store the incoming data</li>\n<li><b>'DO_NOT_REPLACE'</b> - store only non-existing data</li>\n<li><b>'REPLACE_ALL'</b> - store existing and non-existing data</li>\n<li><b>'REPLACE_MISSING_VALUES_ONLY'</b> - store incoming data only where existing data is missing</li>\n<li><b>'REPLACE_WITH_NON_MISSING'</b> - store only non-missing incoming data</li>\n</ul></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"nb\">object</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.datastore.DssDataStore", "modulename": "hec.datastore", "qualname": "DssDataStore", "kind": "class", "doc": "<p>Class to facilitate cataloging, storing, retrieving, and deleting data in HEC-DSS files.</p>\n\n<p>Requires installation of the 'hecdss' package &gt; '0.1.21'.</p>\n", "bases": "AbstractDataStore"}, {"fullname": "hec.datastore.DssDataStore.__init__", "modulename": "hec.datastore", "qualname": "DssDataStore.__init__", "kind": "function", "doc": "<p>Creates and returns a new DssDataStore object.</p>\n\n<p>Equivalent of calling <a href=\"#DssDataStore.open\"><code>DssDataStore.open(name, **kwargs)</code></a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>description (Optional[str], must be passed by name):</strong>  The description assocaited with the data store. Defaults to None</li>\n<li><strong>end_time (Optional[Any], must be passed by name):</strong>  Specifies the end time of the data store's time window. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor. Defaults to None</li>\n<li><strong>name (str, must be passed by name):</strong>  The name of the HEC-DSS file to open.</li>\n<li><strong>read_only (Optional[bool], must be passed by name):</strong>  Specifies whether to open the data store in read-only mode. Defaults to True</li>\n<li><strong>start_time (Optional[Any], must be passed by name):</strong>  Specifies the start time of the data store's time window. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor. Defaults to None</li>\n<li><strong>store_rule (Optional[str], must be passed by name):</strong>  Must be one of the following (case insensitive). Defaults to 'REPLACE_ALL'.\n<ul>\n<li>'DELETE_INSERT'</li>\n<li>'DO_NOT_REPLACE'</li>\n<li>'REPLACE_ALL'</li>\n<li>'REPLACE_MISSING_VALUES_ONLY'</li>\n<li>'REPLACE_WITH_NON_MISSING'</li>\n</ul></li>\n<li><strong>trim (Optional[bool], must be passed by name):</strong>  Specifies the data store's default setting to trim missing values from the beginning and end of any regular time series data set retrieved.\nDefaults to True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "hec.datastore.DssDataStore.catalog", "modulename": "hec.datastore", "qualname": "DssDataStore.catalog", "kind": "function", "doc": "<p>Retrieves pathnames that match specified conditions</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data_type (Optional[str]):</strong>  The type of data to retrieve pathnames for. Defaults to None, which specifies all data types.\nIf specified, must be one of (case insensitive):\n<ul>\n<li>'ARRAY'</li>\n<li>'GRID'</li>\n<li>'LOCATION'</li>\n<li>'PAIRED_DATA'</li>\n<li>'TEXT'</li>\n<li>'TIMESERIES'</li>\n<li>'TIMESERIES_PROFILE'</li>\n<li>'TIN'</li>\n</ul></li>\n<li><strong>pattern (Optional[str], must be passed by name):</strong>  Wildcard pattern (using <code>*</code> and <code>?</code>) to use for matching pathnames. <code>regex</code> takes precedence if both are specified. Defaults to None.</li>\n<li><strong>regex (Optional[str], must be passed by name):</strong>  Regular expression to use for matching pathnames. Takes precedence over <code>pattern</code> if both are specified. Defaults to None.</li>\n<li><strong>case_sensitive (Optional[bool], must be passed by name):</strong>  Specifies whether <code>pattern</code> or <code>regex</code> matching is case-sensitive.</li>\n<li><strong>condensed (Optional[bool], must be passed by name):</strong>  Specifies whether to return a condensed catalog (D-part = time range for time series). Defaults to True</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>DataStoreException:</strong>  if the data store is not open or an invalid <code>data_type</code> is specified</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: The pathnames that match the specified parameters</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.datastore.DssDataStore.close", "modulename": "hec.datastore", "qualname": "DssDataStore.close", "kind": "function", "doc": "<p>Explicitly closes the data store, preventing further access.</p>\n\n<p>The data store is implicitly closed upon deletion or exiting a context manager ('with' block)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.datastore.DssDataStore.delete", "modulename": "hec.datastore", "qualname": "DssDataStore.delete", "kind": "function", "doc": "<p>Deletes a data set from the data store.</p>\n\n<p>Currently only time series data may be deleted. To delete all data for a time series, specifiy <code>start_time=None</code> and <code>end_time=None</code></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>identifier (str):</strong>  The name of the data set to delete:\n<ul>\n<li><strong>TIMESERIES</strong>: A pathname in the dataset. The D part (block start date) is ignored.</li>\n</ul></li>\n<li><strong>end_time (Optional[Any], must be passed by name):</strong>  Specifies the end of the time window to delete data. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor.\nDefaults to the end of the data store's time window. If None or not specified and the data store's time window doesn't have an end time, all data on or after the start time will be deleted.</li>\n<li><strong>start_time (Optional[Any], must be passed by name):</strong>  Specifies the start of the time window to delete data. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor.\nDefaults to the start of the data store's time window. If None or not specified and the data store's time window doesn't have a start time, all data up to and on the end time will be deleted.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.datastore.DssDataStore.get_extents", "modulename": "hec.datastore", "qualname": "DssDataStore.get_extents", "kind": "function", "doc": "<p>Retrieves the data extents for the specified identifier</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>identifier (str):</strong>  The identifier to retrieve the extents for</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[HecTime]: The earliest time and latest time for the identifier</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.datastore.DssDataStore.open", "modulename": "hec.datastore", "qualname": "DssDataStore.open", "kind": "function", "doc": "<p>Creates and returns a new DssDataStore object.</p>\n\n<p>Equivalent of calling <a href=\"#DssDataStore\"><code>DssDataStore(**kwargs)</code></a> with <code>name</code> in <code>kwargs</code></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the HEC-DSS file to open.</li>\n<li><strong>description (Optional[str], must be passed by name):</strong>  The description assocaited with the data store. Defaults to None</li>\n<li><strong>end_time (Optional[Any], must be passed by name):</strong>  Specifies the end time of the data store's time window. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor. Defaults to None</li>\n<li><strong>read_only (Optional[bool], must be passed by name):</strong>  Specifies whether to open the data store in read-only mode. Defaults to True</li>\n<li><strong>start_time (Optional[Any], must be passed by name):</strong>  Specifies the start time of the data store's time window. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor. Defaults to None</li>\n<li><strong>store_rule (Optional[str], must be passed by name):</strong>  Must be one of the following (case insensitive). Defaults to 'REPLACE_ALL'.\n<ul>\n<li>'DELETE_INSERT'</li>\n<li>'DO_NOT_REPLACE'</li>\n<li>'REPLACE_ALL'</li>\n<li>'REPLACE_MISSING_VALUES_ONLY'</li>\n<li>'REPLACE_WITH_NON_MISSING'</li>\n</ul></li>\n<li><strong>trim (Optional[bool], must be passed by name):</strong>  Specifies the data store's default setting to trim missing values from the beginning and end of any regular time series data set retrieved.\nDefaults to True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">datastore</span><span class=\"o\">.</span><span class=\"n\">DssDataStore</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.datastore.DssDataStore.retrieve", "modulename": "hec.datastore", "qualname": "DssDataStore.retrieve", "kind": "function", "doc": "<p>Retrieves a data set from the data store.</p>\n\n<p>Currently only time series data may be retrieved. To retrieve all data for a time series, specifiy <code>start_time=None</code> and <code>end_time=None</code></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>identifier (str):</strong>  The name of the data set to retrieve:\n<ul>\n<li><strong>TIMESERIES</strong>: A pathname in the dataset. The D part (block start date) is ignored.</li>\n</ul></li>\n<li><strong>end_time (Optional[Any], must be passed by name):</strong>  Specifies the end of the time window to retrieve data. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor.\nDefaults to the end of the data store's time window. If None or not specified and the data store's time window doesn't have an end time, all data on or after the start time will be retrieved.</li>\n<li><strong>start_time (Optional[Any], must be passed by name):</strong>  Specifies the start of the time window to retrieve data. Must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or a valid input to the <code>HecTime</code> constructor.\nDefaults to the start of the data store's time window. If None or not specified and the data store's time window doesn't have a start time, all data up to and on the end time will be retrieved.</li>\n<li><strong>trim (Optional[bool], must be passed by name):</strong>  Specifies whether to trim missing values from the beginning and end of any regular time series data set retrieved.\nDefaults to the data store's trim setting.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.datastore.DssDataStore.set_message_level", "modulename": "hec.datastore", "qualname": "DssDataStore.set_message_level", "kind": "function", "doc": "<p>Sets the HEC-DSS message level for all <code>DssDataStore</code> objects</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>level (int, optional):</strong>  Defaults to 4\n<ul>\n<li><strong>0</strong>: No output</li>\n<li><strong>1</strong>: Critcal output only</li>\n<li><strong>2</strong>: Terse (includes file open and close)</li>\n<li><strong>4</strong>: General (includes read and write)</li>\n<li><strong>5</strong>: User Diagnostic</li>\n<li><strong>11</strong>: Internal Diagnostic</li>\n<li><strong>13</strong>: Internal Debug</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">level</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.datastore.DssDataStore.store", "modulename": "hec.datastore", "qualname": "DssDataStore.store", "kind": "function", "doc": "<p>Stores a data set to the data store.</p>\n\n<p>Currently only time series data may be stored.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>obj (object):</strong>  The data set to store</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"nb\">object</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.datastore.AbstractDataStore", "modulename": "hec.datastore", "qualname": "AbstractDataStore", "kind": "class", "doc": "<p>Abstract base class for data store classes</p>\n", "bases": "abc.ABC"}, {"fullname": "hec.datastore.AbstractDataStore.catalog", "modulename": "hec.datastore", "qualname": "AbstractDataStore.catalog", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data_type</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.datastore.AbstractDataStore.close", "modulename": "hec.datastore", "qualname": "AbstractDataStore.close", "kind": "function", "doc": "<p>Explicitly closes the data store, preventing further access.</p>\n\n<p>The data store is implicitly closed upon deletion or exiting a context manager ('with' block)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.datastore.AbstractDataStore.delete", "modulename": "hec.datastore", "qualname": "AbstractDataStore.delete", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.datastore.AbstractDataStore.end_time", "modulename": "hec.datastore", "qualname": "AbstractDataStore.end_time", "kind": "variable", "doc": "<p>The end time of the data store's time window (if any)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[hec.hectime.HecTime]"}, {"fullname": "hec.datastore.AbstractDataStore.get_extents", "modulename": "hec.datastore", "qualname": "AbstractDataStore.get_extents", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.datastore.AbstractDataStore.name", "modulename": "hec.datastore", "qualname": "AbstractDataStore.name", "kind": "variable", "doc": "<p>The name of the data store as provided in the constructor or <code>open()</code> method</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.datastore.AbstractDataStore.office", "modulename": "hec.datastore", "qualname": "AbstractDataStore.office", "kind": "variable", "doc": "<p>The office associated with the data store, if any</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.datastore.AbstractDataStore.open", "modulename": "hec.datastore", "qualname": "AbstractDataStore.open", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">datastore</span><span class=\"o\">.</span><span class=\"n\">AbstractDataStore</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.datastore.AbstractDataStore.is_open", "modulename": "hec.datastore", "qualname": "AbstractDataStore.is_open", "kind": "variable", "doc": "<p>Whether this data store is open for cataloging and reading.</p>\n\n<p>A data store is open from its construction or call to <code>open()</code> until a call to <code>close()</code> or deletiion</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.datastore.AbstractDataStore.is_read_only", "modulename": "hec.datastore", "qualname": "AbstractDataStore.is_read_only", "kind": "variable", "doc": "<p>Whether this data store is open for storing and deleting. Meaningless if <code>is_open()</code> is False</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.datastore.AbstractDataStore.retrieve", "modulename": "hec.datastore", "qualname": "AbstractDataStore.retrieve", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.datastore.AbstractDataStore.start_time", "modulename": "hec.datastore", "qualname": "AbstractDataStore.start_time", "kind": "variable", "doc": "<p>The start time of the data store's time window (if any)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[hec.hectime.HecTime]"}, {"fullname": "hec.datastore.AbstractDataStore.store", "modulename": "hec.datastore", "qualname": "AbstractDataStore.store", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"nb\">object</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.datastore.AbstractDataStore.time_window", "modulename": "hec.datastore", "qualname": "AbstractDataStore.time_window", "kind": "variable", "doc": "<p>The data store's time window (if any)</p>\n\n<ul>\n<li><strong>Getting</strong>: same as (ds.start_time, ds.end_time)</li>\n<li><strong>Setting</strong>: same as ds.start_time, ds.end_time = tw</li>\n</ul>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Tuple[Optional[hec.hectime.HecTime], Optional[hec.hectime.HecTime]]"}, {"fullname": "hec.datastore.AbstractDataStore.time_zone", "modulename": "hec.datastore", "qualname": "AbstractDataStore.time_zone", "kind": "variable", "doc": "<p>The time zone associated with the data store</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.datastore.AbstractDataStore.trim", "modulename": "hec.datastore", "qualname": "AbstractDataStore.trim", "kind": "variable", "doc": "<p>Whether the datastore will trim missing values from the edges of retrieved regular time series</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.datastore.AbstractDataStore.units", "modulename": "hec.datastore", "qualname": "AbstractDataStore.units", "kind": "variable", "doc": "<p>The unit system ('EN' or 'SI') associated with the data store</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.datastore.AbstractDataStore.vertical_datum", "modulename": "hec.datastore", "qualname": "AbstractDataStore.vertical_datum", "kind": "variable", "doc": "<p>The vertical datum ('NGVD29', 'NAVD88', 'OTHER') associated with the data store</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[str]: _description_</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.duration", "modulename": "hec.duration", "kind": "module", "doc": "<p>Provides standard time durations</p>\n"}, {"fullname": "hec.duration.DurationException", "modulename": "hec.duration", "qualname": "DurationException", "kind": "class", "doc": "<p>Exception specific to Duration operations</p>\n", "bases": "hec.timespan.TimeSpanException"}, {"fullname": "hec.duration.Duration", "modulename": "hec.duration", "qualname": "Duration", "kind": "class", "doc": "<p>Class to hold information about the durations represented by time series values.</p>\n\n<p>Durations are a restriction of the TimeSpan base class that also hold extra information.</p>\n\n<ul>\n<li><strong>Restriction:</strong> At most one of <code>years</code>, <code>months</code>, <code>days</code>, <code>hours</code>, and <code>minutes</code> can be non-zero, and <code>seconds</code> must be zero.</li>\n<li><strong>Extension:</strong>\n<ul>\n<li>Each duration has a name</li>\n<li>Each duration is a Beginning of Period (BOP) or End of Period (EOP) duration. Normally values\nrepresent the state at the end of duration (e.g, the elevation or flow at the end of an hour or day).\nEOP Duration objects are returned unless otherwise specified.</li>\n</ul></li>\n</ul>\n\n<p>Durations should not need to be created by the user, as durations for all CWMS intervals are created\nduring module initialization.</p>\n", "bases": "hec.timespan.TimeSpan"}, {"fullname": "hec.duration.Duration.__init__", "modulename": "hec.duration", "qualname": "Duration.__init__", "kind": "function", "doc": "<p>Initializer used by module</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">bop</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "hec.duration.Duration.is_bop", "modulename": "hec.duration", "qualname": "Duration.is_bop", "kind": "variable", "doc": "<p>Whether this object is a Beginning of Period Duration</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.duration.Duration.is_eop", "modulename": "hec.duration", "qualname": "Duration.is_eop", "kind": "variable", "doc": "<p>Whether this object is an End of Period Duration</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.duration.Duration.for_interval", "modulename": "hec.duration", "qualname": "Duration.for_interval", "kind": "function", "doc": "<p>Returns a Duration object for a specified interval</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>interval (Union[Interval, str, int]):</strong>  A standard CWMS Interval object, or the name or\n(actual or characteristic) minutes of a standard CWMS interval</li>\n<li><strong>bop (bool, optional):</strong>  Specifies whether to return a Beginning of Period Duration object.\nDefaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  If the first argument is not an Interval, string, or integer</li>\n<li><strong>DurationException:</strong>  If the first argument a non-standard name or minutes or\nno such Duration object exists</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Duration: The Duration object matching the specified interval and bop setting.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">bop</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">duration</span><span class=\"o\">.</span><span class=\"n\">Duration</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.duration.Duration.minutes", "modulename": "hec.duration", "qualname": "Duration.minutes", "kind": "variable", "doc": "<p>The minutes (actual or characteristic) of this object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.duration.Duration.name", "modulename": "hec.duration", "qualname": "Duration.name", "kind": "variable", "doc": "<p>The name of this object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.hectime", "modulename": "hec.hectime", "kind": "module", "doc": "<p>Module to provide native python compatibility for the <code>hec.heclib.util.HecTime</code> java class</p>\n\n<p><strong>NOTE</strong> Static java fields and methods are now module constants and functions (e.g., java <code>HecTime.isLeap()</code> -> python <code>hectime.is_leap()</code>)</p>\n\n<p>Jump to <a href=\"#HecTime\"><strong><code>class HecTime</code></strong></a></p>\n"}, {"fullname": "hec.hectime.UNDEFINED_TIME", "modulename": "hec.hectime", "qualname": "UNDEFINED_TIME", "kind": "variable", "doc": "<p>The value for a time integer that repsents that the time has either not been set yet\nor has been set incorrectly.</p>\n", "annotation": ": int", "default_value": "-4294967296"}, {"fullname": "hec.hectime.SECOND_GRANULARITY", "modulename": "hec.hectime", "qualname": "SECOND_GRANULARITY", "kind": "variable", "doc": "<p>Value that specifies that each granule represents one second</p>\n\n<ul>\n<li>Values are offset from <code>[1970, 1, 1, 0, 0, 0]</code></li>\n<li>Earliest represntable time is <code>[1901, 12, 13, 20, 45, 52]</code> (integer value = <code>-2147483648</code>)</li>\n<li>Latest represntable time is <code>[2038, 1, 19, 3, 14, 7]</code> (integer value = <code>2147483647</code>)</li>\n</ul>\n", "annotation": ": int", "default_value": "10"}, {"fullname": "hec.hectime.MINUTE_GRANULARITY", "modulename": "hec.hectime", "qualname": "MINUTE_GRANULARITY", "kind": "variable", "doc": "<p>Value that specifies that each granule represents one minute. New HecTime objects default to\nthis granularity if not otherwise specified.</p>\n\n<ul>\n<li>Values are offset from <code>[1899, 12, 31, 0, 0, 0]</code></li>\n<li>Earliest represntable time is <code>[-2184, 12, 6, 21, 52, 0]</code> (integer value = <code>-2147483648</code>)</li>\n<li>Latest represntable time is <code>[5983, 1, 23, 2, 7, 0]</code> (integer value = <code>2147483647</code>)</li>\n</ul>\n", "annotation": ": int", "default_value": "11"}, {"fullname": "hec.hectime.HOUR_GRANULARITY", "modulename": "hec.hectime", "qualname": "HOUR_GRANULARITY", "kind": "variable", "doc": "<p>Value that specifies that each granule represents one hour</p>\n\n<ul>\n<li>Values are offset from <code>[1899, 12, 31, 0, 0, 0]</code></li>\n<li>Earliest represntable time is <code>[-243084, 3, 22, 16, 0, 0]</code> (integer value = <code>-2147483648</code>)</li>\n<li>Latest represntable time is <code>[246883, 10, 8, 7, 0, 0]</code> (integer value = <code>2147483647</code>)</li>\n</ul>\n", "annotation": ": int", "default_value": "12"}, {"fullname": "hec.hectime.DAY_GRANULARITY", "modulename": "hec.hectime", "qualname": "DAY_GRANULARITY", "kind": "variable", "doc": "<p>Value that specifies that each granule represents one day</p>\n\n<ul>\n<li>Values are offset from <code>[1899, 12, 31, 0, 0, 0]</code></li>\n<li>Earliest represntable time is <code>[-5877711, 6, 22, 0, 0, 0]</code> (integer value = <code>-2147483645</code>)</li>\n<li>Latest represntable time is <code>[5879610, 7, 10, 0, 0, 0]</code> (integer value = <code>2147483647</code>)</li>\n</ul>\n", "annotation": ": int", "default_value": "13"}, {"fullname": "hec.hectime.add_century", "modulename": "hec.hectime", "qualname": "add_century", "kind": "function", "doc": "<p>Converts 2-digit years into 4 digit years.</p>\n\n<p>If the year passed in is not in the range 0..99, the year is returned unchanged</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>y (int):</strong>  The year</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The year as a 4 digit year</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.clean_time", "modulename": "hec.hectime", "qualname": "clean_time", "kind": "function", "doc": "<p>Normalizes in integer list of either <code>[julian, minute]</code> or <code>[year, month, day, hour, minute, second]</code></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>values (list[int]):</strong>  Either <code>[julian, minute]</code> or `[year, month, day, hour, minute, second]</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.compute_number_intervals", "modulename": "hec.hectime", "qualname": "compute_number_intervals", "kind": "function", "doc": "<p>Returns the complete number of intervals between two times</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>start_time (int):</strong>  The time to compute the number of intervals from, in julian * 1440 + minutes_since_midnight</li>\n<li><strong>end_time (int):</strong>  The time to compute the number of intervals to, in julian * 1440 + minutes_since_midnight</li>\n<li><strong>interval (Union[Interval, int]):</strong>  The interval to compute the number for. If an integer, it must the the</li>\n<li>actual or characteristic minutes value of a standard Interval object.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if the interval is not one of the standard intervals</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The number of complete intervals between the two times</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">start_time</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">end_time</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.convert_time_zone", "modulename": "hec.hectime", "qualname": "convert_time_zone", "kind": "function", "doc": "<p>Converts an HecTime object from one time zone to another, optionally specifyintg that the\ntarget time zone does not observe Daylight Saving Time (DST). Only for HecTime objects\nconvertable to datetime objects (between 01Jan0001, 00:00 and 31Dec9999, 23:59).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>hectime (HecTime):</strong>  The HecTime object to convert</li>\n<li><strong>from_time_zone (ZoneInfo):</strong>  The time zone that the object is currently in</li>\n<li><strong>to_time_zone (ZoneInfo):</strong>  The target time</li>\n<li><strong>respect_daylight_savings (Optional[bool]):</strong>  Specifies whether the target time zone.\nshould observe DST. Defaults to True.\n<ul>\n<li>If <code>True</code>, the target time zone is used as specified</li>\n<li>If <code>False</code> and the specified target time zone observes DST, then a time zone is\nfound that has the same UTC offset as the specified target time zone but does not\nobserve DST.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  - If the HecTime object has an attached time zone that is not the same as <code>from_time_zone</code>.\n<ul>\n<li>If <code>respect_daylight_savings</code> is <code>True</code>, <code>to_time_zone</code> observes DST and no equivalent\ntime zone could be found that does not observer DST</li>\n<li>If the HecTime object is not convertable to a datetime object</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">hectime</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>,</span><span class=\"param\">\t<span class=\"n\">from_time_zone</span><span class=\"p\">:</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span>,</span><span class=\"param\">\t<span class=\"n\">to_time_zone</span><span class=\"p\">:</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span>,</span><span class=\"param\">\t<span class=\"n\">respect_daylight_savings</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.curtim", "modulename": "hec.hectime", "qualname": "curtim", "kind": "function", "doc": "<p>Get the current timm as days since 1899 and minutes past midnight and return in parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>julian (list[int]):</strong>  A list of length &gt; 0 whose first value receives the current days since 1899</li>\n<li><strong>minutes (list[int]):</strong>  A list of length &gt; 0 whose first value receives the current minutes past midnight</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#systim\"><strong><code>systim()</code></strong></a> instead</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">julian</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">minutes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.datcln", "modulename": "hec.hectime", "qualname": "datcln", "kind": "function", "doc": "<p>Normalizes a time specified in days since 1899 and minutes past midnight so that 0 &lt;= minutes_out &lt; 1440</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>julian_in (int):</strong>  _description_</li>\n<li><strong>minutes_in (int):</strong>  _description_</li>\n<li><strong>julian_out (list[int]):</strong>  _description_</li>\n<li><strong>minutes_out (list[int]):</strong>  _description_</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">julian_in</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">minutes_in</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">julian_out</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">minutes_out</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.datjul", "modulename": "hec.hectime", "qualname": "datjul", "kind": "function", "doc": "<p>Parses a date string and sets the the number of days since 1899 in the return variable</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>datestr (str):</strong>  The date string (may contain time portion)</li>\n<li><strong>julian (list[int]):</strong>  A list of length &gt; 0 that whose first element receives the days since 1988</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if the date string cannot be successfully parsed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">datestr</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">julian</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.datymd", "modulename": "hec.hectime", "qualname": "datymd", "kind": "function", "doc": "<p>Parses a date string and sets the year, month, and day in the return variable</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>datestr (str):</strong>  The date string to parse (may contain a time portion)</li>\n<li><strong>ymd (list[int]):</strong>  A list of length &gt; 2 whose first three elements receive the year, month, and day</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: 0 on success or -1 otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">datestr</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">ymd</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.get_time_int", "modulename": "hec.hectime", "qualname": "get_time_int", "kind": "function", "doc": "<p>Return a time integer for specified time values and granularity</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>values (list[int]):</strong>  The time values (<code>[year, month, day, hour, minute, second]</code>)</li>\n<li><strong>granularity (int):</strong>  The granularity of the time integer to return</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if values is less than six items in length</li>\n<li><strong>HecTimeException:</strong>  if the specified granularity is not valid</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The time integer for the specified time values and granularity</p>\n</blockquote>\n\n<h6 id=\"see\">See:</h6>\n\n<blockquote>\n  <p><a href=\"#is_valid_granularity\"><code>is_valid_granularity(...)</code></a></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">granularity</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.get_time_vals", "modulename": "hec.hectime", "qualname": "get_time_vals", "kind": "function", "doc": "<p>Return time values for a time value and granularity</p>\n\n<p><strong>NOTE</strong> This function always returns midnight as <code>[..., 0, 0, 0]</code>.\nUse <a href=\"#to2400\"><code>to2400(...)</code></a> to get midnight as hour 24</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>time_int (int):</strong>  The time integer to return the time values for</li>\n<li><strong>granularity (int):</strong>  The granularity of the time integer</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if time_int is not valid for the specified granularity</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[int]: The list of time values (<code>[year, month, day, hour, minute, second]</code>) represented by the time integer in and granularity</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">time_int</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">granularity</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.get_time_window", "modulename": "hec.hectime", "qualname": "get_time_window", "kind": "function", "doc": "<p>Parses or computes the start and end of a time window specified as a string in the general form\n<code>start_time</code> <code>end_time</code> and return the computed times in the specified parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>time_window_str (str):</strong>  The time window string. Both start time and end time may be absolute times or relative times.\nThe string is not case sensitive, but the start and end times must be separated by a comma or whitespace.\n<ul>\n<li>If absolute:\n<ul>\n<li>may contain commas and/or spaces</li>\n<li>may specify a time portion or not:</li>\n</ul></li>\n<li>If relative:\n<ul>\n<li>may not contain commas or spaces</li>\n<li>are of the format &lt;<em>anchor</em>&gt;&lt;<em>offset</em>&gt;... where each offset is of the format [+-]&lt;<em>count</em>&gt;&lt;<em>unit</em>&gt;\nMultiple offsets are allowed.\n<ul>\n<li>Valid anchors are:\n<ul>\n<li><code>T</code> the current time</li>\n<li><code>D</code> the start of the current day</li>\n<li><code>B</code> or <code>S</code> - the start time (allowed only on end time and end must not depend on start time)</li>\n<li><code>E</code> - the end time (allowed only on start time and the start time must not depend on end time)<br></li>\n</ul></li>\n<li>The unit for each offset must be one of:\n<ul>\n<li><code>Y</code> - year(s)</li>\n<li><code>M</code> - month(s)</li>\n<li><code>D</code> - days(s)</li>\n<li><code>H</code> - hour(s)</li>\n</ul></li>\n</ul></li>\n</ul></li>\n<li>Examples:\n<ul>\n<li><code>01Aug2024, 01:00 31Aug2024 2400</code></li>\n<li><code>2024-01-01 2024-12-31,24:00</code></li>\n<li><code>t-7d, t</code></li>\n<li><code>e-1m+1d-2h,d</code></li>\n<li><code>01Aug2024, 01:00, s+1m</code></li>\n</ul></li>\n</ul></li>\n<li><strong>start_time (HecTime):</strong>  Is set to the parsed or computed start time if returned status == 0</li>\n<li><strong>end_time (HecTime):</strong>  Is set to the parsed or computed end time if returned status == 0</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: <code>0</code> on success or <code>-1</code> on failure to parse the string</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">time_window_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">start_time</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>,</span><span class=\"param\">\t<span class=\"n\">end_time</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.getime", "modulename": "hec.hectime", "qualname": "getime", "kind": "function", "doc": "<p>Parses or computes the start and end of a time window specified as a string in the general form\n<code>start_time</code> <code>end_time</code> and return the computed times in the specified parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>time_window_str (str):</strong>  The time window string. Both start time and end time may be absolute times or relative times.\nThe string is not case sensitive, but the start and end times must be separated by a comma or whitespace.\n<ul>\n<li>If absolute:\n<ul>\n<li>may contain commas and/or spaces</li>\n<li>may specify a time portion or not:</li>\n</ul></li>\n<li>If relative:\n<ul>\n<li>may not contain commas or spaces</li>\n<li>are of the format &lt;<em>anchor</em>&gt;&lt;<em>offset</em>&gt;... where each offset is of the format [+-]&lt;<em>count</em>&gt;&lt;<em>unit</em>&gt;\nMultiple offsets are allowed.\n<ul>\n<li>Valid anchors are:\n<ul>\n<li><code>T</code> the current time</li>\n<li><code>D</code> the start of the current day</li>\n<li><code>B</code> or <code>S</code> - the start time (allowed only on end time and end must not depend on start time)</li>\n<li><code>E</code> - the end time (allowed only on start time and the start time must not depend on end time)<br></li>\n</ul></li>\n<li>The unit for each offset must be one of:\n<ul>\n<li><code>Y</code> - year(s)</li>\n<li><code>M</code> - month(s)</li>\n<li><code>D</code> - days(s)</li>\n<li><code>H</code> - hour(s)</li>\n</ul></li>\n</ul></li>\n</ul></li>\n<li>Examples:\n<ul>\n<li><code>01Aug2024, 01:00 31Aug2024 2400</code></li>\n<li><code>2024-01-01 2024-12-31,24:00</code></li>\n<li><code>t-7d, t</code></li>\n<li><code>e-1m+1d-2h,d</code></li>\n<li><code>01Aug2024, 01:00, s+1m</code></li>\n</ul></li>\n</ul></li>\n<li><strong>start_jul (list[int]):</strong>  Element[0] receives the days since 1899 for the start time if status[0] == 0</li>\n<li><strong>start_min (list[int]):</strong>  Element[0] receives the minutes past midnight for the start time if status[0] == 0</li>\n<li><strong>end_jul (list[int]):</strong>  Element[0] receives the days since 1899 for the end time if status[0] == 0</li>\n<li><strong>end_min (list[int]):</strong>  Element[0] receives the minutes past midnight for the end time if status[0] == 0</li>\n<li><strong>status (list[int]):</strong>  Element[0] recieves <code>0</code> if the time window string was successfully parsed, <code>-1</code> otherwise</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">time_window_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">start_jul</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">start_min</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end_jul</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end_min</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">status</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.hm2m", "modulename": "hec.hectime", "qualname": "hm2m", "kind": "function", "doc": "<p>Converts a time in hhmm format (integer or string) to minutes</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>hm (int):</strong>  The time to convert (e.g, '0730', 730)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The equivalent minutes (e.g., 450)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">hm</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.idaywk", "modulename": "hec.hectime", "qualname": "idaywk", "kind": "function", "doc": "<p>Returns the weekday (1=Sunday -> 7=Saturday) for the specified date.</p>\n\n<p><strong>NOTE</strong> This differs from <code>datetime.weekday()</code> whch returns 0=Monday -> 6=Sunday.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><p><strong>date (Union[int, list[int]]):</strong>  The date as:</p>\n\n<ul>\n<li><code>int</code> - number of days since 1899</li>\n<li><code>list</code> - a list of at least 3 integers specifying the year, month and day</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The weekday (1=Sunday -> 7=Saturday)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">date</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.ihm2m", "modulename": "hec.hectime", "qualname": "ihm2m", "kind": "function", "doc": "<p>Converts a string in hhmm format to integer minutes</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>hm (int):</strong>  The time to convert (e.g, '0730', 730)</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#hm2m\"><strong><code>hm2m()</code></strong></a> instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The equivalent minutes (e.g., 450)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">hm</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.ihm2m_2", "modulename": "hec.hectime", "qualname": "ihm2m_2", "kind": "function", "doc": "<p>Converts integers in a string to integer minutes</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>hm (str):</strong>  The string to collect integers from. Valid strings are:\n<ul>\n<li>\"0730\"</li>\n<li>\"730\"</li>\n<li>\"7 30\"</li>\n<li>\"0 7 3 0\"</li>\n<li>\"7H30M\"</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The equivalent minutes (e.g., 450)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">hm</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.increment_time_vals", "modulename": "hec.hectime", "qualname": "increment_time_vals", "kind": "function", "doc": "<p>Increment or decrement time values by a specified amount and return the result</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>values (list[int]):</strong>  The time values (<code>[year, month, day, hour, minute, sec]</code>) to increment/decrement.</li>\n<li><strong>increment_value (int):</strong>  The number of granules to increment (&gt;0) or decrement (&lt;0)</li>\n<li><strong>granularity (int):</strong>  The granule size (SECOND_GRANULE, MINUTE_GRANULE, HOUR_GRANULE, or DAY_GRANULE)</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if values is less than six items in length</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[int]: The incremented or decremented values</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">increment_value</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">granularity</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.inctim", "modulename": "hec.hectime", "qualname": "inctim", "kind": "function", "doc": "<p>Increments a number of days since 1899 and minutes past midnight by a specified number of intervals of a specified size</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>6 Parameters:</strong>\n<ul>\n<li><strong>interval (Union[TimeSpan, timedelta, int]):</strong> - If integer, it is in minutes</li>\n<li><strong>num_periods (int):</strong> - The number of intervals to increment</li>\n<li><strong>start_julian (int):</strong> - The starting number of days since 1899</li>\n<li><strong>start_minute (int):</strong> - The starting minutes past midnight</li>\n<li><strong>end_julian (list[int]):</strong> - Element 0 receives the ending days since 1899</li>\n<li><strong>end_minute (list[int]):</strong> - Element 0 receives the ending minutes past midnight</li>\n</ul></li>\n<li><strong>7 Parameters:</strong>\n<ul>\n<li><strong>interval (int):</strong> - The interval in minutes or days</li>\n<li><strong>unit_flag (int):</strong> - A flag spcifying whether <code>interval</code> is in minutes (<code>0</code>) or days (<code>1</code>)</li>\n<li><strong>start_julian (int):</strong> - The starting number of days since 1899</li>\n<li><strong>start_minute (int):</strong> - The starting minutes past midnight</li>\n<li><strong>end_julian (list[int]):</strong> - Element 0 receives the ending days since 1899</li>\n<li><strong>end_minute (list[int]):</strong> - Element 0 receives the ending minutes past midnight</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if invalid arguments are passed to the function</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.is_leap", "modulename": "hec.hectime", "qualname": "is_leap", "kind": "function", "doc": "<p>Return whether the specified year is a leap year</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>y (int):</strong>  The year</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether the year is a leap year</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.is_valid_granularity", "modulename": "hec.hectime", "qualname": "is_valid_granularity", "kind": "function", "doc": "<p>Return whether specified granularity is valid</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (int):</strong>  The granularity value to test</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether the value is one of</p>\n  \n  <ul>\n  <li><a href=\"#SECOND_GRANULARITY\"><code>SECOND_GRANULARITY</code></a></li>\n  <li><a href=\"#MINUTE_GRANULARITY\"><code>MINUTE_GRANULARITY</code></a></li>\n  <li><a href=\"#HOUR_GRANULARITY\"><code>HOUR_GRANULARITY</code></a></li>\n  <li><a href=\"#DAY_GRANULARITY\"><code>DAY_GRANULARITY</code></a></li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.is_valid_time", "modulename": "hec.hectime", "qualname": "is_valid_time", "kind": "function", "doc": "<p>Return whether a specified time integer or time values are in the valid range for the specified granularity</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>date_time (Union[int, list[int]]):</strong>  The time integer or time values (<code>[year, month, day, hour, minute, second]</code>) to check validity for</li>\n<li><strong>granularity (int):</strong>  The granularity to check validity for</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether the time integer or time values are in the valid range for the granularity</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">date_time</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span>, </span><span class=\"param\"><span class=\"n\">granularity</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.iymdjl", "modulename": "hec.hectime", "qualname": "iymdjl", "kind": "function", "doc": "<p>Returns the number of days since 31Dec1899 for a specified year, month, and day</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>year (int):</strong>  The year</li>\n<li><strong>month (int):</strong>  The month</li>\n<li><strong>day (int):</strong>  The day</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#year_month_day_to_julian\"><strong><code>year_month_day_to_julian()</code></strong></a> instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The number of days sinc 31Dec1899</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">month</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">day</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.jliymd", "modulename": "hec.hectime", "qualname": "jliymd", "kind": "function", "doc": "<p>Populates year, month, and day arguments with the appropriate values for a specified number of days since 31Dec1899</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>2 args:</strong>\n<ul>\n<li><strong>jul (int):</strong> The number of days since 31Dec1899</li>\n<li><strong>ymd (list[int]):</strong> A list of length &gt;= 3 that receives the year, month, and day</li>\n</ul></li>\n<li><strong>4 args</strong>\n<ul>\n<li><strong>jul (int):</strong> The number of days since 31Dec1899</li>\n<li><strong>year (list[int]):</strong> An integer list whose first value received the year</li>\n<li><strong>month (list[int]):</strong> An integer list whose first value received the month</li>\n<li><strong>day (list[int]):</strong> An integer list whose first value received the day</li>\n</ul></li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#julian_to_year_month_day\"><strong><code>julian_to_year_month_day()</code></strong></a> instead</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if invalid arguments are specified</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.juldat", "modulename": "hec.hectime", "qualname": "juldat", "kind": "function", "doc": "<p>Returns the date of the specified number of days since 31Dec1899 in the specified style</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>julian (int):</strong>  The number of days since 1899</li>\n<li><strong>style (int):</strong>  The style to return the date in. See <a href=\"#HecTime.date\"><strong><code>date()</code></strong></a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The date in the specified style</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">julian</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">style</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.julian_to_year_month_day", "modulename": "hec.hectime", "qualname": "julian_to_year_month_day", "kind": "function", "doc": "<p>Populates year, month, and day arguments with the appropriate values for a specified number of days since 31Dec1899</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>2 args</strong>:\n<ul>\n<li><strong>jul (int):</strong> The number of days since 31Dec1899</li>\n<li><strong>ymd (list[int]):</strong> A list of length &gt;= 3 that receives the year, month, and day</li>\n</ul></li>\n<li><strong>4 args</strong>\n<ul>\n<li><strong>jul (int):</strong> The number of days since 31Dec1899</li>\n<li><strong>year (list[int]):</strong> An integer list whose first value received the year</li>\n<li><strong>month (list[int]):</strong> An integer list whose first value received the month</li>\n<li><strong>day (list[int]):</strong> An integer list whose first value received the day</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if invalid arguments are specified</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.m2hm", "modulename": "hec.hectime", "qualname": "m2hm", "kind": "function", "doc": "<p>Returns the equivalent time integer (hhmm) for a specified minute count</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>m (int):</strong>  The minutes to convert (e.g., 450)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The time equivalent in hhmm (e.g, 730)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.m2ihm", "modulename": "hec.hectime", "qualname": "m2ihm", "kind": "function", "doc": "<p>Returns the equivalent time integer (hhmm) for a specified minute count and\nplaces the string representaion in HHMM format in the specified variable</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>m (int):</strong>  The minutes to convert (e.g., 450)</li>\n<li><strong>hour_minutes (list[str]):</strong>  Element 0 receives string equivalen in HHMM format (e.g., \"0730\")</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#m2hm\"><strong><code>m2hm()</code></strong></a> instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The time equivalent in hhmm (e.g, 730)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mintues</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">hour_minutes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.max_day", "modulename": "hec.hectime", "qualname": "max_day", "kind": "function", "doc": "<p>Return the last month day for a specified year and month</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>y (int):</strong>  The year</li>\n<li><strong>m (int):</strong>  The month</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The last calendar day of the specified month</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.minutes_since_midnight", "modulename": "hec.hectime", "qualname": "minutes_since_midnight", "kind": "function", "doc": "<p>Returns the number of minutes past midnight for specified time values</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>values (list[int]):</strong>  The time values (<code>[year, month, day, hour, minute, second]</code>)</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  If <code>values</code> is less than six items in length</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The number of minutes past midnight</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.next_month", "modulename": "hec.hectime", "qualname": "next_month", "kind": "function", "doc": "<p>Returns the next year and for a specified year and month.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>y (int):</strong>  The specified year</li>\n<li><strong>m (int):</strong>  The specified month</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[int, int]: The next year and month</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.NoOpWarning", "modulename": "hec.hectime", "qualname": "NoOpWarning", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.nopers", "modulename": "hec.hectime", "qualname": "nopers", "kind": "function", "doc": "<p>Returns the complete number of intervals between two times</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>5-parameter version\n<ul>\n<li><strong>interval (Union[Interval, int]):</strong> The interval to compute the number of. If an integer, must be the\nactual or characteristic minutes of a standard Interval object</li>\n<li><strong>start_julian (int):</strong> The days since 1899 of the first time</li>\n<li><strong>start_minute (int):</strong> The minutes past midnight of the first time</li>\n<li><strong>end_julian (int):</strong> The days since 1899 of the second time</li>\n<li><strong>end_minute (int):</strong> The minutes past midnight of the second time</li>\n</ul></li>\n<li>6 parameter version\n<ul>\n<li><strong>interval (int):</strong> The number of minutes or days in the interval to compute the number of. Must be the\nactual or characteristic number of minutes (or equivalent days) of a standard Interval object</li>\n<li><strong>unit_flag (int):</strong> 0 for interval in minutes, 1 for interval in days</li>\n<li><strong>start_julian (int):</strong> The days since 1899 of the first time</li>\n<li><strong>start_minute (int):</strong> The minutes past midnight of the first time</li>\n<li><strong>end_julian (int):</strong> The days since 1899 of the second time</li>\n<li><strong>end_minute (int):</strong> The minutes past midnight of the second time</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if the interval is not one of the standard intervals</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The number of complete intervals between the two times</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.normalize_date_style", "modulename": "hec.hectime", "qualname": "normalize_date_style", "kind": "function", "doc": "<p>Returns a valid date style for a specified input style</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>style (int):</strong>  The input date style</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The valid date style</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">style</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.normalize_time_vals", "modulename": "hec.hectime", "qualname": "normalize_time_vals", "kind": "function", "doc": "<p>Normalize a list of time values (<code>[year, month, day, hour, minute, second]</code>) in place.</p>\n\n<p>Adjusts each element of the list to be in the valid range for a date/time value.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>values (list[int]):</strong>  The values to normalize.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if values is less that six items in length</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.NotImplementedWarning", "modulename": "hec.hectime", "qualname": "NotImplementedWarning", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.parse_date_time_str", "modulename": "hec.hectime", "qualname": "parse_date_time_str", "kind": "function", "doc": "<p>Parse date/time strings of various formats into time values (<code>[year, month, day, hour, minute, second]</code> and an optional time zone string).</p>\n\n<p>The string must contain at least year, month, day. Missing seconds, (minutes, seconds), or (hours, minutes, seconds)\nare set to zero.</p>\n\n<p>For strings that cannot be parsed with this method, use <a href=\"#HecTime.strptime\"><strong><code>HecTime.strptime()</code></strong></a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>date_time_str (str):</strong>  The date/time string</li>\n<li><strong>include_tz (bool):</strong>  Whether to include the time zone portion if date_time_str is in ISO-8601 format.</li>\n<li>If  <code>True</code>, the tuple returned will include the time zone string. Defaults to False</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if date_time_str cannot be parsed into at least year, month, and day</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[list[int], Optional[str]]:\n      *Position 0: The time values as parsed from the date/time string: <code>[year, month, day, hour, minute, second]</code>\n      *Position 1: The time zone string if <code>include_tz == True</code> and <code>date_time_str</code> has a time zone portion, otherwise None</p>\n</blockquote>\n\n<h6 id=\"see-also\">See Also:</h6>\n\n<blockquote>\n  <p><a href=\"#HecTime.strptime\"><strong><code>HecTime.strptime()</code></strong></a></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">date_time_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">include_tz</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.previous_month", "modulename": "hec.hectime", "qualname": "previous_month", "kind": "function", "doc": "<p>Returns the previous year and for a specified year and month.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>y (int):</strong>  The specified year</li>\n<li><strong>m (int):</strong>  The specified month</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[int, int]: The previous year and month</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.seconds_since_midnight", "modulename": "hec.hectime", "qualname": "seconds_since_midnight", "kind": "function", "doc": "<p>Returns the number of seconds past midnight for specified time values</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>values (list[int]):</strong>  The time values (<code>[year, month, day, hour, minute, second]</code>)</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  If <code>values</code> is less than six items in length</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The number of seconds past midnight</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.systim", "modulename": "hec.hectime", "qualname": "systim", "kind": "function", "doc": "<p>Get the current time as days since 1899 and minutes or seconds past midnight and return in parameters,\noptionally in a specified time zone</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>julian (list[int]):</strong>  A list of length &gt; 0 whose first value receives the current days since 1899</li>\n<li><strong>time (list[int]):</strong>  A list of length &gt; 0 whose first value receives the current minutes or seconds past midnight</li>\n<li><strong>time_in_minutes (Optional[bool]):</strong>  Specifies whether to return the time in minutes (<code>True</code>) or seconds (<code>False</code>) past midnight.\nDefault is False</li>\n<li><strong>in_time_zone (Optional[str]):</strong>  If present, specifies the time zone of the current time. The days and time values\nwill be converted from this time zone to UTC</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">julian</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">time_in_minutes</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">in_time_zone</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.to0000", "modulename": "hec.hectime", "qualname": "to0000", "kind": "function", "doc": "<p>Return a copy of time values (<code>[year, month, day, hour, minute, second]</code>) with\n<code>[..., 24, 0, 0]</code> changed to <code>[..., 0, 0, 0]</code> of the next day</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>values (list[int]):</strong>  The values to modify if ending in <code>[24, 0, 0]</code></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if values less than six items in length</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[int]: A copy of the time values, modified if necessrary</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.to2400", "modulename": "hec.hectime", "qualname": "to2400", "kind": "function", "doc": "<p>Return a copy of time values (<code>[year, month, day, hour, minute, second]</code>) with\n<code>[..., 0, 0, 0]</code> changed to <code>[..., 24, 0, 0]</code> of the previous day</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>values (list[int]):</strong>  The values to modify if ending in <code>[0, 0, 0]</code></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if values less than six items in length</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[int]: A copy of the time values, modified if necessrary</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.year_month_day_to_julian", "modulename": "hec.hectime", "qualname": "year_month_day_to_julian", "kind": "function", "doc": "<p>Returns the number of days since 31Dec 1899 for a specified year, month, and day</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>y (int):</strong>  The year</li>\n<li><strong>m (int):</strong>  The month</li>\n<li><strong>d (int):</strong>  The day</li>\n<li><strong>account_for_offset (bool) :</strong>  (Default = True) Specifies whether to account for the missing date (31Dec0004).\nThis should be True unless the function is called from an HecTime method which already\naccounts for it.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The number of days since 31Dec1899</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">account_for_offset</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.ymddat", "modulename": "hec.hectime", "qualname": "ymddat", "kind": "function", "doc": "<p>Returns the date in the specified style</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ymd (list[int]):</strong>  The year, month, and day to format</li>\n<li><strong>style (int):</strong>  The style to use (see <a href=\"#HecTime.date\"><strong><code>HecTime.date()</code></strong></a>)</li>\n<li><strong>err (list[int]):</strong>  Element 0 recieve <code>0</code> on success and <code>-1</code> otherwise</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The date in the specified style, or None if err[0] == -1</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ymd</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">style</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.zofset", "modulename": "hec.hectime", "qualname": "zofset", "kind": "function", "doc": "<p>Computes the offet into a standard interval and/or adjusts the specified time to be at the computed offset</p>\n\n<p><strong>NOTE:</strong> Unlike <a href=\"#HecTime.adjust_to_interval_offset\"><code>HecTime.adjust_to_interval_offset</code></a>, any adjustments made will result\nin the output time being earlier than the input time.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>julian (list[int]):</strong>  On input, element 0 specifies the days since 1899 of the date On output,\nelement[0] recieves the adjusted days since 1899 if operation is <code>1</code> or <code>2</code></li>\n<li><strong>minutes (list[int]):</strong>  On input, element 0 specifies the minutes past midnight of the time. On output,\nelement[0] recieves the adjusted minutes past midnight if operation is <code>1</code> or <code>2</code></li>\n<li><strong>interval (int):</strong>  The interval used to compute the offset and/or adjust the time</li>\n<li><strong>operation (int):</strong> <br>\n<ul>\n<li><strong>0:</strong> Compute the offset only (return in <code>offset[0]</code>)</li>\n<li><strong>1:</strong> Compute the offset (return in <code>offset[0]</code>) and adjust the time to the offset\n(return in <code>julian[0]</code> and <code>minutes[0]</code>)</li>\n<li><strong>2:</strong> adjust the time to the offset only (return in <code>julian[0]</code> and <code>minutes[0]</code>)</li>\n</ul></li>\n<li><strong>offset (list[int]):</strong>  On output, element 0 receives the computed offset if operation is <code>0</code> or <code>1</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">julian</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">minutes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">operation</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTimeException", "modulename": "hec.hectime", "qualname": "HecTimeException", "kind": "class", "doc": "<p>Exception specific to the hectime module</p>\n", "bases": "builtins.Exception"}, {"fullname": "hec.hectime.HecTime", "modulename": "hec.hectime", "qualname": "HecTime", "kind": "class", "doc": "<p>Class to facilitate moving Jython scripts that use Java class <code>hec.heclib.util.</code><code>HecTime</code> to Python</p>\n\n<h6 id=\"implementation\">Implementation:</h6>\n\n<blockquote>\n  <p><strong>Compatibility with Java HecTime</strong></p>\n  \n  <p>This class replicates the capabilities of the Java <code>hec.heclib.util.HecTime</code> class, and uses the same method names\n  except the camel case names of the Java class have been renamed to snake case to match Python naming standards as shown in the following examples:</p>\n\n<pre>\n<table>\n<tr><th>Java Method Name</th><th>Python Method Name</th></tr>\n<tr><td>adjustToIntervalOffset()</td><td>adjust_to_interval_offset()</td></tr>\n<tr><td>computeNumberIntervals()</td><td>compute_number_intervals()</td></tr>\n</table>\n</pre>\n  \n  <p><strong>Granularity</strong></p>\n  \n  <p>Like Java HecTime, <code>HecTime</code> objects can be instaniated with different time granularities, with each granule specifying a\n  second, minute, hour, or day. Specifically:</p>\n\n<pre>\n<table>\n<tr><th>Granularity</th><th>Integer Range</th><th>Each Granule Specifies</th><th>Date Range</th></tr>\n<tr><td>SECOND_GRANULARITY<br>= 10</td><td>-2147483648<br>+2147483647</td><td>Seconds after<br>01Jan1970, 00:00</td><td>+1901-12-13T20:45:52<br>+2030-01-19T03:14:17</td></tr>\n<tr><td>MINUTE_GRANULARITY<br>= 11</td><td>-2147483648<br>+2147483647</td><td>Minutes after<br>31Dec1899, 00:00</td><td>-2184-12-06T21:52<br>+5983-01-23T02:07</td></tr>\n<tr><td>HOUR_GRANULARITY<br>= 12</td><td>-2147483648<br>+2147483647</td><td>Hours after<br>31Dec1899, 00:00</td><td>-243084-03-22T16<br>+246883-10-08T07</td></tr>\n<tr><td>DAY_GRANULARITY<br>= 13</td><td>-2147483645<br>+2146789687</td><td>Days after<br>31Dec1899</td><td>-5877711-06-22<br>+5879610-07-10</td></tr>\n</table>\n</pre>\n  \n  <p>The default granularity is MINUTE_GRANULARITY, but this may be overridden when calling <a href=\"#HecTime\"><code>HecTime()</code></a>.</p>\n  \n  <p><strong>Chainable methods</strong></p>\n  \n  <p>Since, unlike Java, Python allows code to ignore the return value from functions and methods, many HecTime methods\n  with a <code>void</code> return type in Java now return a modified <code>HecTime</code> object. This allows the chaining of methods\n  together for simplify code. For example:</p>\n\n<pre>\nt = HecTime()\nt.set_current()\nt.adjust_to_interval_offset(intvl, 0)\nt.increment(1, intvl)\n</pre>\n  \n  <p>can now be coded as:</p>\n\n<pre>\nt = HecTime.now().adjust_to_interval_offset(intvl, 0).increment(1, intvl)\n</pre>\n  \n  <p>although the previous style is still supported.</p>\n  \n  <p><strong>Compatibility with <code>datetime</code></strong></p>\n  \n  <p>This class is written to be trivially convertable to/from <code>datetime</code> objects and updatable via <code>timedelta</code> objects.\n  Like <code>datetime</code> objects, <code>HecTime</code> objects are not time zone aware unless given time zone information. For <code>HecTime</code>\n  objects the <code>label_as_time_zone()</code> method is used for this purpose. Also like <code>datetime</code> objects, using the <a href=\"#HecTime.astimezone\"><code>astimezone()</code></a>\n  method causes the object to act as if it had been initialized with the local time zone.</p>\n  \n  <p>Initialization from a <code>datetime</code> object is acccomplished via <code>ht = HecTime(dt_obj)</code>. Retieval of a <code>datetime</code>\n  object is accomplished via <code>dt_obj = ht.datetime()</code>. The <a href=\"#HecTime.label_as_time_zone\"><code>HecTime.label_as_time_zone(tz)</code></a> accomplishes\n  the same thing as <code>datetime.replace(tzinfo=tz)</code>, and the <a href=\"#HecTime.astimezone\"><code>HecTime.astimezone(tz)</code></a> accomplishes\n  the same thing as <code>datetime.astimezone(tz)</code></p>\n  \n  <p><code>datetime</code> methods, properties, and operators supported in <code>HecTime</code> objects are:</p>\n  \n  <ul>\n  <li>Methods\n  <ul>\n  <li><code>now()</code> (static method)</li>\n  <li><code>astimezone(timezone)</code><sup>*</sup></li>\n  <li><code>strftime(format)</code></li>\n  <li><code>strptime(date_time_str, format)</code></li>\n  <li><code>__str__()</code> (used in <code>print()</code>)</li>\n  </ul></li>\n  <li>Properties\n  <ul>\n  <li><code>year</code></li>\n  <li><code>month</code></li>\n  <li><code>day</code></li>\n  <li><code>hour</code></li>\n  <li><code>minute</code></li>\n  <li><code>second</code></li>\n  <li><code>tzinfo</code></li>\n  </ul></li>\n  <li>Operators\n  <ul>\n  <li><code>+</code> and <code>+=</code></li>\n  <li><code>-</code> and <code>-=</code></li>\n  <li><code>==</code> and <code>!=</code></li>\n  <li><code>&lt;</code> and <code>&lt;=</code></li>\n  <li><code>&gt;</code> and &gt;=`</li>\n  </ul></li>\n  </ul>\n  \n  <p><sup>*</sup>The <code>astimezone(timezone)</code>, method, like all <code>HecTime</code> methods that take time zone will accept:</p>\n  \n  <ul>\n  <li><code>ZoneInfo</code> object</li>\n  <li>String (timezone name)</li>\n  <li><code>HecTime</code> object (the object's time zone is used)</li>\n  <li><code>datetime</code> object (the object's time zone is used)</li>\n  </ul>\n  \n  <p><em>Note:</em> Compatibility with <code>datetime</code> as well as time zone support is only available on <code>HecTime</code> objects that are\n  within the <code>datetime</code> object range of 01Jan0001, 00:00 through 31Dec9999, 23:59. Also, time zone support is not\n  provided for <code>HecTime</code> objects of <code>DAY_GRANULARITY</code>.</p>\n  \n  <p><strong>Addition, subtraction, and comparison operators</strong></p>\n  \n  <p><a name=\"addition\"></a>\n  Integers, <code>HecTime</code> objects, <a href=\"./timespan.html#TimeSpan\"><code>TimeSpan</code></a> objects, <a href=\"./interval.html#Interval\"><code>Interval</code></a> objects,\n  <a href=\"./duration.html#Duration\"><code>Duration</code></a> objects, <code>timedelta</code> objects, and specially formatted strings (see below) can be used\n  on the right side of the <code>+</code> and <code>+=</code> operators. The result is always another <code>HecTime</code> object. Allowing <code>HecTime</code> objects\n  to be added to each other breaks the similarity with <code>datetime</code>, but is included to provide the functionality Java HecTime.</p>\n  \n  <p><a name=\"subtraction\"></a>\n  Integers, <code>HecTime</code> objects, <code>datetime</code> objects, <a href=\"./timespan.html#TimeSpan\"><code>TimeSpan</code></a> objects, <a href=\"./interval.html#Interval\"><code>Interval</code></a>\n  objects, <a href=\"./duration.html#Duration\"><code>Duration</code></a> objects, <code>timedelta</code> objects, and specially formatted strings (see below) can be\n  used on the right side of the <code>-</code> or <code>-=</code> operators.</p>\n  \n  <ul>\n  <li>The result is an <code>HecTime</code> object when subtracting intgers, <a href=\"./timespan.html#TimeSpan\"><code>TimeSpan</code></a> objects,\n  <a href=\"./interval.html#Interval\"><code>Interval</code></a> objects, <a href=\"./duration.html#Duration\"><code>Duration</code></a> objects, <code>timedelta</code> objects and strings.</li>\n  <li>The result is a <a href=\"./timespan.html#TimeSpan\"><code>TimeSpan</code></a> object when subtracting <code>HecTime</code> objects</li>\n  <li>The result is a <code>timedelta</code> object when subtracting <code>datetime</code> objects</li>\n  </ul>\n  \n  <p>If the <code>HecTime</code> object on the left side of any <code>+</code>, <code>-</code>, <code>+=</code>, or <code>-=</code> operator has a time zone attached and the right-\n  side object is an <code>Interval</code> has the <code>is_local_regular</code> property of True, then addition and subtraction is performed\n  with respect to the time zone of the <code>HecTime</code> object. For example if the <code>HecTime</code> object is at midnight in the US/Pacific\n  time zone, then adding a local-regular interval of 2 hours will result in an <code>HecTime</code> object at 2 a.m. in the same time\n  zone. The actual amount of time added with respect to UTC will be 1, 2, or 3 hours, depending on the day, month, and year.</p>\n  \n  <p>Adding and subtracting integers adds or subracts the number of granules in the object so the change may be in seconds,\n  minutes, hours, or days, depending on the object's granularity.</p>\n  \n  <p>Strings of the format used for the offset portion of relative time strings in <a href=\"#get_time_window\"><code>get_time_window()</code></a> can be\n  used in addition and subtraction operators. Examples</p>\n  \n  <ul>\n  <li><code>t - \"1y\"</code> would return an <code>HecTime</code> object one year prior to the <code>t</code> object</li>\n  <li><code>t += \"3m-2d+1h\"</code> would increment the <code>t</code> object forward 3 months, back 2 days and forward 1 hour.</li>\n  </ul>\n  \n  <p>This precludes using ISO 8601 duration strings that have minutes or seconds components. To use these, create a <a href=\"./timespan.html#TimeSpan\"><code>TimeSpan</code></a>\n  object from the string for the addend</p>\n  \n  <p><code>HecTime</code> objects can be compared with each other or with <code>datetime</code> objects using the standard operators (<code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>).\n  Either type may be on either side of the operators.</p>\n  \n  <p><strong>Use of properties</strong></p>\n  \n  <p>Many methods are deprecated and will generate deprecation warnings when used. Most have been replaced by direct\n  read/write or read-only properties.</p>\n  \n  <p>The <code>value()</code>, <code>year()</code>, <code>month()</code>, <code>day()</code>, <code>hour()</code>, <code>minute()</code>, and <code>second()</code> methods are still supported but\n  are accessed in a more pythonic way as read/write (<code>value</code>) or read-only (<code>year</code>, <code>month</code>, <code>day</code>, <code>hour</code>, <code>minute</code>, <code>second</code>)\n  properties. There is no clean way to issue deprecation warning if these properties are accessed by their getter functions.</p>\n</blockquote>\n"}, {"fullname": "hec.hectime.HecTime.__init__", "modulename": "hec.hectime", "qualname": "HecTime.__init__", "kind": "function", "doc": "<p><a id=\"HecTime.__init__\">Initializes a newly-created <code>HecTime</code> object.</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong><code>HecTime()</code></strong> initializes granularity to <a href=\"#MINUTE_GRANULARITY\"><code>MINUTE_GRANULARITY</code></a> and time to <a href=\"#UNDEFINED_TIME\"><code>UNDEFINED_TIME</code></a></li>\n<li><strong><code>HecTime(granularity: int)</code></strong> initializes granularity to <code>granularity</code> and time to <a href=\"#UNDEFINED_TIME\"><code>UNDEFINED_TIME</code></a></li>\n<li><strong><code>HecTime(values: Union[list[int],tuple[int,...]])</code></strong> initializes granularity to <a href=\"#MINUTE_GRANULARITY\"><code>MINUTE_GRANULARITY</code></a> and time to <code>values</code></li>\n<li><strong><code>HecTime(other_hec_time: HecTime)</code></strong> initializes to the same granularity and time as <code>other_hec_time</code></li>\n<li><strong><code>HecTime(dt: datetime)</code></strong> initializes granularity to <a href=\"#MINUTE_GRANULARITY\"><code>MINUTE_GRANULARITY</code></a> and time to the value of <code>dt</code>.</li>\n<li><strong><code>HecTime(date_time_str: str)</code></strong> initializes granularity to <a href=\"#MINUTE_GRANULARITY\"><code>MINUTE_GRANULARITY</code></a> and time to the results of <a href=\"#parse_date_time_str\">parse_date_time_str</a>(date_time_str)</li>\n<li><strong><code>HecTime(time_int: int, granularity: int)</code></strong> initializes to <code>time_int</code> and <code>granularity</code></li>\n<li><strong><code>HecTime(date_str: str, time_str: str)</code></strong> initializes granularity to <a href=\"#MINUTE_GRANULARITY\"><code>MINUTE_GRANULARITY</code></a> and time to the results of <a href=\"#parse_date_time_str\">parse_date_time_str</a>(<code>date_str</code>+\"&nbsp;\"+<code>time_str</code>)</li>\n<li><strong><code>HecTime(date_str: str, time_str: str, granularity: int)</code></strong> initializes to the specified granularity and results of <a href=\"#parse_date_time_str\">parse_date_time_str</a>(<code>date_str</code>+\"&nbsp;\"+<code>time_str</code>)</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if invalid parameters are specified</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "hec.hectime.HecTime.add", "modulename": "hec.hectime", "qualname": "HecTime.add", "kind": "function", "doc": "<p>Adds an number of granules or an HecTime to this object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (Union[int, &quot;HecTime&quot;, TimeSpan, timedelta, str]):</strong>  item to add</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use the <a href=\"#addition\"><code>+=</code></a> operator instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.add_days", "modulename": "hec.hectime", "qualname": "HecTime.add_days", "kind": "function", "doc": "<p>Adds a number of days to the object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>days (int):</strong>  the number of days to add.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">days</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.add_hours", "modulename": "hec.hectime", "qualname": "HecTime.add_hours", "kind": "function", "doc": "<p>Adds a number of hours to the object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>hours (int):</strong>  the number of hours to add.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.add_minutes", "modulename": "hec.hectime", "qualname": "HecTime.add_minutes", "kind": "function", "doc": "<p>Adds a number of minutes to the object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>minutes (int):</strong>  the number of minutes to add.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">minutes</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.add_seconds", "modulename": "hec.hectime", "qualname": "HecTime.add_seconds", "kind": "function", "doc": "<p>Adds a number of seconds to the object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>seconds (int):</strong>  the number of seconds to add.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.adjust_to_interval_offset", "modulename": "hec.hectime", "qualname": "HecTime.adjust_to_interval_offset", "kind": "function", "doc": "<p>Adjusts this object to be at the specified offset past the specified interval.</p>\n\n<p><strong>NOTE:</strong> Unlike <a href=\"#zofset\"><code>zofset</code></a> The resulting time may be <em>at</em>, <em>before</em>, or <em>after</em>\nthe this object, but will always be in the interval that begins at or before this object.</p>\n\n<p>To get the begninning of the interval that starts at or before this object, set\noffset_minutes to 0. To get the beginning of the next interval set offset_minutes\nbe the same as interval_minutes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>interval (Union[Interval, int]):</strong>  The interval. If an integer, must be the actual\nor charactersitic minutes of a standard Interval</li>\n<li><strong>offset_minutes (int):</strong>  The offset into the interval in minutes (0..interval)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The adjusted object</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if offset it out of range for interval</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">offset_minutes</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.astimezone", "modulename": "hec.hectime", "qualname": "HecTime.astimezone", "kind": "function", "doc": "<p>See <code>convert_to_time_zone</code></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">on_tz_not_set</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.clean_time", "modulename": "hec.hectime", "qualname": "HecTime.clean_time", "kind": "function", "doc": "<p>Placeholder for API compatibility. Does nothing.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.clone", "modulename": "hec.hectime", "qualname": "HecTime.clone", "kind": "function", "doc": "<p>Returns a clone of this object</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>object: the clone of this object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.compare_times", "modulename": "hec.hectime", "qualname": "HecTime.compare_times", "kind": "function", "doc": "<p>Returns an integer comparison with another HecTime object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (HecTime):</strong>  The other HecTime object</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int:</p>\n  \n  <ul>\n  <li>-1 if this object &lt; other</li>\n  <li>0 if this object == other</li>\n  <li>1 if this object &gt; other</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.compare_to", "modulename": "hec.hectime", "qualname": "HecTime.compare_to", "kind": "function", "doc": "<p>Not supported in this implementation</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.compute_number_intervals", "modulename": "hec.hectime", "qualname": "HecTime.compute_number_intervals", "kind": "function", "doc": "<p>Returns the number of complete intervals between this object and another specified HecTime object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (HecTime):</strong>  The other time to compute the number of intervals to</li>\n<li><p><strong>interval (Union[int, timedelta]):</strong>  The interval size to compute the number of intervals for.</p>\n\n<ul>\n<li><code>int</code> - the minutes in a standard interval</li>\n<li><code>timedelta</code> - If equivalent to a standard interval, the same result as specifying the equivalent integer\nis returned. Otherwise the both HecTime objects are converted to datetime objects and the number of\nintervals is computed as `((other.datetime - self.datetime) / timesdelta')</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if <code>interval</code> is a non-standard integer or if it is a nonstandard timedelta and\neither of this object or <code>other</code> is not convertable to a datetime object</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The number of complete intervals between this time and the other time.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.convert_time_zone", "modulename": "hec.hectime", "qualname": "HecTime.convert_time_zone", "kind": "function", "doc": "<p>Converts this object from one time zone to another, optionally specifyintg that the\ntarget time zone does not observe Daylight Saving Time (DST). Only for HecTime objects\nconvertable to datetime objects (between 01Jan0001, 00:00 and 31Dec9999, 23:59).</p>\n\n<p><strong>NOTE:</strong> The Java signatures for this method that operate on and return a copy of the HecTime\nobject are not supported in this implementation. The <code>astimezone()</code> method can be used for that purpose.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>from_time_zone (Union[ZoneInfo, str]):</strong>  The time zone to convert from</li>\n<li><strong>to_time_zone (Union[ZoneInfo, str]):</strong>  The target time zone</li>\n<li><strong>respect_daylight_saving (Optional[bool]):</strong>  Specifies whether the target time zone.\nshould observe DST. Defaults to True.\n<ul>\n<li>If <code>True</code>, the target time zone is used as specified</li>\n<li>If <code>False</code> and the specified target time zone observes DST, then a time zone is\nfound that has the same UTC offset as the specified target time zone but does not\nobserve DST.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  - If <code>respect_daylight_saving</code> is <code>True</code>, <code>to_time_zone</code> observes DST and no equivalent\ntime zone could be found that does not observer DST\n<ul>\n<li>If this object is not convertable to a datetime object</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">from_time_zone</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">to_time_zone</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">respect_daylight_saving</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.convert_to_time_zone", "modulename": "hec.hectime", "qualname": "HecTime.convert_to_time_zone", "kind": "function", "doc": "<p>Returns a copy of this object at the spcified time zone</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>time_zone (Optional[Union[\"HecTime\", datetime, ZoneInfo, timezone, str]]):</strong>  The target time zone or object containg the target time zone.\n<ul>\n<li>Use <code>None</code> to remove time zone information without time conversion.</li>\n<li>Use <code>\"local\"</code> to specify the system time zone.</li>\n</ul></li>\n<li><strong>on_tz_not_set (int, optional):</strong>  Specifies behavior if this object has no time zone attached. Defaults to 1.\n<ul>\n<li><code>0</code>: Quietly behave as if this object had the local time zone attached.</li>\n<li><code>1</code>: (default) Same as <code>0</code>, but issue a warning.</li>\n<li><code>2</code>: Raise an exception preventing objectes with out time zones attached from using this method.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: A copy of this object at the specified time zone</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timezone</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">on_tz_not_set</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.date", "modulename": "hec.hectime", "qualname": "HecTime.date", "kind": "function", "doc": "<p>Returns the date in the specified style</p>\n\n<table style='font-family:monospace;'>\n<tr><th colspan=\"4\">Base date styles</th></tr>\n<tr><td><b>0:</b>&nbsp;June&nbsp;2,&nbsp;1985</td><td><b>10:</b>&nbsp;&nbsp;June&nbsp;2,&nbsp;85</td><td><b>100:</b>&nbsp;JUNE&nbsp;2,&nbsp;1985</td><td><b>110:</b>&nbsp;JUNE&nbsp;2,&nbsp;85</td></tr>\n<tr><td><b>1:</b>&nbsp;&nbsp;Jun&nbsp;2,&nbsp;1985</td><td><b>11:</b>&nbsp;&nbsp;&nbsp;Jun&nbsp;2,&nbsp;85</td><td><b>101:</b>&nbsp;&nbsp;JUN&nbsp;2,&nbsp;1985</td><td><b>111:</b>&nbsp;&nbsp;JUN&nbsp;2,&nbsp;85</td></tr>\n<tr><td><b>2:</b>&nbsp;&nbsp;2&nbsp;June&nbsp;1985</td><td><b>12:</b>&nbsp;&nbsp;&nbsp;2&nbsp;June&nbsp;85</td><td><b>102:</b>&nbsp;&nbsp;2&nbsp;JUNE&nbsp;1985</td><td><b>112:</b>&nbsp;&nbsp;&nbsp;2&nbsp;JUN&nbsp;85</td></tr>\n<tr><td><b>3:</b>&nbsp;&nbsp;&nbsp;&nbsp;June&nbsp;1985</td><td><b>13:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;June&nbsp;85</td><td><b>103:</b>&nbsp;&nbsp;&nbsp;&nbsp;JUNE&nbsp;1985</td><td><b>113:</b>&nbsp;&nbsp;&nbsp;&nbsp;JUNE&nbsp;85</td></tr>\n<tr><td><b>4:</b>&nbsp;&nbsp;&nbsp;&nbsp;02Jun1985</td><td><b>14:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02Jun85</td><td><b>104:</b>&nbsp;&nbsp;&nbsp;&nbsp;02JUN1985</td><td><b>114:</b>&nbsp;&nbsp;&nbsp;&nbsp;02JUN85</td></tr>\n<tr><td><b>5:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2Jun1985</td><td><b>15:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2Jun85</td><td><b>105:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2JUN1985</td><td><b>115:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2JUN85</td></tr>\n<tr><td><b>6:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jun1985</td><td><b>16:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jun85</td><td><b>106:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JUN1985</td><td><b>116:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JUN85</td></tr>\n<tr><td><b>7:</b>&nbsp;&nbsp;02&nbsp;Jun&nbsp;1985</td><td><b>17:</b>&nbsp;&nbsp;&nbsp;02&nbsp;Jun&nbsp;85</td><td><b>107:</b>&nbsp;&nbsp;02&nbsp;JUN&nbsp;1985</td><td><b>117:</b>&nbsp;&nbsp;02&nbsp;JUN&nbsp;85</td></tr>\n<tr><td><b>8:</b>&nbsp;&nbsp;&nbsp;2&nbsp;Jun&nbsp;1985</td><td><b>18:</b>&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;Jun&nbsp;85</td><td><b>108:</b>&nbsp;&nbsp;&nbsp;2&nbsp;JUN&nbsp;1985</td><td><b>118:</b>&nbsp;&nbsp;&nbsp;2&nbsp;JUN&nbsp;85</td></tr>\n<tr><td><b>9:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jun&nbsp;1985</td><td><b>19:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jun&nbsp;85</td><td><b>109:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JUN&nbsp;1985</td><td><b>119:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JUN&nbsp;85</td></tr>\n<tr><th colspan=\"4\">Extended date styles</th></tr>\n<tr><td><b>-1:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6/2/85</td><td><b>-11:</b>&nbsp;&nbsp;&nbsp;&nbsp;06/02/85</td><td><b>-101:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6/2/1985</td><td><b>-111:</b>&nbsp;06/02/1985</td></tr>\n<tr><td><b>-2:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6-2-85</td><td><b>-12:</b>&nbsp;&nbsp;&nbsp;&nbsp;06-02-85</td><td><b>-102:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6-2-1985</td><td><b>-112:</b>&nbsp;06-02-1985</td></tr>\n<tr><td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td><b>-13:</b>&nbsp;&nbsp;1985-06-02</td><td></td><td></td></tr>\n</table>\n\n<p><strong>NOTE</strong> that years that overflow four digits will not be truncated if using a style that shows four digits in the table (styles 0..9, 100..109, -113..-101 and -13).\nOther formats will continue to show only the last two digits of the year. In all cases a negative sign will be prepended to the year for negative years (whether two digits or more are shown).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>style (Optional[int]):</strong>  The date style to use. If not specified the <a href=\"#HecTime.default_date_style\"><code>default_date_style</code></a> property is used</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The formatted date</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">style</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.date_and_time", "modulename": "hec.hectime", "qualname": "HecTime.date_and_time", "kind": "function", "doc": "<p>Returns a string representing the date and time in the specified style.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>style (Optional[int]):</strong>  The date style to use. If not specified the <a href=\"#HecTime.default_date_style\"><code>default_date_style</code></a> property is used</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The formatted date and time. The date is generated using the style parameter (see <a href=\"#HecTime.date\"><code>date</code></a>), which is separated from\n  the time portion (with colons) (see <a href=\"#HecTime.time\"><code>time</code></a>) by a comma and space</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">style</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.date_str", "modulename": "hec.hectime", "qualname": "HecTime.date_str", "kind": "variable", "doc": "<p>The object's current date string using the default_date_style</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.hectime.HecTime.date_time_str", "modulename": "hec.hectime", "qualname": "HecTime.date_time_str", "kind": "variable", "doc": "<p>The object's current date and time string using the default_date_style</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.hectime.HecTime.datetime", "modulename": "hec.hectime", "qualname": "HecTime.datetime", "kind": "function", "doc": "<p>Returns a <code>datetime</code> object equivalent to this object.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>datetime: The equivalent <code>datetime</code> object or <code>None</code> if this object's time is undefined</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.day", "modulename": "hec.hectime", "qualname": "HecTime.day", "kind": "variable", "doc": "<p>The object's day of month, or None if undefined</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[int]"}, {"fullname": "hec.hectime.HecTime.day_of_week", "modulename": "hec.hectime", "qualname": "HecTime.day_of_week", "kind": "function", "doc": "<p>Returns the day of week (1 = Sunday -> 7 = Saturday) for this object.</p>\n\n<p><strong>NOTE:</strong> This differs from <code>datetime.weekday()</code> whch returns 0=Monday -> 6=Sunday.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The day of week (1 = Sunday -> 7 = Saturday)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.day_of_week_name", "modulename": "hec.hectime", "qualname": "HecTime.day_of_week_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.day_of_year", "modulename": "hec.hectime", "qualname": "HecTime.day_of_year", "kind": "function", "doc": "<p>Returns the day of the year of this object (01Jan = 1)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[int]: The day of the year</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.default_date_style", "modulename": "hec.hectime", "qualname": "HecTime.default_date_style", "kind": "variable", "doc": "<p>The object's current default data style.</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.hectime.HecTime.defined", "modulename": "hec.hectime", "qualname": "HecTime.defined", "kind": "variable", "doc": "<p>Whether this object has been defined</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.hectime.HecTime.equal_to", "modulename": "hec.hectime", "qualname": "HecTime.equal_to", "kind": "function", "doc": "<p>Returns whether this object is equivalent to another</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (Union[&quot;HecTime&quot;, datetime]):</strong>  The object to compare to</li>\n</ul>\n\n<h6 id=\"deprrecated\">Deprrecated:</h6>\n\n<blockquote>\n  <p>Use <code>==</code> operator instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: The result of the comparison</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.get_default_date_style", "modulename": "hec.hectime", "qualname": "HecTime.get_default_date_style", "kind": "function", "doc": "<p>Returns the default date style</p>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.default_date_style\"><strong>default_date_style</strong></a> property instead</p>\n</blockquote>\n\n<p>Returns\n    int: The default date style</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.get_interval_offset", "modulename": "hec.hectime", "qualname": "HecTime.get_interval_offset", "kind": "function", "doc": "<p>Returns the number of minutes that the current object is after the top of the most recent standard interval</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>interval Union[Interval, int]:</strong>  The interval to determine the offset into. If int, then the value is minutes.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if the interval is not a standard interval</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[int]: The number of minutes into the interval</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.get_iso_8601_date_time", "modulename": "hec.hectime", "qualname": "HecTime.get_iso_8601_date_time", "kind": "function", "doc": "<p>Returns the time of this object in ISO 8601 format.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The time of this object in ISO 8601 format</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.get_minutes", "modulename": "hec.hectime", "qualname": "HecTime.get_minutes", "kind": "function", "doc": "<p>Returns the time of this object as (days since 1899) * 1400 + (minutes past midnight), optionally offsetting by a time zone</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>time_zone_offset (Optional[Union[int, ZoneInfo]]):</strong>  if <code>int</code>, the number of minutes <em>behind</em> UTC (positive for western longitudes)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The time in minutes</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone_offset</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.get_shows_time_as_beginning_of_day", "modulename": "hec.hectime", "qualname": "HecTime.get_shows_time_as_beginning_of_day", "kind": "function", "doc": "<p>Retrieves whether midnight is shown as hour 0 instead of hour 24 of the previous day</p>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.midnight_as_2400\"><strong>midnight_as_2400</strong></a> property instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: <code>True</code> if midnight is shown as hour 0, <code>False</code> if midnight is shown as hour 24</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.get_time", "modulename": "hec.hectime", "qualname": "HecTime.get_time", "kind": "function", "doc": "<p>Returns a string representing the time portion</p>\n\n<ul>\n<li>with_colons = True (default), <code>[..., 6, 8, 23]</code> is retuned is <code>06:08:23</code></li>\n<li>with_colons = False, <code>[..., 6, 8, 23]</code> is retuned is <code>0608</code></li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>with_colons (Optional[bool]):</strong>  Specifies with or without colons. Defaults to <code>True</code>.</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>use <a href=\"#HecTime.HecTime.time\"><strong>time</strong></a> method instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The time portion string with colons (hour, minute, and second), or without colons (hour, minute only))</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">with_colons</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.get_time_granularity", "modulename": "hec.hectime", "qualname": "HecTime.get_time_granularity", "kind": "function", "doc": "<p>Returns the granularity of this object</p>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.granularity\"><strong>granularity</strong></a> property instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The granularity</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.get_time_in_millis", "modulename": "hec.hectime", "qualname": "HecTime.get_time_in_millis", "kind": "function", "doc": "<p>Returns the time of this object in milliseconds into of the Unix Epoch (01Jan1970 00:00:00 UTC).</p>\n\n<p>Note that is the standard time value used in Java as well as 1000.0 times the standard time\nvalue used in python (e.g., <code>time.time()</code> or <code>datetime.timestamp()</code>)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>time_zone_offset (Optional[Union[int, ZoneInfo]]):</strong>  if <code>int</code>, the number of minutes <em>behind</em> UTC (positive for western longitudes).\nIf not specified, the milliseconds returned will be as if this object is in UTC</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[int]: None if this object is not defined., otherwise the milliseconds of the current time from the beginning of the Unix Epoch</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone_offset</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.get_xml_date_time", "modulename": "hec.hectime", "qualname": "HecTime.get_xml_date_time", "kind": "function", "doc": "<p>Returns the time of this object in ISO 8601 format.</p>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.get_iso_8601_date_time\"><strong>get_iso_8601_date_time</strong></a> instead</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if time_zone_offset is specifed but is not an integer or ZoneInfo object,</li>\n<li>or is a ZoneInfo object and no UTC offset could be determined from it</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The time of this object in ISO 8601 format</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.granularity", "modulename": "hec.hectime", "qualname": "HecTime.granularity", "kind": "variable", "doc": "<p>The object's current granularity.</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The granularity</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.hectime.HecTime.greater_than", "modulename": "hec.hectime", "qualname": "HecTime.greater_than", "kind": "function", "doc": "<p>Returns whether this object is greater than (later than) another HecTime object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (HecTime):</strong>  The other object to compare to</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use the the <code>&gt;</code> operator instead.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether this object is greater than the other</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.greater_than_equal_to", "modulename": "hec.hectime", "qualname": "HecTime.greater_than_equal_to", "kind": "function", "doc": "<p>Returns whether this object is greater than (later than) or equal to (same time as) another HecTime object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (HecTime):</strong>  The other object to compare to</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use the the <code>&gt;=</code> operator instead.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether this object is greater than or equal to the other</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.hour", "modulename": "hec.hectime", "qualname": "HecTime.hour", "kind": "variable", "doc": "<p>The object's hour of day, or None if undefined</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[int]"}, {"fullname": "hec.hectime.HecTime.hour_minutes", "modulename": "hec.hectime", "qualname": "HecTime.hour_minutes", "kind": "function", "doc": "<p>Returns the time portion in HHMM format or \"\" if this object is undefined</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The time portion in HHMM format or \"\" if this object is undefined</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.hours_minutes_seconds", "modulename": "hec.hectime", "qualname": "HecTime.hours_minutes_seconds", "kind": "function", "doc": "<p>Returns the object's hour, minute, and second in the spefied parameters</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>hours (list[int]):</strong>  Element 0 recieves the hour</li>\n<li><strong>minutes (list[int]):</strong>  Element 0 recieves the minute</li>\n<li><strong>seconds (list[int]):</strong>  Element 0 receives the second</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hours</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">minutes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">seconds</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.increment", "modulename": "hec.hectime", "qualname": "HecTime.increment", "kind": "function", "doc": "<p>Increments this object by a specified number of intervals.</p>\n\n<p>For month-based intervals (<code>\"Tri-Month\"</code>, <code>\"Semi-Month\"</code>, <code>\"1Month\"</code>, <code>\"1Year\"</code>), if the date\nof the current object is the last day of a month, the resulting date will be the last day of the month\nor sub-month (days 10 or 20 for <code>\"Tri-Month\"</code> and day 15 for <code>\"Semi-Month\"</code>), as shown:</p>\n\n<table>\n<tr><th>Start Time</th><th>Count</th><th>Interval</th><th>Result</th></tr>\n<tr><td>28Feb2023, 01:00</td><td>1</td><td><code>\"Tri-Month\"</code></td><td>10Mar2023, 01:00</td></tr>\n<tr><td>28Feb2023, 01:00</td><td>2</td><td><code>\"Tri-Month\"</code></td><td>20Mar2023, 01:00</td></tr>\n<tr><td>28Feb2023, 01:00</td><td>3</td><td><code>\"Tri-Month\"</code></td><td>31Mar2023, 01:00</td></tr>\n<tr><td>28Feb2024, 01:00</td><td>1</td><td><code>\"Tri-Month\"</code></td><td>08Mar2023, 01:00</td></tr>\n<tr><td>28Feb2024, 01:00</td><td>2</td><td><code>\"Tri-Month\"</code></td><td>18Mar2023, 01:00</td></tr>\n<tr><td>28Feb2024, 01:00</td><td>3</td><td><code>\"Tri-Month\"</code></td><td>28Mar2023, 01:00</td></tr>\n</table>\n\n<p>Note that this method produces results that differ from the Java HecTime.increment() method where\nthe Java code produces incorrect results, as in the following examples (all such discrepancies are\nlimited to <code>\"Tri-Month\"</code>, <code>\"Semi-Month\"</code>, and <code>\"1Month\"</code>:</p>\n\n<table>\n<tr><th>Start Time</th><th>Count</th><th>Interval</th><th>Correct Result</th><th>Java HecTime Result</th></tr>\n<tr><td>29Jan2023, 01:00</td><td>1</td><td><code>\"1Month\"</code></td><td>28Feb2023, 01:00</td><td>01Mar2023, 01:00</td></tr>\n<tr><td>09Feb2024, 01:00</td><td>2</td><td><code>\"Tri-Month\"</code></td><td>29Feb2024, 01:00</td><td>09Mar2024, 01:00</td></tr>\n<tr><td>28Feb2024, 01:00</td><td>2</td><td><code>\"Semi-Month\"</code></td><td>28Mar2024, 01:00</td><td>31Mar2024, 01:00</td></tr>\n</table>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>count (int):</strong>  The number of intervals to increment</li>\n<li><strong>interval (Union[Interval, TimeSpan, timedelta, int]):</strong>  The interval to increment by. If int:\n<ul>\n<li>interpreted as a number of minutes</li>\n<li>for standard intervals:\n<ul>\n<li>should be actual minutes for intervals &lt;= 1Week</li>\n<li>should characteristic minutes for intervals &gt; 1Week</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The incremented object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">count</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.increment_secs", "modulename": "hec.hectime", "qualname": "HecTime.increment_secs", "kind": "function", "doc": "<p>Increments this object by a specified number of intervals, which are specified in seconds</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>count (int):</strong>  The number of intervals to increment</li>\n<li><strong>interval (int):</strong>  The size of the interval in seconds. The behavior depends on whether the interval is &lt; 60:\n<ul>\n<li><code>&lt; 60</code> - the object is incremented by (count * interval) seconds</li>\n<li><code>&gt;= 60</code> - The object is incremented by (count * interval // 60) minutes</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The incremented object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">count</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.is_defined", "modulename": "hec.hectime", "qualname": "HecTime.is_defined", "kind": "function", "doc": "<p>Returns whether this object has been defined</p>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.defined\"><strong><code>defined</code></strong></a> property instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether this object has been defined</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.iso_date", "modulename": "hec.hectime", "qualname": "HecTime.iso_date", "kind": "function", "doc": "<p>Returns the date of the current object as YYMMDD format</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The date in YYMMDD format</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.iso_time", "modulename": "hec.hectime", "qualname": "HecTime.iso_time", "kind": "function", "doc": "<p>Returns the time of the current object as HHMMSS format</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The date in HHMMSS format</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.is_time_defined", "modulename": "hec.hectime", "qualname": "HecTime.is_time_defined", "kind": "function", "doc": "<p>Returns whether this object has been defined</p>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.defined\"><strong><code>defined</code></strong></a> property instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether this object has been defined</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.is_utc", "modulename": "hec.hectime", "qualname": "HecTime.is_utc", "kind": "variable", "doc": "<p></p>\n", "annotation": ": bool"}, {"fullname": "hec.hectime.HecTime.label_as_time_zone", "modulename": "hec.hectime", "qualname": "HecTime.label_as_time_zone", "kind": "function", "doc": "<p>Attaches the specified time zone to this object. Does not change the time</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>time_zone (Optional[Union[\"HecTime\", datetime, ZoneInfo, timezone, str]]):</strong>  The time zone to attach or object containing that time zone.\nUse <code>\"local\"</code> to specify the system time zone.</li>\n<li><strong>on_already_set (int, optional):</strong>  Specifies action to take if a different time zone is already\nattached. Defaults to 1.\n<ul>\n<li><code>0</code>: Quietly attach the new time zone</li>\n<li><code>1</code>: (default) Issue a warning about attaching a different time zone</li>\n<li><code>2</code>: Raises an exception</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if a different time zone is already attached and <code>on_already_set</code> == 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The updated object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timezone</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">on_already_set</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.julian", "modulename": "hec.hectime", "qualname": "HecTime.julian", "kind": "function", "doc": "<p>Returns the number of days since 31Dec8199 for this object</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The number of days since 31Dec1899</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.less_than", "modulename": "hec.hectime", "qualname": "HecTime.less_than", "kind": "function", "doc": "<p>Returns whether this object is less than (earlier than) another HecTime object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (HecTime):</strong>  The other HecTime object</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use the <code>&lt;</code> operator instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether this object is less than the other object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.less_than_equal_to", "modulename": "hec.hectime", "qualname": "HecTime.less_than_equal_to", "kind": "function", "doc": "<p>Returns whether this object is less than (earlier than) another or equal to (same time as) HecTime object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (HecTime):</strong>  The other HecTime object</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use the <code>&lt;=</code> operator instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether this object is less than or equal to the other object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.midnight_as_2400", "modulename": "hec.hectime", "qualname": "HecTime.midnight_as_2400", "kind": "variable", "doc": "<p>The object's current setting of whether to show midnight as hour 24 (default) or not.</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.hectime.HecTime.minute", "modulename": "hec.hectime", "qualname": "HecTime.minute", "kind": "variable", "doc": "<p>The object's minute of hour, or None if undefined</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[int]"}, {"fullname": "hec.hectime.HecTime.minutes_since_midnight", "modulename": "hec.hectime", "qualname": "HecTime.minutes_since_midnight", "kind": "function", "doc": "<p>Returns the number of minutes past midnight for this object</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: the number of minutes past midnight</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.month", "modulename": "hec.hectime", "qualname": "HecTime.month", "kind": "variable", "doc": "<p>The object's month, or None if undefined</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[int]"}, {"fullname": "hec.hectime.HecTime.not_equal_to", "modulename": "hec.hectime", "qualname": "HecTime.not_equal_to", "kind": "function", "doc": "<p>Returns whether this object is not equivalent to another</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (Union[&quot;HecTime&quot;, datetime]):</strong>  The object to compare to</li>\n</ul>\n\n<h6 id=\"deprrecated\">Deprrecated:</h6>\n\n<blockquote>\n  <p>Use <code>!=</code> operator instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: The result of the comparison</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.now", "modulename": "hec.hectime", "qualname": "HecTime.now", "kind": "function", "doc": "<p>Returns a new <code>HecTime</code> object initialized to the current system time and specified or default granularity</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>granularity (int, optional):</strong>  The granularity of the new object. Defaults to MINUTE_GRANULARITY.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The newly created object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">granularity</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">11</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.second", "modulename": "hec.hectime", "qualname": "HecTime.second", "kind": "variable", "doc": "<p>The object's second of minute, or None if undefined</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[int]"}, {"fullname": "hec.hectime.HecTime.seconds_since_midnight", "modulename": "hec.hectime", "qualname": "HecTime.seconds_since_midnight", "kind": "function", "doc": "<p>Returns the number of seconds past midnight for this object</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: the number of seconds past midnight</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.set", "modulename": "hec.hectime", "qualname": "HecTime.set", "kind": "function", "doc": "<p>Set the object to a specified date/time. Valid parameters are:</p>\n\n<ul>\n<li><strong><code>set(time_int: int)</code></strong> sets the time to the value of <code>time_int</code> for the current granularity</li>\n<li><strong><code>set(date_time_str: str)</code></strong> sets the time to the results of <a href=\"#HecTime.parse_date_time_str\">parse_date_time_str</a>(<code>date_time_str</code>)</li>\n<li><strong><code>set(dt: datetime)</code></strong> sets the time to the value of <code>dt</code></li>\n<li><strong><code>set(values: Union[list[int],tuple[int,...]])</code></strong> sets the time to <code>values</code></li>\n<li><strong><code>set(other_hectime: HecTime)</code></strong> sets the time and granularity to be the same as <code>other_hectime</code></li>\n<li><strong><code>set(date_str: str, time_str: str)</code></strong> sets the time to the results of <a href=\"#HecTime.parse_date_time_str\">parse_date_time_str</a>(<code>date_str</code>+\"&nbsp;\"+<code>time_str</code>)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: <code>0</code> if date/time is successfully set, otherwise non-zero</p>\n</blockquote>\n\n<h6 id=\"see-also\">See Also:</h6>\n\n<blockquote>\n  <p><a href=\"#parse_date_time_str\"><strong><code>parse_date_time_str()</code></strong></a>\n  <br><a href=\"#HecTime.strptime\"><strong><code>HecTime.strptime()</code></strong></a></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.set_current", "modulename": "hec.hectime", "qualname": "HecTime.set_current", "kind": "function", "doc": "<p>Sets this object to the current time</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.set_date", "modulename": "hec.hectime", "qualname": "HecTime.set_date", "kind": "function", "doc": "<p>Sets the date portion only from a string</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>date_str (str):</strong>  The date string. Any time portion is ignored</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: <code>0</code> on success or <code>-1</code> on failure</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">date_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.set_default_date_style", "modulename": "hec.hectime", "qualname": "HecTime.set_default_date_style", "kind": "function", "doc": "<p>Sets the default date style</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>style (int):</strong>  The default date style</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.default_date_style\"><strong>default_date_style</strong></a> property instead</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">style</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.set_julian", "modulename": "hec.hectime", "qualname": "HecTime.set_julian", "kind": "function", "doc": "<p>Sets the date portion from the number of days since 1899, and optionally the time portion</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>julian (int):</strong>  The number of days since 1899</li>\n<li><strong>minutes_since_midnight (Optional[int]):</strong>  The number of minutes past midnight for the time portion. Defaults to None.</li>\n<li><strong>seconds_since_midnight (Optional[int]):</strong>  The number of seconds past the minute for the time portion. Defaults to None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">julian</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">minutes_since_midnight</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">seconds_since_midnight</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.set_minutes", "modulename": "hec.hectime", "qualname": "HecTime.set_minutes", "kind": "function", "doc": "<p>Set the date and time portions of this object from the number of minutes since 1899</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>total_minutes (int):</strong>  The number of minutes since 1899</li>\n<li><strong>time_zone_offset (Optional[Union[int, &quot;ZoneInfo&quot;]]):</strong>  The time zone to represent this object in. Defaults to None.\nIf <code>int</code>, the number of minutes <em>behind</em> UTC (positive for western longitudes)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if <code>time_zone_offset</code> is not an integer or <code>ZoneInfo</code> object, or if the UTC offset cannot be\ndetermed for the <code>ZoneInfo</code> object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">total_minutes</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone_offset</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.set_seconds", "modulename": "hec.hectime", "qualname": "HecTime.set_seconds", "kind": "function", "doc": "<p>Sets the date and time portions of this object from the number seconds since 1970-01-01T00:00:00Z</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>total_seconds (int):</strong>  The number of seconds since 1970-01-01T00:00:00Z (same as Python timestamps and seconds of Unix Epoch)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">total_seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.set_time", "modulename": "hec.hectime", "qualname": "HecTime.set_time", "kind": "function", "doc": "<p>Set the time portion of this object from a time string with or without the date portion</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>time_str (str):</strong>  the time string</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: <code>0</code> on success or <code>-1</code> if the time string cannot be parsed</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.set_time_granularity", "modulename": "hec.hectime", "qualname": "HecTime.set_time_granularity", "kind": "function", "doc": "<p>Sets the granularity, keeping the existing time values if possible</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>granularity (int):</strong>  The new granularity</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.granularity\"><strong>granularity</strong></a> property instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">granularity</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.set_time_granularity_seconds", "modulename": "hec.hectime", "qualname": "HecTime.set_time_granularity_seconds", "kind": "function", "doc": "<p>Not supported in this implementation</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">granularity_in_seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.set_time_in_millis", "modulename": "hec.hectime", "qualname": "HecTime.set_time_in_millis", "kind": "function", "doc": "<p>Sets the date and time portions of this object from the number milliseconds since 1970-01-01T00:00:00Z</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>milliseconds (int):</strong>  The number of seconds since 1970-01-01T00:00:00Z (same as Java milliseconds and milliseconds of Unix Epoch)</li>\n<li><strong>time_zone_offset (Optional[Union[int, &quot;ZoneInfo&quot;]]):</strong>  The time zone to represent this object in. Defaults to None.\nIf <code>int</code>, the number of minutes <em>behind</em> UTC (positive for western longitudes)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">milliseconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone_offset</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.set_undefined", "modulename": "hec.hectime", "qualname": "HecTime.set_undefined", "kind": "function", "doc": "<p>Sets this object to the undefined state.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.set_xml", "modulename": "hec.hectime", "qualname": "HecTime.set_xml", "kind": "function", "doc": "<p>Sets this object from an ISO 8601 date/time string.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>date_time_str (str):</strong>  The date/time string</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>The <a href=\"#HecTime(set)\"><strong><code>set()</code></strong></a> function handles this. Use it instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: <code>0</code> on success, <code>-1</code> otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">date_time_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.set_year_month_day", "modulename": "hec.hectime", "qualname": "HecTime.set_year_month_day", "kind": "function", "doc": "<p>Sets the date portion from a year, month, and day, and optioally the time portion from minutes past midnight</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>year (int):</strong>  The year</li>\n<li><strong>month (int):</strong>  The month</li>\n<li><strong>day (int):</strong>  The day</li>\n<li><strong>minutes_since_midnight (Optional[int]):</strong>  The minutes past midnight</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">month</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">day</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">minutes_since_midnight</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.show_time_as_beginning_of_day", "modulename": "hec.hectime", "qualname": "HecTime.show_time_as_beginning_of_day", "kind": "function", "doc": "<p>Sets whether to show midnight as hour 0 instead of hour 24 of the previous day</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (bool):</strong>  Whether to show midnight as hour 0 instead of hour 24 of the previous day</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.midnight_as_2400\"><strong>midnight_as_2400</strong></a> property instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.strftime", "modulename": "hec.hectime", "qualname": "HecTime.strftime", "kind": "function", "doc": "<p>Returns a string representing the date and time in the specified format.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>format (str):</strong>  The format string.\nFormat specfics can be found <a href=\"https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior\"><strong>here</strong></a>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The formatted date and time</p>\n</blockquote>\n\n<h6 id=\"see-also\">See Also:</h6>\n\n<blockquote>\n  <ul>\n  <li><a href=\"#Hectime.date\"><code>date()</code></a></li>\n  <li><a href=\"#Hectime.date_and_time\"><code>date_and_time()</code></a></li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.strptime", "modulename": "hec.hectime", "qualname": "HecTime.strptime", "kind": "function", "doc": "<p>Sets this object from a string representation and a matching format.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>date_time_str (str):</strong>  The string to parse.</li>\n<li><strong>format (str):</strong>  The format describing the string.\nFormat specfics can be found <a href=\"https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior\"><strong>here</strong></a>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The object updated from the string representation and formt.</p>\n</blockquote>\n\n<h6 id=\"see-also\">See Also:</h6>\n\n<blockquote>\n  <p><a href=\"#parse_date_time_str\"><strong><code>parse_date_time_str()</code></strong></a>\n  <br><a href=\"#HecTime.set\"><strong><code>HecTime.set()</code></strong></a></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">date_time_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.subtract", "modulename": "hec.hectime", "qualname": "HecTime.subtract", "kind": "function", "doc": "<p>Subtracts an integer number of granules or HecTime object from this one</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (Union[int, &quot;HecTime&quot;, TimeSpan, timedelta, str]):</strong>  item to subtract</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use the <a href=\"#subtraction\"><code>-=</code></a> operator instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.subtract_days", "modulename": "hec.hectime", "qualname": "HecTime.subtract_days", "kind": "function", "doc": "<p>Subtracts a number of days from the object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>days (int):</strong>  the number of days to subtract.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">days</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.subtract_hours", "modulename": "hec.hectime", "qualname": "HecTime.subtract_hours", "kind": "function", "doc": "<p>Subtracts a number of hours fram the object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>hours (int):</strong>  the number of hours to subtract.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.subtract_minutes", "modulename": "hec.hectime", "qualname": "HecTime.subtract_minutes", "kind": "function", "doc": "<p>Subtracts a number of minutes from the object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>minutes (int):</strong>  the number of minutes to subtract.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">minutes</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.subtract_seconds", "modulename": "hec.hectime", "qualname": "HecTime.subtract_seconds", "kind": "function", "doc": "<p>Subtracts a number of seconds from the object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>seconds (int):</strong>  the number of seconds to subtract.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.time", "modulename": "hec.hectime", "qualname": "HecTime.time", "kind": "function", "doc": "<p>Returns a string representing the time portion</p>\n\n<ul>\n<li>with_colons = True (default), <code>[..., 6, 8, 23]</code> is retuned is <code>06:08:23</code></li>\n<li>with_colons = False, <code>[..., 6, 8, 23]</code> is retuned is <code>0608</code></li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>with_colons (Optional[bool]):</strong>  Specifies with or without colons. Defaults to <code>True</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The time portion string with colons (hour, minute, and second), or without colons (hour, minute only))</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">with_colons</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.time_granularity", "modulename": "hec.hectime", "qualname": "HecTime.time_granularity", "kind": "function", "doc": "<p>Returns the granularity of this object</p>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.granularity\"><strong>granularity</strong></a> property instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The granularity</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.to_string", "modulename": "hec.hectime", "qualname": "HecTime.to_string", "kind": "function", "doc": "<p>Not supported in this implementation</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">style</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.tzinfo", "modulename": "hec.hectime", "qualname": "HecTime.tzinfo", "kind": "variable", "doc": "<p>The object's attached time zone</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[zoneinfo.ZoneInfo]"}, {"fullname": "hec.hectime.HecTime.value", "modulename": "hec.hectime", "qualname": "HecTime.value", "kind": "variable", "doc": "<p>The object's current time integer.</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.hectime.HecTime.year", "modulename": "hec.hectime", "qualname": "HecTime.year", "kind": "variable", "doc": "<p>The object's year, or None if undefined</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[int]"}, {"fullname": "hec.hectime.HecTime.values", "modulename": "hec.hectime", "qualname": "HecTime.values", "kind": "variable", "doc": "<p>The object's current time values (<code>[year, month, day, hour, minute, second]</code>).</p>\n\n<p>This property is None when the <a href=\"#value\"><code>value</code></a> property is <a href=\"#UNDEFINED_TIME\"><code>UNDEFINED_TIME</code></a></p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[list[int]]"}, {"fullname": "hec.interval", "modulename": "hec.interval", "kind": "module", "doc": "<p>Provides standard time intervals</p>\n"}, {"fullname": "hec.interval.IntervalException", "modulename": "hec.interval", "qualname": "IntervalException", "kind": "class", "doc": "<p>Exception specific to Interval operations</p>\n", "bases": "hec.timespan.TimeSpanException"}, {"fullname": "hec.interval.Interval", "modulename": "hec.interval", "qualname": "Interval", "kind": "class", "doc": "<p>Class to hold information about time series recurrence intervals.</p>\n\n<p>Intervals are a restriction of the TimeSpan base class that also hold extra information.</p>\n\n<ul>\n<li><strong>Restriction:</strong> At most one of <code>years</code>, <code>months</code>, <code>days</code>, <code>hours</code>, and <code>minutes</code> can be non-zero, and <code>seconds</code> must be zero.</li>\n<li><strong>Extension:</strong>\n<ul>\n<li>Each interval has a name that may be context specific.</li>\n<li>Each also has a specified number of minutes:\n<ul>\n<li>For non-calendar-based intervals, the minutes are the actual number of minutes in the interval</li>\n<li>For calendar-based intervals, the minutes are a characteristic number based on standard calendar items:<pre>\n<ul>\n<li>Tri-Month:  minutes =  10 * 1440       =    14400</li>\n<li>Semi-Month: minutes =  15 * 1440       =    21600</li>\n<li>1 Month:    minutes =  30 * 1440       =    43200</li>\n<li>1 Year:     minutes = 365 * 1440       =   525600</li>\n<li>1 Decade:   minutes = 365 * 1440 * 10  =  5256000</li>\n<li>1 Century:  minutes = 365 * 1440 * 100 = 52560000</pre></li>\n</ul></li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p>Intervals should not need to be created by the user, as intervals for the following three contexts are\ncreated during initialization of the interval module:</p>\n\n<ul>\n<li><strong>CWMS Context:</strong> Contains Intervals used with CWMS</li>\n<li><strong>DSS Context:</strong> Contains Intervals used with HEC-DSS files</li>\n<li><strong>DSS Block Size Context:</strong> Contains Intervals for the record block sizes in HEC-DSS files</li>\n</ul>\n\n<p>Each context has its own set of four static methods that retrieve Interval objects or their names:</p>\n\n<ul>\n<li><code>get_any<em>Context</em>()</code></li>\n<li><code>get_any<em>Context</em>_name()</code></li>\n<li><code>get_all<em>Context</em>()</code></li>\n<li><code>get_all<em>Context</em>_names()</code></li>\n</ul>\n\n<p>Where <em>Context</em> is <code>Cwms</code>, <code>Dss</code>, or <code>DssBlock</code>.</p>\n\n<p>There are similar static methods that retrieve Interval objects or their names from all contexts:</p>\n\n<ul>\n<li><code>get_any()</code></li>\n<li><code>get_any_name()</code></li>\n<li><code>get_all()</code></li>\n<li><code>get_all_names()</code></li>\n</ul>\n", "bases": "hec.timespan.TimeSpan"}, {"fullname": "hec.interval.Interval.__init__", "modulename": "hec.interval", "qualname": "Interval.__init__", "kind": "function", "doc": "<p>Initializer used by module</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">timespan</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">minutes</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "hec.interval.Interval.MINUTES", "modulename": "hec.interval", "qualname": "Interval.MINUTES", "kind": "variable", "doc": "<p>Dictionary that holds interval minutes, accessed by interval name. Includes all contexts.\n<details>\n<summary>Click to show contents.</summary></p>\n\n<pre><table>\n<tr><th>Name</th><th>Minutes</th><th>Context(s)</th></tr>\n<tr><td>0</td><td>0</td><td>CWMS</td></tr>\n<tr><td>Irr</td><td>0</td><td>CWMS</td></tr>\n<tr><td>IR-Century</td><td>0</td><td>DSS</td></tr>\n<tr><td>IR-Day</td><td>0</td><td>DSS</td></tr>\n<tr><td>IR-Decade</td><td>0</td><td>DSS</td></tr>\n<tr><td>IR-Month</td><td>0</td><td>DSS</td></tr>\n<tr><td>IR-Year</td><td>0</td><td>DSS</td></tr>\n<tr><td>1Minute</td><td>1</td><td>CWMS, DSS</td></tr>\n<tr><td>2Minute</td><td>2</td><td>DSS</td></tr>\n<tr><td>2Minutes</td><td>2</td><td>CWMS</td></tr>\n<tr><td>3Minute</td><td>3</td><td>DSS</td></tr>\n<tr><td>3Minutes</td><td>3</td><td>CWMS</td></tr>\n<tr><td>4Minute</td><td>4</td><td>DSS</td></tr>\n<tr><td>4Minutes</td><td>4</td><td>CWMS</td></tr>\n<tr><td>5Minute</td><td>5</td><td>DSS</td></tr>\n<tr><td>5Minutes</td><td>5</td><td>CWMS</td></tr>\n<tr><td>6Minute</td><td>6</td><td>DSS</td></tr>\n<tr><td>6Minutes</td><td>6</td><td>CWMS</td></tr>\n<tr><td>10Minute</td><td>10</td><td>DSS</td></tr>\n<tr><td>10Minutes</td><td>10</td><td>CWMS</td></tr>\n<tr><td>12Minute</td><td>12</td><td>DSS</td></tr>\n<tr><td>12Minutes</td><td>12</td><td>CWMS</td></tr>\n<tr><td>15Minute</td><td>15</td><td>DSS</td></tr>\n<tr><td>15Minutes</td><td>15</td><td>CWMS</td></tr>\n<tr><td>20Minute</td><td>20</td><td>DSS</td></tr>\n<tr><td>20Minutes</td><td>20</td><td>CWMS</td></tr>\n<tr><td>30Minute</td><td>30</td><td>DSS</td></tr>\n<tr><td>30Minutes</td><td>30</td><td>CWMS</td></tr>\n<tr><td>1Hour</td><td>60</td><td>CWMS, DSS</td></tr>\n<tr><td>2Hour</td><td>120</td><td>DSS</td></tr>\n<tr><td>2Hours</td><td>120</td><td>CWMS</td></tr>\n<tr><td>3Hour</td><td>180</td><td>DSS</td></tr>\n<tr><td>3Hours</td><td>180</td><td>CWMS</td></tr>\n<tr><td>4Hour</td><td>240</td><td>DSS</td></tr>\n<tr><td>4Hours</td><td>240</td><td>CWMS</td></tr>\n<tr><td>6Hour</td><td>360</td><td>DSS</td></tr>\n<tr><td>6Hours</td><td>360</td><td>CWMS</td></tr>\n<tr><td>8Hour</td><td>480</td><td>DSS</td></tr>\n<tr><td>8Hours</td><td>480</td><td>CWMS</td></tr>\n<tr><td>12Hour</td><td>720</td><td>DSS</td></tr>\n<tr><td>12Hours</td><td>720</td><td>CWMS</td></tr>\n<tr><td>1Day</td><td>1440</td><td>CWMS, DSS</td></tr>\n<tr><td>2Day</td><td>2880</td><td>DSS</td></tr>\n<tr><td>2Days</td><td>2880</td><td>CWMS</td></tr>\n<tr><td>3Day</td><td>4320</td><td>DSS</td></tr>\n<tr><td>3Days</td><td>4320</td><td>CWMS</td></tr>\n<tr><td>4Day</td><td>5760</td><td>DSS</td></tr>\n<tr><td>4Days</td><td>5760</td><td>CWMS</td></tr>\n<tr><td>5Day</td><td>7200</td><td>DSS</td></tr>\n<tr><td>5Days</td><td>7200</td><td>CWMS</td></tr>\n<tr><td>6Day</td><td>8640</td><td>DSS</td></tr>\n<tr><td>6Days</td><td>8640</td><td>CWMS</td></tr>\n<tr><td>1Week</td><td>10080</td><td>CWMS, DSS</td></tr>\n<tr><td>Tri-Month</td><td>14400</td><td>DSS</td></tr>\n<tr><td>Semi-Month</td><td>21600</td><td>DSS</td></tr>\n<tr><td>1Month</td><td>43200</td><td>CWMS, DSS, DSS BLOCK SIZE</td></tr>\n<tr><td>1Year</td><td>525600</td><td>CWMS, DSS, DSS BLOCK SIZE</td></tr>\n<tr><td>1Decade</td><td>5256000</td><td>DSS BLOCK SIZE</td></tr>\n<tr><td>1Century</td><td>52560000</td><td>DSS BLOCK SIZE</td></tr>\n</table></pre>\n\n<p></details></p>\n", "annotation": ": dict[str, int]", "default_value": "{&#x27;0&#x27;: 0, &#x27;Irr&#x27;: 0, &#x27;~1Minute&#x27;: 0, &#x27;~2Minutes&#x27;: 2, &#x27;~3Minutes&#x27;: 3, &#x27;~4Minutes&#x27;: 4, &#x27;~5Minutes&#x27;: 5, &#x27;~6Minutes&#x27;: 6, &#x27;~10Minutes&#x27;: 10, &#x27;~12Minutes&#x27;: 12, &#x27;~15Minutes&#x27;: 15, &#x27;~20Minutes&#x27;: 20, &#x27;~30Minutes&#x27;: 30, &#x27;~1Hour&#x27;: 0, &#x27;~2Hours&#x27;: 120, &#x27;~3Hours&#x27;: 180, &#x27;~4Hours&#x27;: 240, &#x27;~6Hours&#x27;: 360, &#x27;~8Hours&#x27;: 480, &#x27;~12Hours&#x27;: 720, &#x27;~1Day&#x27;: 0, &#x27;~2Days&#x27;: 2880, &#x27;~3Days&#x27;: 4320, &#x27;~4Days&#x27;: 5760, &#x27;~5Days&#x27;: 7200, &#x27;~6Days&#x27;: 8640, &#x27;~1Week&#x27;: 0, &#x27;~1Month&#x27;: 0, &#x27;~1Year&#x27;: 0, &#x27;1Minute&#x27;: 1, &#x27;2Minutes&#x27;: 2, &#x27;3Minutes&#x27;: 3, &#x27;4Minutes&#x27;: 4, &#x27;5Minutes&#x27;: 5, &#x27;6Minutes&#x27;: 6, &#x27;10Minutes&#x27;: 10, &#x27;12Minutes&#x27;: 12, &#x27;15Minutes&#x27;: 15, &#x27;20Minutes&#x27;: 20, &#x27;30Minutes&#x27;: 30, &#x27;1Hour&#x27;: 60, &#x27;2Hours&#x27;: 120, &#x27;3Hours&#x27;: 180, &#x27;4Hours&#x27;: 240, &#x27;6Hours&#x27;: 360, &#x27;8Hours&#x27;: 480, &#x27;12Hours&#x27;: 720, &#x27;1Day&#x27;: 1440, &#x27;2Days&#x27;: 2880, &#x27;3Days&#x27;: 4320, &#x27;4Days&#x27;: 5760, &#x27;5Days&#x27;: 7200, &#x27;6Days&#x27;: 8640, &#x27;1Week&#x27;: 10080, &#x27;1Month&#x27;: 43200, &#x27;1Year&#x27;: 525600, &#x27;IR-Day&#x27;: 0, &#x27;IR-Month&#x27;: 0, &#x27;IR-Year&#x27;: 0, &#x27;IR-Decade&#x27;: 0, &#x27;IR-Century&#x27;: 0, &#x27;~2Minute&#x27;: 0, &#x27;~3Minute&#x27;: 0, &#x27;~4Minute&#x27;: 0, &#x27;~5Minute&#x27;: 0, &#x27;~6Minute&#x27;: 0, &#x27;~10Minute&#x27;: 0, &#x27;~12Minute&#x27;: 0, &#x27;~15Minute&#x27;: 0, &#x27;~20Minute&#x27;: 0, &#x27;~30Minute&#x27;: 0, &#x27;~2Hour&#x27;: 0, &#x27;~3Hour&#x27;: 0, &#x27;~4Hour&#x27;: 0, &#x27;~6Hour&#x27;: 0, &#x27;~8Hour&#x27;: 0, &#x27;~12Hour&#x27;: 0, &#x27;~2Day&#x27;: 0, &#x27;~3Day&#x27;: 0, &#x27;~4Day&#x27;: 0, &#x27;~5Day&#x27;: 0, &#x27;~6Day&#x27;: 0, &#x27;2Minute&#x27;: 2, &#x27;3Minute&#x27;: 3, &#x27;4Minute&#x27;: 4, &#x27;5Minute&#x27;: 5, &#x27;6Minute&#x27;: 6, &#x27;10Minute&#x27;: 10, &#x27;12Minute&#x27;: 12, &#x27;15Minute&#x27;: 15, &#x27;20Minute&#x27;: 20, &#x27;30Minute&#x27;: 30, &#x27;2Hour&#x27;: 120, &#x27;3Hour&#x27;: 180, &#x27;4Hour&#x27;: 240, &#x27;6Hour&#x27;: 360, &#x27;8Hour&#x27;: 480, &#x27;12Hour&#x27;: 720, &#x27;2Day&#x27;: 2880, &#x27;3Day&#x27;: 4320, &#x27;4Day&#x27;: 5760, &#x27;5Day&#x27;: 7200, &#x27;6Day&#x27;: 8640, &#x27;Tri-Month&#x27;: 14400, &#x27;Semi-Month&#x27;: 21600, &#x27;1Decade&#x27;: 5256000, &#x27;1Century&#x27;: 52560000}"}, {"fullname": "hec.interval.Interval.context", "modulename": "hec.interval", "qualname": "Interval.context", "kind": "variable", "doc": "<p>The context of this object (\"Cwms\", \"Dss\", or \"DssBlock\")</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.interval.Interval.get_all", "modulename": "hec.interval", "qualname": "Interval.get_all", "kind": "function", "doc": "<p>Retuns list of matched <code>Interval</code> objects in the any context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Optional[Callable[[Interval], bool]]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter. Defaults to None.\nIf None, all <code>Interval</code> objects in all contexts are matched.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[Interval]: A list of matched <code>Interval</code> objects (may be empty)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.get_all_cwms", "modulename": "hec.interval", "qualname": "Interval.get_all_cwms", "kind": "function", "doc": "<p>Retuns list of matched <code>Interval</code> objects in the CWMS context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Optional[Callable[[Interval], bool]]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter. Defaults to None.\nIf None, all <code>Interval</code> objects in the context are matched.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_exception_on_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[Interval]: A list of matched <code>Interval</code> objects (may be empty)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.get_all_cwms_names", "modulename": "hec.interval", "qualname": "Interval.get_all_cwms_names", "kind": "function", "doc": "<p>Retuns list of names of matched <code>Interval</code> objects in the CWMS context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Optional[Callable[[Interval], bool]]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter. Defaults to None.\nIf None, all <code>Interval</code> objects in the context are matched.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_exception_on_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: A list of names of matched <code>Interval</code> objects (may be empty)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.get_all_dss", "modulename": "hec.interval", "qualname": "Interval.get_all_dss", "kind": "function", "doc": "<p>Retuns list of matched <code>Interval</code> objects in the DSS context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Optional[Callable[[Interval], bool]]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter. Defaults to None.\nIf None, all <code>Interval</code> objects in the context are matched.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_exception_on_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[Interval]: A list of matched <code>Interval</code> objects (may be empty)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.get_all_dss_block_names", "modulename": "hec.interval", "qualname": "Interval.get_all_dss_block_names", "kind": "function", "doc": "<p>Retuns list of names of matched <code>Interval</code> objects in the DSS block size context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Optional[Callable[[Interval], bool]]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter. Defaults to None.\nIf None, all <code>Interval</code> objects in the context are matched.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_exception_on_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: A list of names of matched <code>Interval</code> objects (may be empty)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.get_all_dss_blocks", "modulename": "hec.interval", "qualname": "Interval.get_all_dss_blocks", "kind": "function", "doc": "<p>Retuns list of matched <code>Interval</code> objects in the DSS block size context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Optional[Callable[[Interval], bool]]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter. Defaults to None.\nIf None, all <code>Interval</code> objects in the context are matched.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_exception_on_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[Interval]: A list of matched <code>Interval</code> objects (may be empty)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.get_all_dss_names", "modulename": "hec.interval", "qualname": "Interval.get_all_dss_names", "kind": "function", "doc": "<p>Retuns list of names of matched <code>Interval</code> objects in the DSS context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Optional[Callable[[Interval], bool]]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter. Defaults to None.\nIf None, all <code>Interval</code> objects in the context are matched.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_exception_on_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: A list of names of matched <code>Interval</code> objects (may be empty)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.get_all_names", "modulename": "hec.interval", "qualname": "Interval.get_all_names", "kind": "function", "doc": "<p>Retuns list of names of matched <code>Interval</code> objects in the any context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Optional[Callable[[Interval], bool]]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter. Defaults to None.\nIf None, all <code>Interval</code> objects in all contexts are matched.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: A list of names of matched <code>Interval</code> objects (may be empty)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.get_any", "modulename": "hec.interval", "qualname": "Interval.get_any", "kind": "function", "doc": "<p>Retuns a matched <code>Interval</code> object in any context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Callable[[Interval], bool]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_exception_on_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[Interval]: A matched <code>Interval</code> object or None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.get_any_cwms", "modulename": "hec.interval", "qualname": "Interval.get_any_cwms", "kind": "function", "doc": "<p>Retuns a matched <code>Interval</code> object in the CWMS context, or None if there is no such object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Callable[[Interval], bool]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_exception_no_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[Interval]: A matched <code>Interval</code> object or None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.get_any_cwms_name", "modulename": "hec.interval", "qualname": "Interval.get_any_cwms_name", "kind": "function", "doc": "<p>Retuns the name of a matched <code>Interval</code> object in the CWMS context, or None if there is no such object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Callable[[Interval], bool]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_exception_on_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[str]: The name of a matched <code>Interval</code> object or None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.get_any_dss", "modulename": "hec.interval", "qualname": "Interval.get_any_dss", "kind": "function", "doc": "<p>Retuns a matched <code>Interval</code> object in the DSS context, or None if there is no such object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Callable[[Interval], bool]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_exception_on_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[Interval]: A matched <code>Interval</code> object or None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.get_any_dss_block", "modulename": "hec.interval", "qualname": "Interval.get_any_dss_block", "kind": "function", "doc": "<p>Retuns a matched <code>Interval</code> object in the DSS block size context, or None if there is no such object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Callable[[Interval], bool]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_exception_on_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[Interval]: A matched <code>Interval</code> object or None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.get_any_dss_block_name", "modulename": "hec.interval", "qualname": "Interval.get_any_dss_block_name", "kind": "function", "doc": "<p>Retuns the name of a matched <code>Interval</code> object in the DSS block size context, or None if there is no such object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Callable[[Interval], bool]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_exception_on_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[str]: The name of a matched <code>Interval</code> object or None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.get_any_dss_name", "modulename": "hec.interval", "qualname": "Interval.get_any_dss_name", "kind": "function", "doc": "<p>Retuns the name of a matched <code>Interval</code> object in the DSS context, or None if there is no such object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Callable[[Interval], bool]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_exception_on_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[str]: The name of a matched <code>Interval</code> object or None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.get_any_name", "modulename": "hec.interval", "qualname": "Interval.get_any_name", "kind": "function", "doc": "<p>Retuns the name of a matched <code>Interval</code> object in the any context, or None if there is no such object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Callable[[Interval], bool]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.is_irregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n<li><strong>exception_on_not_found (bool):</strong>  Specifies whether to raise an exception if no Intervals are found. If None, the default\nbehavior is used. Optional. Defaults to None. See <a href=\"#Interval.set_default_exception_on_not_found\">set_default_excpetion_on_not_found</a> and\n<a href=\"#Interval.get_default_exception_on_not_found\">get_default_exception_on_not_found</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[str]: The name of a matched <code>Interval</code> object or None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">exception_on_not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.get_cwms", "modulename": "hec.interval", "qualname": "Interval.get_cwms", "kind": "function", "doc": "<p>Returns a CWMS interval with the specified name or minutes</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>key (Union[str, int]):</strong>  The name or (actual or characteristic) minutes of the interval to retrieve.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>IntervalException:</strong>  if no CWMS interval exists with the specified key</li>\n<li><strong>TypeError:</strong>  If the key is not a string or integer</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Interval: The CWMS interval</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.get_datetime_index", "modulename": "hec.interval", "qualname": "Interval.get_datetime_index", "kind": "function", "doc": "<p>Generates a pandas DatetimeIndex from this interval.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>start_time (Any):</strong>  A time in the first interval. If <code>offset</code> is None, this will be the first time, otherwise the first time will be the top of the interval\ncontaining this time plus the specified <code>offset</code>. If the time includes no time zone, it will be assumed to be in <code>time_zone</code>, if specified, if any.\nMust be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or an object suitable for the <a href=\"hectime.html#HecTime.__init__\"><code>HecTime</code> constructor</a></li>\n<li><strong>end_time (Optional[Any]):</strong>  The generated series will end on or before this time, if specified. If the time includes no time zone, it will be assumed to be in <code>time_zone</code>, if specified.\nIf specified, must be an <a href=\"hectime.html#HecTime\"><code>HecTime</code></a> object or an object suitable for the <a href=\"hectime.html#HecTime.__init__\"><code>HecTime</code> constructor</a>. Either <code>end_time</code> or\n<code>count</code>, but not both, must be specified. Defaults to None.</li>\n<li><strong>count (Optional[int]):</strong>  The number of times in the index. Either <code>end_time</code> or <code>count</code>, but not both, must be specified. Defaults to None.</li>\n<li><strong>offset (Optional[Any]):</strong>  The offset of each time into the interval. If None, the offset is determined from <code>start_time</code>. If specified, must be an\n<a href=\"timespan.html#TimeSpan\"><code>TimeSpan</code></a> object or an object suitable for the <a href=\"timespan.html#TimeSpan.__init__\"><code>TimeSpan</code> constructor</a>. Defaults to None.</li>\n<li><strong>time_zone (Optional[Any]):</strong>  The time zone of the generated times. Must be specified if the interval is a local-regular interval. Defaults to None.</li>\n<li><strong>name (Optional[str]):</strong>  The name of the index. If the generated index is to be used in a <a href=\"timeseries.html#TimeSeries\"><code>TimeSeries</code></a> object, specify the name as \"name\". Defaults to None.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>IntervalException:</strong>  If invalid parameters are specified</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pd.DatetimeIndex: The generated index.</p>\n</blockquote>\n\n<h6 id=\"notes\">Notes:</h6>\n\n<blockquote>\n  <p>There is a somewhat subtle interplay between <code>start_time</code> and <code>offset</code>. If <code>offset</code> is None or not specified, the index is generated as follows:</p>\n  \n  <p><ul>\n<li>The offset used is the offset of <code>start_time</code> into the Interval object being used</li>\n<li>The offset handles end-of-month dates and leap years by adjusting the actual offset at each time to keep dates as aligned as possible</li>\n</ul></p>\n  \n  <p>Otherwise the offset is used literally.<br>\n  See the following examples:</p>\n</blockquote>\n\n<table style=\"font-size: 14px;\">\n<pre>\n<tr><th colspan=\"5\">Index on 1Month interval<br>Values in <span style=\"color: red;\">red</span> exceed the end of the month</th><tr>\n<tr><th>start_time</th><th colspan=\"2\">\"2025&#8209;01&#8209;31 08:00:00\"</th><th colspan=\"2\">\"2025&#8209;01&#8209;01 00:00:00\"</th></tr>\n<tr><th>offset</th><th>None</th><th colspan=\"2\">TimeSpan(\"P30DT8H\")</th><th>timedelta(<br>&nbsp;&nbsp;days=30,<br>&nbsp;&nbsp;hours=8,<br>)</th></tr>\n<tr><th rowspan=\"13\">index</th>\n<tr><td>2025&#8209;01&#8209;31&nbsp;08:00:00</td><td>2025&#8209;01&#8209;31&nbsp;08:00:00</td><td>2025&#8209;01&#8209;31&nbsp;08:00:00</td><td>2025&#8209;01&#8209;31&nbsp;08:00:00</td></tr>\n<tr><td>2025&#8209;02&#8209;28&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;03&#8209;03&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;03&#8209;03&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;03&#8209;03&nbsp;08:00:00</td></tr>\n<tr><td>2025&#8209;03&#8209;31&nbsp;08:00:00</td><td>2025&#8209;03&#8209;31&nbsp;08:00:00</td><td>2025&#8209;03&#8209;31&nbsp;08:00:00</td><td>2025&#8209;03&#8209;31&nbsp;08:00:00</td></tr>\n<tr><td>2025&#8209;04&#8209;30&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;05&#8209;01&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;05&#8209;01&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;05&#8209;01&nbsp;08:00:00</td></tr>\n<tr><td>2025&#8209;05&#8209;31&nbsp;08:00:00</td><td>2025&#8209;05&#8209;31&nbsp;08:00:00</td><td>2025&#8209;05&#8209;31&nbsp;08:00:00</td><td>2025&#8209;05&#8209;31&nbsp;08:00:00</td></tr>\n<tr><td>2025&#8209;06&#8209;30&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;07&#8209;01&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;07&#8209;01&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;07&#8209;01&nbsp;08:00:00</td></tr>\n<tr><td>2025&#8209;07&#8209;31&nbsp;08:00:00</td><td>2025&#8209;07&#8209;31&nbsp;08:00:00</td><td>2025&#8209;07&#8209;31&nbsp;08:00:00</td><td>2025&#8209;07&#8209;31&nbsp;08:00:00</td></tr>\n<tr><td>2025&#8209;08&#8209;31&nbsp;08:00:00</td><td>2025&#8209;08&#8209;31&nbsp;08:00:00</td><td>2025&#8209;08&#8209;31&nbsp;08:00:00</td><td>2025&#8209;08&#8209;31&nbsp;08:00:00</td></tr>\n<tr><td>2025&#8209;09&#8209;30&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;10&#8209;01&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;10&#8209;01&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;10&#8209;01&nbsp;08:00:00</td></tr>\n<tr><td>2025&#8209;10&#8209;31&nbsp;08:00:00</td><td>2025&#8209;10&#8209;31&nbsp;08:00:00</td><td>2025&#8209;10&#8209;31&nbsp;08:00:00</td><td>2025&#8209;10&#8209;31&nbsp;08:00:00</td></tr>\n<tr><td>2025&#8209;11&#8209;30&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;12&#8209;01&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;12&#8209;01&nbsp;08:00:00</td><td style=\"color: red;\">2025&#8209;12&#8209;01&nbsp;08:00:00</td></tr>\n<tr><td>2025&#8209;12&#8209;31&nbsp;08:00:00</td><td>2025&#8209;12&#8209;31&nbsp;08:00:00</td><td>2025&#8209;12&#8209;31&nbsp;08:00:00</td><td>2025&#8209;12&#8209;31&nbsp;08:00:00</td></tr>\n</pre>\n</table>\n\n<table style=\"font-size: 14px;\">\n<pre>\n<tr><th colspan=\"5\">Index on 1Year interval<br>Values in <span style=\"color: red;\">red</span> don't match the starting day-of-month</th><tr>\n<tr><th>start_time</th><th colspan=\"2\">\"2025&#8209;05&#8209;11 00:00:00\"</th><th colspan=\"2\">\"2025&#8209;01&#8209;01 00:00:00\"</th></tr>\n<tr><th>offset</th><th>None</th><th colspan=\"2\">TimeSpan(\"P1M10D\")</th><th>timedelta(<br>&nbsp;&nbsp;days=130,<br>)</th></tr>\n<tr><th rowspan=\"13\">index</th>\n<tr><td>2025&#8209;05&#8209;11&nbsp;00:00:00</td><td>2025&#8209;05&#8209;11&nbsp;00:00:00</td><td>2025&#8209;05&#8209;11&nbsp;00:00:00</td><td>2025&#8209;05&#8209;11&nbsp;00:00:00</td></tr>\n<tr><td>2026&#8209;05&#8209;11&nbsp;00:00:00</td><td>2026&#8209;05&#8209;11&nbsp;00:00:00</td><td>2026&#8209;05&#8209;11&nbsp;00:00:00</td><td>2026&#8209;05&#8209;11&nbsp;00:00:00</td></tr>\n<tr><td>2027&#8209;05&#8209;11&nbsp;00:00:00</td><td>2027&#8209;05&#8209;11&nbsp;00:00:00</td><td>2027&#8209;05&#8209;11&nbsp;00:00:00</td><td>2027&#8209;05&#8209;11&nbsp;00:00:00</td></tr>\n<tr><td>2028&#8209;05&#8209;11&nbsp;00:00:00</td><td>2028&#8209;05&#8209;11&nbsp;00:00:00</td><td>2028&#8209;05&#8209;11&nbsp;00:00:00</td><td style=\"color: red;\">2028&#8209;05&#8209;10&nbsp;00:00:00</td></tr>\n<tr><td>2029&#8209;05&#8209;11&nbsp;00:00:00</td><td>2029&#8209;05&#8209;11&nbsp;00:00:00</td><td>2029&#8209;05&#8209;11&nbsp;00:00:00</td><td>2029&#8209;05&#8209;11&nbsp;00:00:00</td></tr>\n<tr><td>2030&#8209;05&#8209;11&nbsp;00:00:00</td><td>2030&#8209;05&#8209;11&nbsp;00:00:00</td><td>2030&#8209;05&#8209;11&nbsp;00:00:00</td><td>2030&#8209;05&#8209;11&nbsp;00:00:00</td></tr>\n<tr><td>2031&#8209;05&#8209;11&nbsp;00:00:00</td><td>2031&#8209;05&#8209;11&nbsp;00:00:00</td><td>2031&#8209;05&#8209;11&nbsp;00:00:00</td><td>2031&#8209;05&#8209;11&nbsp;00:00:00</td></tr>\n<tr><td>2032&#8209;05&#8209;11&nbsp;00:00:00</td><td>2032&#8209;05&#8209;11&nbsp;00:00:00</td><td>2032&#8209;05&#8209;11&nbsp;00:00:00</td><td style=\"color: red;\">2032&#8209;05&#8209;10&nbsp;00:00:00</td></tr>\n<tr><td>2033&#8209;05&#8209;11&nbsp;00:00:00</td><td>2033&#8209;05&#8209;11&nbsp;00:00:00</td><td>2033&#8209;05&#8209;11&nbsp;00:00:00</td><td>2033&#8209;05&#8209;11&nbsp;00:00:00</td></tr>\n<tr><td>2034&#8209;05&#8209;11&nbsp;00:00:00</td><td>2034&#8209;05&#8209;11&nbsp;00:00:00</td><td>2034&#8209;05&#8209;11&nbsp;00:00:00</td><td>2034&#8209;05&#8209;11&nbsp;00:00:00</td></tr>\n<tr><td>2035&#8209;05&#8209;11&nbsp;00:00:00</td><td>2035&#8209;05&#8209;11&nbsp;00:00:00</td><td>2035&#8209;05&#8209;11&nbsp;00:00:00</td><td>2035&#8209;05&#8209;11&nbsp;00:00:00</td></tr>\n<tr><td>2036&#8209;05&#8209;11&nbsp;00:00:00</td><td>2036&#8209;05&#8209;11&nbsp;00:00:00</td><td>2036&#8209;05&#8209;11&nbsp;00:00:00</td><td style=\"color: red;\">2036&#8209;05&#8209;10&nbsp;00:00:00</td></tr>\n</pre>\n</table>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">start_time</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">end_time</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">count</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">indexes</span><span class=\"o\">.</span><span class=\"n\">datetimes</span><span class=\"o\">.</span><span class=\"n\">DatetimeIndex</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.get_default_exception_on_not_found", "modulename": "hec.interval", "qualname": "Interval.get_default_exception_on_not_found", "kind": "function", "doc": "<p>Retrieves the default behavior if any of the get... methods do not find an Interval object to return.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if the default behavior is to raise an exception when no Interval is found or False\n      if None is returned when no Interval is found</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.get_dss", "modulename": "hec.interval", "qualname": "Interval.get_dss", "kind": "function", "doc": "<p>Returns an HEC-DSS interval with the specified name or minutes</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>key (Union[str, int]):</strong>  The name or (actual or characteristic) minutes of the interval to retrieve.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>IntervalException:</strong>  if no Dss interval exists with the specified key</li>\n<li><strong>TypeError:</strong>  If the key is not a string or integer</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Interval: The Dss interval</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.get_dss_block_for_interval", "modulename": "hec.interval", "qualname": "Interval.get_dss_block_for_interval", "kind": "function", "doc": "<p>Returns the HEC-DSS block size for a specified interval.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>interval (Union[str, int, &quot;Interval&quot;]):</strong>  The interval to return the block size for. May be an Interval object,\nor its name or (actual or characteristic) minutes.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Interval: An interval object representing the HEC-DSS block size</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.is_any_irregular", "modulename": "hec.interval", "qualname": "Interval.is_any_irregular", "kind": "variable", "doc": "<p>Whether this object represents a normal irregular or pseudo-regular interval</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.interval.Interval.is_any_regular", "modulename": "hec.interval", "qualname": "Interval.is_any_regular", "kind": "variable", "doc": "<p>Whether this object represents a regular or local regular interval</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.interval.Interval.is_local_regular", "modulename": "hec.interval", "qualname": "Interval.is_local_regular", "kind": "variable", "doc": "<p>Whether this object represents a local regular interval</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.interval.Interval.is_pseudo_regular", "modulename": "hec.interval", "qualname": "Interval.is_pseudo_regular", "kind": "variable", "doc": "<p>Whether this object represents a pseudo-regular interval</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.interval.Interval.is_regular", "modulename": "hec.interval", "qualname": "Interval.is_regular", "kind": "variable", "doc": "<p>Whether this object represents a normal regular interval</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.interval.Interval.is_irregular", "modulename": "hec.interval", "qualname": "Interval.is_irregular", "kind": "variable", "doc": "<p>Whether this object represents a normal irregular interval</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.interval.Interval.minutes", "modulename": "hec.interval", "qualname": "Interval.minutes", "kind": "variable", "doc": "<p>The minutes (actual or characteristic) of this object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.interval.Interval.name", "modulename": "hec.interval", "qualname": "Interval.name", "kind": "variable", "doc": "<p>The name of this object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.interval.Interval.set_default_exception_on_not_found", "modulename": "hec.interval", "qualname": "Interval.set_default_exception_on_not_found", "kind": "function", "doc": "<p>Sets the default behavior if any of the get... methods do not find an Interval object to return.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (bool):</strong>  Whether to raise an exception if no Interval is found (True) or return None (False)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.location", "modulename": "hec.location", "kind": "module", "doc": "<p>Provides location info</p>\n"}, {"fullname": "hec.location.KIND", "modulename": "hec.location", "qualname": "KIND", "kind": "class", "doc": "<p>An enumeration.</p>\n", "bases": "enum.Enum"}, {"fullname": "hec.location.KIND.SITE", "modulename": "hec.location", "qualname": "KIND.SITE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KIND.SITE: 1&gt;"}, {"fullname": "hec.location.KIND.STREAM", "modulename": "hec.location", "qualname": "KIND.STREAM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KIND.STREAM: 2&gt;"}, {"fullname": "hec.location.KIND.BASIN", "modulename": "hec.location", "qualname": "KIND.BASIN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KIND.BASIN: 3&gt;"}, {"fullname": "hec.location.KIND.PROJECT", "modulename": "hec.location", "qualname": "KIND.PROJECT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KIND.PROJECT: 4&gt;"}, {"fullname": "hec.location.KIND.EMBANKMENT", "modulename": "hec.location", "qualname": "KIND.EMBANKMENT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KIND.EMBANKMENT: 5&gt;"}, {"fullname": "hec.location.KIND.OUTLET", "modulename": "hec.location", "qualname": "KIND.OUTLET", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KIND.OUTLET: 6&gt;"}, {"fullname": "hec.location.KIND.TURBINE", "modulename": "hec.location", "qualname": "KIND.TURBINE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KIND.TURBINE: 7&gt;"}, {"fullname": "hec.location.KIND.LOCK", "modulename": "hec.location", "qualname": "KIND.LOCK", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KIND.LOCK: 8&gt;"}, {"fullname": "hec.location.KIND.STREAM_LOCATION", "modulename": "hec.location", "qualname": "KIND.STREAM_LOCATION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KIND.STREAM_LOCATION: 9&gt;"}, {"fullname": "hec.location.KIND.GATE", "modulename": "hec.location", "qualname": "KIND.GATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KIND.GATE: 10&gt;"}, {"fullname": "hec.location.KIND.OVERFLOW", "modulename": "hec.location", "qualname": "KIND.OVERFLOW", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KIND.OVERFLOW: 11&gt;"}, {"fullname": "hec.location.KIND.STREAM_GAGE", "modulename": "hec.location", "qualname": "KIND.STREAM_GAGE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KIND.STREAM_GAGE: 12&gt;"}, {"fullname": "hec.location.KIND.STREAM_REACH", "modulename": "hec.location", "qualname": "KIND.STREAM_REACH", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KIND.STREAM_REACH: 13&gt;"}, {"fullname": "hec.location.KIND.PUMP", "modulename": "hec.location", "qualname": "KIND.PUMP", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KIND.PUMP: 14&gt;"}, {"fullname": "hec.location.KIND.WEATHER_GAGE", "modulename": "hec.location", "qualname": "KIND.WEATHER_GAGE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KIND.WEATHER_GAGE: 15&gt;"}, {"fullname": "hec.location.KIND.ENTITY", "modulename": "hec.location", "qualname": "KIND.ENTITY", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;KIND.ENTITY: 16&gt;"}, {"fullname": "hec.location.LocationException", "modulename": "hec.location", "qualname": "LocationException", "kind": "class", "doc": "<p>Exception specific to Location operations</p>\n", "bases": "builtins.Exception"}, {"fullname": "hec.location.Location", "modulename": "hec.location", "qualname": "Location", "kind": "class", "doc": "<p>Holds information about locations</p>\n"}, {"fullname": "hec.location.Location.__init__", "modulename": "hec.location", "qualname": "Location.__init__", "kind": "function", "doc": "<p>Initializes a Location object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The location name</li>\n<li><strong>office (Optional[str]):</strong>  The office that owns the location, if applicable. Defaults to None.</li>\n<li><strong>latitude (Optional[float]):</strong>  The latitude of the location. Defaults to None.</li>\n<li><strong>longitude (Optional[float]):</strong>  The longitude of the location. Defaults to None.</li>\n<li><strong>horizontal_datum (Optional[str]):</strong>  The horizontal datum of the specified lat/lon. Defaults to None.</li>\n<li><strong>elevation (Optional[float]):</strong>  The elevation of the location. Defaults to None.</li>\n<li><strong>elevation_unit (Optional[str]):</strong>  The unit of elevation of the location. Defaults to None.</li>\n<li><strong>vertical_datum (Optional[str]):</strong>  The native vertical datum of the specified elevation. Defaults to None.</li>\n<li><strong>vertical_datum_info (Optional[Union[str, dict[str,Any]]]):</strong>  The vertical datum info for the location. Overrides <code>elevation</code>, <code>elevation_unit</code>, and <code>vertical_datum</code> parameters, if also specified. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">office</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">latitude</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">longitude</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">horizontal_datum</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">elevation</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">elevation_unit</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">vertical_datum</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kind</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">vertical_datum_info</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "hec.location.Location.basename", "modulename": "hec.location", "qualname": "Location.basename", "kind": "variable", "doc": "<p>The name of the location up to any initial '-' character</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.location.Location.elevation", "modulename": "hec.location", "qualname": "Location.elevation", "kind": "variable", "doc": "<p>The elevation of the location</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[hec.unit.UnitQuantity]"}, {"fullname": "hec.location.Location.horizontal_datum", "modulename": "hec.location", "qualname": "Location.horizontal_datum", "kind": "variable", "doc": "<p>The horizontal datum of the location's latitude/longitude</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.location.Location.kind", "modulename": "hec.location", "qualname": "Location.kind", "kind": "variable", "doc": "<p>The kind of the location</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.location.Location.latitude", "modulename": "hec.location", "qualname": "Location.latitude", "kind": "variable", "doc": "<p>The latitude of the location</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[float]"}, {"fullname": "hec.location.Location.longitude", "modulename": "hec.location", "qualname": "Location.longitude", "kind": "variable", "doc": "<p>The longitude of the location</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[float]"}, {"fullname": "hec.location.Location.name", "modulename": "hec.location", "qualname": "Location.name", "kind": "variable", "doc": "<p>The full name of the location</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.location.Location.office", "modulename": "hec.location", "qualname": "Location.office", "kind": "variable", "doc": "<p>The office that owns the location</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.location.Location.subname", "modulename": "hec.location", "qualname": "Location.subname", "kind": "variable", "doc": "<p>The name of the location after any initial '-' character</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.location.Location.time_zone", "modulename": "hec.location", "qualname": "Location.time_zone", "kind": "variable", "doc": "<p>The time zone of the location</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.location.Location.vertical_datum", "modulename": "hec.location", "qualname": "Location.vertical_datum", "kind": "variable", "doc": "<p>The native vertical datum of the location's elevation</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.location.Location.vertical_datum_info", "modulename": "hec.location", "qualname": "Location.vertical_datum_info", "kind": "variable", "doc": "<p>The vertical datum information for the location.\n    * The getter returns a _VerticalDatumInfo object.\n    * The setter accepts _VerticalDatumInfo objects</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[hec.parameter.ElevParameter._VerticalDatumInfo]"}, {"fullname": "hec.location.Location.vertical_datum_json", "modulename": "hec.location", "qualname": "Location.vertical_datum_json", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.location.Location.vertical_datum_xml", "modulename": "hec.location", "qualname": "Location.vertical_datum_xml", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.parameter", "modulename": "hec.parameter", "kind": "module", "doc": "<p>Provides parameter info and operations</p>\n\n<p>Comprises the classes:</p>\n\n<ul>\n<li><a href=\"#Parameter\">Parameter</a></li>\n<li><a href=\"#ElevParameter\">ElevParameter</a></li>\n<li><a href=\"#ParameterType\">ParameterType</a></li>\n</ul>\n\n<p><a name=\"base_parameter_definitions\"></a>\n<strong>Base Parameter Definitions</strong>\nThe tab separated variable file <code>resources/base_parameters.tsv</code> in this module's installation provides the following information about base parameters.</p>\n\n<table>\n<tr><th>Field No.</th><th>Content</th><th>Type</th><th>Notes</th></tr>\n<tr><td>1</td><td>Base Parameter Identifier</td><td>String</td><td>Required</td></tr>\n<tr><td>2</td><td>Long Name</td><td>String</td><td>Required</td></tr>\n<tr><td>3</td><td>Description</td><td>String</td><td>Required</td></tr>\n<tr><td>4</td><td>Default English Unit</td><td>String</td><td>Required</td></tr>\n<tr><td>5</td><td>Default SI Unit</td><td>String</td><td>Required</td></tr>\n<tr><td>6</td><td>Parameter is Accumuatable Over Time</td><td>Boolean</td><td>Required</td></tr>\n<tr><td>7</td><td>Integrated Base Parameter</td><td>String</td><td>Optional. Base Parameter of integrating the base parameter in Field 1 over time</td></tr>\n<tr><td>8</td><td>Differentiated Base Parameter</td><td>String</td><td>Optional. Base Parameter of differentiating the base parameter in Field 1 with respect to time</td></tr>\n<tr><td>9</td><td>English Differentiation Conversion Factor</td><td>Numeric</td><td>Required if Field 8 is present. Factor to convert:\n    <ul>\n    <li><b>From</b> standard English unit of dividing the base parameter in Field 1 by a number of seconds</li>\n    <li><b>To</b> the standard English unit of the base parameter in Field 8</li>\n    </ul></td></tr>\n<tr><td>10</td><td>SI Differentiation Conversion Factor</td><td>Numeric</td><td>Required if Field 8 is present. Factor to convert:\n    <ul>\n    <li><b>From</b> standard SI unit of dividing the base parameter in Field 1 by a number of seconds</li>\n    <li><b>To</b> the standard SI unit of the base parameter in Field 8</li>\n    </ul></td></tr>\n</table>\n"}, {"fullname": "hec.parameter.get_compatible_parameters", "modulename": "hec.parameter", "qualname": "get_compatible_parameters", "kind": "function", "doc": "<p>Returns a list of base parameter names that are compatible with the specified unit</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit Union[str, Unit]):</strong>  The unit to get the compatible parameters for</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: The list of compatible base parameter names</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unitspec</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.parameter.ParameterException", "modulename": "hec.parameter", "qualname": "ParameterException", "kind": "class", "doc": "<p>Exception specific to Parameter operations</p>\n", "bases": "builtins.Exception"}, {"fullname": "hec.parameter.Parameter", "modulename": "hec.parameter", "qualname": "Parameter", "kind": "class", "doc": "<p>Holds info (name and unit) for a parameter.</p>\n\n<p>See <a href=\"parameter.html#base_parameter_definitions\">base_parameter_definitions</a> for information on base parameters and their conversions.</p>\n"}, {"fullname": "hec.parameter.Parameter.__init__", "modulename": "hec.parameter", "qualname": "Parameter.__init__", "kind": "function", "doc": "<p>Initializer</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The full parmeter name</li>\n<li><strong>unit_or_system (Optional[str]):</strong> <br>\n<ul>\n<li>If <code>EN</code> or <code>None</code>, the default English unit for the base parameter will be assigned</li>\n<li>if <code>SI</code>,  the default Syst\u00e8me International unit for the base parameter will be assigned</li>\n<li>Otherwise the specified unit will be assigned</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ParameterException:</strong>  If the parameter name does not contain a valid base parameter name,\nor if the specified unit is not valid for the parameter</li>\n<li><strong>KeyError:</strong>  If the specified unit is not a valid unit name, alias or Pint unit definition</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">unit_or_system</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "hec.parameter.Parameter.accumulatable_base_parameters", "modulename": "hec.parameter", "qualname": "Parameter.accumulatable_base_parameters", "kind": "function", "doc": "<p>Returns a list of base parameter names that can be accumulated over time for the specified context</p>\n\n<p>See <a href=\"parameter.html#base_parameter_definitions\">base_parameter_definitions</a> for information on base parameters and their conversions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context (str):</strong>  The context for the base parameter names. Currently only \"CWMS\" is supported. Defaults to \"CWMS\"</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ParameterException:</strong>  If an invalid context is specified</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: A sorted list of names of base parameter that can be integrated over time for the context</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;CWMS&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.parameter.Parameter.base_parameter", "modulename": "hec.parameter", "qualname": "Parameter.base_parameter", "kind": "variable", "doc": "<p>The actual base parameter used. Will be same as <code>basename</code> unless the\nparameter was created using a parameter alias</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.parameter.Parameter.base_parameters", "modulename": "hec.parameter", "qualname": "Parameter.base_parameters", "kind": "function", "doc": "<p>Returns a list of valid base parameter names for the specified context</p>\n\n<p>See <a href=\"parameter.html#base_parameter_definitions\">base_parameter_definitions</a> for information on base parameters and their conversions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context (str):</strong>  The context for the base parameter names. Currently only \"CWMS\" is supported. Defaults to \"CWMS\"</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ParameterException:</strong>  If an invalid context is specified</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: A sorted list of valid base parameter names for the context</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;CWMS&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.parameter.Parameter.basename", "modulename": "hec.parameter", "qualname": "Parameter.basename", "kind": "variable", "doc": "<p>The name of the parameter as specified up to any initial '-' character</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.parameter.Parameter.differentiable_base_parameters", "modulename": "hec.parameter", "qualname": "Parameter.differentiable_base_parameters", "kind": "function", "doc": "<p>Returns a list of base parameter names that can be differentiated with respect to time for the specified context</p>\n\n<p>See <a href=\"parameter.html#base_parameter_definitions\">base_parameter_definitions</a> for information on base parameters and their conversions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context (str):</strong>  The context for the base parameter names. Currently only \"CWMS\" is supported. Defaults to \"CWMS\"</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ParameterException:</strong>  If an invalid context is specified</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: A sorted list of names of base parameter that can be differentiated with respect to time for the context</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;CWMS&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.parameter.Parameter.differentiation_info", "modulename": "hec.parameter", "qualname": "Parameter.differentiation_info", "kind": "function", "doc": "<p>Returns differentiation information for a base parameter name</p>\n\n<p>See <a href=\"parameter.html#base_parameter_definitions\">base_parameter_definitions</a> for information on base parameters and their conversions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>base_parameter (str):</strong>  The base parameter to get the information for.</li>\n<li><strong>context (str):</strong>  The context for the base parameter names. Currently only \"CWMS\" is supported. Defaults to \"CWMS\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: A dictionary with the following content:\n  {\n      \"base_parameter\": <base_parameter_name of differentiated time series>,\n      \"EN\" : <floating point factor for converting original parameter unit/second to the differentiated parameter unit>,\n      \"SI\" : <floating point factor for convertiig original parameter unit/second to the differentiated parameter unit>,\n  }</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">base_parameter</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;CWMS&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.parameter.Parameter.get_compatible_units", "modulename": "hec.parameter", "qualname": "Parameter.get_compatible_units", "kind": "function", "doc": "<p>Returns the list of unit names compatible with this parameter's unit</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: The list of compatible unit names</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.parameter.Parameter.integrable_base_parameters", "modulename": "hec.parameter", "qualname": "Parameter.integrable_base_parameters", "kind": "function", "doc": "<p>Returns a list of base parameter names that can be integrated over time for the specified context</p>\n\n<p>See <a href=\"parameter.html#base_parameter_definitions\">base_parameter_definitions</a> for information on base parameters and their conversions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context (str):</strong>  The context for the base parameter names. Currently only \"CWMS\" is supported. Defaults to \"CWMS\"</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ParameterException:</strong>  If an invalid context is specified</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: A sorted list of names of base parameter that can be integrated over time for the context</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;CWMS&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.parameter.Parameter.ito", "modulename": "hec.parameter", "qualname": "Parameter.ito", "kind": "function", "doc": "<p>Assigns a unit to this parameter.</p>\n\n<p>Identical to calling <a href=\"#Parameter.to\">.to(unit_or_system, in_place=True)</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit_or_system (str):</strong> <br>\n<ul>\n<li>If <code>EN</code>, the default English unit for the base parameter will be assigned</li>\n<li>if <code>SI</code>,  the default Syst\u00e8me International unit for the base parameter will be assigned</li>\n<li>Otherwise the specified unit will be assigned</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ParameterException:</strong>  If the specified unit is not valid for the parameter</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Parameter: The converted object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">unit_or_system</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">Parameter</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.parameter.Parameter.name", "modulename": "hec.parameter", "qualname": "Parameter.name", "kind": "variable", "doc": "<p>The full name of the parameter as specified</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.parameter.Parameter.subname", "modulename": "hec.parameter", "qualname": "Parameter.subname", "kind": "variable", "doc": "<p>The name of the parameter as specified after any initial '-' character</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.parameter.Parameter.to", "modulename": "hec.parameter", "qualname": "Parameter.to", "kind": "function", "doc": "<p>Assigns a unit to this parameter or a copy of this parameter</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit_or_system (str):</strong> <br>\n<ul>\n<li>If <code>EN</code>, the default English unit for the base parameter will be assigned</li>\n<li>if <code>SI</code>,  the default Syst\u00e8me International unit for the base parameter will be assigned</li>\n<li>Otherwise the specified unit will be assigned</li>\n</ul></li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to modify and return this object (True)\nor a copy of this object (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ParameterException:</strong>  If the specified unit is not valid for the parameter</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Parameter: The converted object (self if in_place == True, otherwise a converted copy)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">unit_or_system</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">Parameter</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.parameter.Parameter.unit", "modulename": "hec.parameter", "qualname": "Parameter.unit", "kind": "variable", "doc": "<p>The unit assigned to the parameter</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": pint.registry.Unit"}, {"fullname": "hec.parameter.Parameter.unit_name", "modulename": "hec.parameter", "qualname": "Parameter.unit_name", "kind": "variable", "doc": "<p>The unit name assigned to the parameter</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.parameter.ElevParameter", "modulename": "hec.parameter", "qualname": "ElevParameter", "kind": "class", "doc": "<p>Holds info (name and vertical datum information) for an elevation parameter</p>\n", "bases": "Parameter"}, {"fullname": "hec.parameter.ElevParameter.__init__", "modulename": "hec.parameter", "qualname": "ElevParameter.__init__", "kind": "function", "doc": "<p>Initializes the ElevParameter object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The full parameter name</li>\n<li><strong>vertical_datum_info (Union[str, dict[str, Any]]):</strong>  The vertical datum info as an xml string or dictionary</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ElevParameter.VerticalDatumException:</strong>  If <code>vertical datum</code> info is invalid</li>\n<li><strong>ParameterException:</strong>  If the base parameter is not 'Elev'</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">vertical_datum_info</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "hec.parameter.ElevParameter.VerticalDatumException", "modulename": "hec.parameter", "qualname": "ElevParameter.VerticalDatumException", "kind": "class", "doc": "<p>Exception specific to vertical datum operations</p>\n", "bases": "ParameterException"}, {"fullname": "hec.parameter.ElevParameter.clone", "modulename": "hec.parameter", "qualname": "ElevParameter.clone", "kind": "function", "doc": "<p>Returns a copy of this object</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ElevParameter: The copy</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">ElevParameter</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.parameter.ElevParameter.current_datum", "modulename": "hec.parameter", "qualname": "ElevParameter.current_datum", "kind": "variable", "doc": "<p>The current datum of this object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.parameter.ElevParameter.elevation", "modulename": "hec.parameter", "qualname": "ElevParameter.elevation", "kind": "variable", "doc": "<p>The elevation of this object in the current datum and unit</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[hec.unit.UnitQuantity]"}, {"fullname": "hec.parameter.ElevParameter.get_offset_to", "modulename": "hec.parameter", "qualname": "ElevParameter.get_offset_to", "kind": "function", "doc": "<p>Returns the offset from the current vertical datum to the specified target datum in the current unit.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>target_datum (str):</strong>  The target datum</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ElevParameter.VerticalDatumException:</strong>  If the target datum is invalid or the\nobject does not specify an offset to the target datum</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[UnitQuantity]: The offset from the current datum to the target datum\n      or <code>None</code> if the current and target datums are the same.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">target_datum</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">unit</span><span class=\"o\">.</span><span class=\"n\">UnitQuantity</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.parameter.ElevParameter.ito", "modulename": "hec.parameter", "qualname": "ElevParameter.ito", "kind": "function", "doc": "<p>Converts this object to the specified unit or vertical datum and returns it.</p>\n\n<p>Identical to calling <a href=\"#ElevParameter.to\">.to(unit_or_system_or_datum, in_place=True</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit_or_system_or_datum (Union[str, Unit]):</strong>  The unit, unit_system, or vertical datum to convert to.\nIf unit system (\"EN\" or \"SI\"), the default Elev unit for that system is used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ElevParameter: The converted object, whether this object of a copy of it</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">unit_or_system_or_datum</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">ElevParameter</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.parameter.ElevParameter.native_datum", "modulename": "hec.parameter", "qualname": "ElevParameter.native_datum", "kind": "variable", "doc": "<p>The native datum of this object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.parameter.ElevParameter.navd88_offset", "modulename": "hec.parameter", "qualname": "ElevParameter.navd88_offset", "kind": "variable", "doc": "<p>The offset from the native datum of this object to NGVD-29, in the current unit, or <code>None</code> if<br>\n    * the native vertical datum is NGVD-29\n    * the native vertical datum is not NGVD-29, but the object does not have such an offset</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[hec.unit.UnitQuantity]"}, {"fullname": "hec.parameter.ElevParameter.navd88_offset_is_estimate", "modulename": "hec.parameter", "qualname": "ElevParameter.navd88_offset_is_estimate", "kind": "variable", "doc": "<p>Whether the offset from the native vertical datum to NGVD-29 is an estimate (e.g, VERTCON)\nor <code>None</code> if the native vertical datum is NGVD-29 or the object does not have such and offset</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[bool]"}, {"fullname": "hec.parameter.ElevParameter.ngvd29_offset", "modulename": "hec.parameter", "qualname": "ElevParameter.ngvd29_offset", "kind": "variable", "doc": "<p>The offset from the native datum of this object to NGVD-29, in the current unit, or <code>None</code> if<br>\n    * the native vertical datum is NGVD-29\n    * the native vertical datum is not NGVD-29, but the object does not have such an offset</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[hec.unit.UnitQuantity]"}, {"fullname": "hec.parameter.ElevParameter.ngvd29_offset_is_estimate", "modulename": "hec.parameter", "qualname": "ElevParameter.ngvd29_offset_is_estimate", "kind": "variable", "doc": "<p>Whether the offset from the native vertical datum to NGVD-29 is an estimate (e.g, VERTCON)\nor <code>None</code> if the native vertical datum is NGVD-29 or the object does not have such and offset</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[bool]"}, {"fullname": "hec.parameter.ElevParameter.to", "modulename": "hec.parameter", "qualname": "ElevParameter.to", "kind": "function", "doc": "<p>Converts either this object or a copy of it to the specified unit or vertical datum and returns it</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit_or_system_or_datum (Union[str, Unit]):</strong>  The unit, unit_system, or vertical datum to convert to.\nIf unit system (\"EN\" or \"SI\"), the default Elev unit for that system is used.</li>\n<li><strong>in_place (bool, optional):</strong>  If <code>True</code>, this object is converted and returned, otherwise a copy is\nconverted and returned. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ElevParameter: The converted object, whether this object of a copy of it</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">unit_or_system_or_datum</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">ElevParameter</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.parameter.ElevParameter.unit", "modulename": "hec.parameter", "qualname": "ElevParameter.unit", "kind": "variable", "doc": "<p>The unit of this object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": pint.registry.Unit"}, {"fullname": "hec.parameter.ElevParameter.unit_name", "modulename": "hec.parameter", "qualname": "ElevParameter.unit_name", "kind": "variable", "doc": "<p>The unit name of this object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.parameter.ElevParameter.vertical_datum_info", "modulename": "hec.parameter", "qualname": "ElevParameter.vertical_datum_info", "kind": "variable", "doc": "<p>The VerticalDatumInfo object of this parameter</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": hec.parameter.ElevParameter._VerticalDatumInfo"}, {"fullname": "hec.parameter.ElevParameter.vertical_datum_info_dict", "modulename": "hec.parameter", "qualname": "ElevParameter.vertical_datum_info_dict", "kind": "variable", "doc": "<p>The VerticalDatumInfo object of this parameter as a dictionary</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": dict[str, typing.Any]"}, {"fullname": "hec.parameter.ElevParameter.vertical_datum_info_xml", "modulename": "hec.parameter", "qualname": "ElevParameter.vertical_datum_info_xml", "kind": "variable", "doc": "<p>The VerticalDatumInfo object of this parameter as an xml string</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.parameter.ParameterTypeException", "modulename": "hec.parameter", "qualname": "ParameterTypeException", "kind": "class", "doc": "<p>Exception specific to ParameterType operations</p>\n", "bases": "builtins.Exception"}, {"fullname": "hec.parameter.ParameterType", "modulename": "hec.parameter", "qualname": "ParameterType", "kind": "class", "doc": "<p>Holds info about parameter types.</p>\n\n<p>Parameter types have 3 separate contexts, RAW, CWMS, and DSS. There's not much use for the RAW context\nexcept for providing a bridge between the CWMS and DSS contexts. Users would normally work in either\nthe CWMS or DSS context.</p>\n\n<p>The contexts of already-instantiated objects can also be set.</p>\n\n<p>Parameter type names in the different contexts are:</p>\n\n<table>\n<tr><th>RAW</th><th>CWMS</th><th>DSS</th></tr>\n<tr><td>Total</td><td>Total</td><td>PER-CUM</td></tr>\n<tr><td>Maximum</td><td>Max</td><td>PER-MAX</td></tr>\n<tr><td>Minimum</td><td>Min</td><td>PER-MIN</td></tr>\n<tr><td>Constant</td><td>Const</td><td>CONST</td></tr>\n<tr><td>Average</td><td>Ave</td><td>PER-AVER</td></tr>\n<tr><td rowspan=\"2\">Instantaneous</td><td rowspan=\"2\">Inst</td><td>INST-CUM (for Precip or Count)</td></tr><tr><td>INST-VAL (for others)</td></tr>\n</table>\n"}, {"fullname": "hec.parameter.ParameterType.__init__", "modulename": "hec.parameter", "qualname": "ParameterType.__init__", "kind": "function", "doc": "<p>Initializes a ParameterType object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>param_type (str):</strong>  The name of the parameter type</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ParameterTypeException:</strong>  If <code>param_type</code> is not one of the values listed in the table above (context-insensitive)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">param_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "hec.parameter.ParameterType.context", "modulename": "hec.parameter", "qualname": "ParameterType.context", "kind": "variable", "doc": "<p>The context of this object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.parameter.ParameterType.get_cwms_name", "modulename": "hec.parameter", "qualname": "ParameterType.get_cwms_name", "kind": "function", "doc": "<p>Returns the name of the parameter time for the CWMS context</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The CWMS context name</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.parameter.ParameterType.get_dss_name", "modulename": "hec.parameter", "qualname": "ParameterType.get_dss_name", "kind": "function", "doc": "<p>Returns the name of the parameter time for the DSS context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>is_precip (bool, optional):</strong>  Whether the parameter type is for a precipitation parameter.\nThis matters only for the <code>Instantaneous</code> parameter type (CWMS=<code>Inst</code>). Defaults to False.\n<ul>\n<li><code>False</code>: <code>INST-CUM</code></li>\n<li><code>True</code> : <code>INST-VAL</code></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The DSS context name</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">is_precip</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.parameter.ParameterType.get_raw_name", "modulename": "hec.parameter", "qualname": "ParameterType.get_raw_name", "kind": "function", "doc": "<p>Returns the name of the parameter time for the RAW context</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The RAW context name</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.parameter.ParameterType.name", "modulename": "hec.parameter", "qualname": "ParameterType.name", "kind": "variable", "doc": "<p>The context-specific name of the object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.parameter.ParameterType.parameter_type_names", "modulename": "hec.parameter", "qualname": "ParameterType.parameter_type_names", "kind": "function", "doc": "<p>Returns a list of valid parameter type names for the context.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context (str):</strong>  The context for the parameter type names. Currently only \"RAW\", \"CWMS\", \"DSS\", and \"ALL\" are supported.</li>\n<li>If \"RAW\", the parameter types for all contexts are returned</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ParameterTypeException:</strong>  If an invlid context is specified</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: A sorted list of valid parameter type names for the context</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.parameter.ParameterType.set_context", "modulename": "hec.parameter", "qualname": "ParameterType.set_context", "kind": "function", "doc": "<p>Sets the context for this object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context (str):</strong>  The context - must be one of RAW, CWMS, or DSS</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ParameterTypeException:</strong>  If the specified context isn't one of the valid values</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.parameter.ParameterType.set_default_context", "modulename": "hec.parameter", "qualname": "ParameterType.set_default_context", "kind": "function", "doc": "<p>Sets the default context for new ParameterType objects</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>context (str):</strong>  The default context (RAW, CWMS, or DSS)</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ParameterTypeException:</strong>  If an invalid context is specified</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">context</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality", "modulename": "hec.quality", "kind": "module", "doc": "<p>Provides quality code info and operations</p>\n\n<p><a id-\"quality-code-rules\"></a>\n<strong>Data Quality Rules:</strong></p>\n\n<pre><code>1. Unless the Screened bit is set, no other bits can be set.\n\n2. Unused bits (21, 23, and 26-30) must be reset (zero).\n\n3. The Okay, Missing, Questioned and Rejected bits are mutually\n   exclusive.\n\n4. No replacement cause or replacement method bits can be set unless\n   the changed (different) bit is also set, and if the changed (different)\n   bit is set, one of the cause bits and one of the replacement\n   method bits must be set.\n\n5. Replacement Cause integer is in range 0..4.\n\n6. Replacement Method integer is in range 0..4\n\n7. The Test Failed bits are not mutually exclusive (multiple tests can be\n   marked as failed).\n</code></pre>\n\n<p><a id=\"bit-mapping\"></a>\n<strong>Bit Mappings:</strong></p>\n\n<pre><code>       3                   2                   1\n     1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0\n\n     P - - - - - T T T T T T T T T T T M M M M C C C D R R V V V V S\n     |           &lt;---------+---------&gt; &lt;--+--&gt; &lt;-+-&gt; | &lt;+&gt; &lt;--+--&gt; |\n     |                     |              |      |   |  |     |    +------Screened Flag\n     |                     |              |      |   |  |     +-----------Validity Exclusive Flags\n     |                     |              |      |   |  +--------------Value Range Integer\n     |                     |              |      |   +-------------------Different Flag\n     |                     |              |      +---------------Replacement Cause Integer\n     |                     |              +---------------------Replacement Method Integer\n     |                     +-------------------------------------------Test Failed Inclusive Flags\n     +-------------------------------------------------------------------Protected Flag\n</code></pre>\n"}, {"fullname": "hec.quality.changed_id", "modulename": "hec.quality", "qualname": "changed_id", "kind": "function", "doc": "<p>Returns the text identifier for a valid changed code.</p>\n\n<p>This code is encoded in the quality code in bit 7 of 32 as diagrammed in the <a href=\"#bit-mapping\">bit-mapping</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>code (int):</strong>  Must be 0 or 1</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: One of the following identifiers:</p>\n  \n  <p><table>\n<tr><th>code</th><th>returns</th></tr>\n<tr><td>0</td><td>ORIGINAL</td></tr>\n<tr><td>1</td><td>MODIFIED</td></tr>\n</table></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.get_code_ids", "modulename": "hec.quality", "qualname": "get_code_ids", "kind": "function", "doc": "<p>Returns a list of identifiers for the component codes in a quality code</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>code (int):</strong>  The quality code to return the component code identifiers for</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>QualityException:</strong>  If the quality code is not valid according the the <a href=\"#quality-code-rules\">quality code rules</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[int, ...]: A tuple containing the following code identifiers in the order specified:</p>\n  \n  <ul>\n  <li>screened</li>\n  <li>validity</li>\n  <li>range</li>\n  <li>changed</li>\n  <li>replacement cause</li>\n  <li>replacement method</li>\n  <li>test failed</li>\n  <li>protection</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.get_component_codes", "modulename": "hec.quality", "qualname": "get_component_codes", "kind": "function", "doc": "<p>Returns a tuple of component codes in a quality code</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>code (int):</strong>  The quality code to return the component codes for</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>QualityException:</strong>  If the quality code is not valid according the the <a href=\"#quality-code-rules\">quality code rules</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[int, ...]: A tuple containing the following component codes in the order specified:</p>\n  \n  <ul>\n  <li>screened</li>\n  <li>validity</li>\n  <li>range</li>\n  <li>changed</li>\n  <li>replacement cause</li>\n  <li>replacement method</li>\n  <li>test failed</li>\n  <li>protection</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.normalize_quality_code", "modulename": "hec.quality", "qualname": "normalize_quality_code", "kind": "function", "doc": "<p>Sets bits unused by quality codes to zero</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>code (int):</strong>  A quality code to normalize</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The input quality code with the unused bits set to zero</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.protection_id", "modulename": "hec.quality", "qualname": "protection_id", "kind": "function", "doc": "<p>Returns the text identifier for a valid protection code.</p>\n\n<p>This code is encoded in the quality code in bit 31 of 32 as diagrammed in the <a href=\"#bit-mapping\">bit-mapping</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>code (int):</strong>  Must be 0 or 1</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: One of the following identifiers:</p>\n  \n  <p><table>\n<tr><th>code</th><th>returns</th></tr>\n<tr><td>0</td><td>UNPROTECTED</td></tr>\n<tr><td>1</td><td>PROTECTED</td></tr>\n</table></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.range_id", "modulename": "hec.quality", "qualname": "range_id", "kind": "function", "doc": "<p>Returns the text identifier for a valid range code.</p>\n\n<p>This code is encoded in the quality code in bits 5 and 6 of 32</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>code (int):</strong>  Must be 0, 1, 2, or 3 as diagrammed in the <a href=\"#bit-mapping\">bit-mapping</a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: One of the following identifiers:</p>\n  \n  <p><table>\n<tr><th>code</th><th>returns</th></tr>\n<tr><td>0</td><td>NO_RANGE</td></tr>\n<tr><td>1</td><td>RANGE_1</td></tr>\n<tr><td>2</td><td>RANGE_2</td></tr>\n<tr><td>3</td><td>RANGE_3</td></tr>\n</table></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.repl_cause_id", "modulename": "hec.quality", "qualname": "repl_cause_id", "kind": "function", "doc": "<p>Returns the text identifier for a valid replacement cause code.</p>\n\n<p>This code is encoded in the quality code in bits 8-10 of 32 as diagrammed in the <a href=\"#bit-mapping\">bit-mapping</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>code (int):</strong>  Must be 0, 1, 2, 3, or 4</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: One of the following identifiers:</p>\n  \n  <p><table>\n<tr><th>code</th><th>returns</th></tr>\n<tr><td>0</td><td>NONE</td></tr>\n<tr><td>1</td><td>AUTOMATIC</td></tr>\n<tr><td>2</td><td>INTERACTIVE</td></tr>\n<tr><td>3</td><td>MANUAL</td></tr>\n<tr><td>4</td><td>RESTORED</td></tr>\n</table></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.repl_method_id", "modulename": "hec.quality", "qualname": "repl_method_id", "kind": "function", "doc": "<p>Returns the text identifier for a valid replacement method code.</p>\n\n<p>This code is encoded in the quality code in bits 11-14 of 32 as diagrammed in the <a href=\"#bit-mapping\">bit-mapping</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>code (int):</strong>  Must be 0, 1, 2, 3, or 4</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: One of the following identifiers:</p>\n  \n  <p><table>\n<tr><th>code</th><th>returns</th></tr>\n<tr><td>0</td><td>NONE</td></tr>\n<tr><td>1</td><td>LIN_INTERP</td></tr>\n<tr><td>2</td><td>EXPLICIT</td></tr>\n<tr><td>3</td><td>MISSING</td></tr>\n<tr><td>4</td><td>GRAPHICAL</td></tr>\n</table></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.screened_id", "modulename": "hec.quality", "qualname": "screened_id", "kind": "function", "doc": "<p>Returns the text identifier for a valid screened code.</p>\n\n<p>This code is encoded in the quality code in bit 0 of 32 as diagrammed in the <a href=\"#bit-mapping\">bit-mapping</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>code (int):</strong>  Must be 0 or 1</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: One of the following identifiers:</p>\n  \n  <p><table>\n<tr><th>code</th><th>returns</th></tr>\n<tr><td>0</td><td>UNSCREENED</td></tr>\n<tr><td>1</td><td>SCREENED</td></tr>\n</table></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.set_changed_code", "modulename": "hec.quality", "qualname": "set_changed_code", "kind": "function", "doc": "<p>Encodes a changed code into a quality code</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>code (int):</strong>  The quality code to encode the changed code into</li>\n<li><strong>changed (Union[bool, int]):</strong>  The changed code</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The modified quality code</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">changed</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.set_protection_code", "modulename": "hec.quality", "qualname": "set_protection_code", "kind": "function", "doc": "<p>Encodes a protection code into a quality code</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>code (int):</strong>  The quality code to encode the protection code into</li>\n<li><strong>protection (Union[bool, int]):</strong>  The protection code</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The modified quality code</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">protection</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.set_range_code", "modulename": "hec.quality", "qualname": "set_range_code", "kind": "function", "doc": "<p>Encodes a range code into a quality code</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>code (int):</strong>  The quality code to encode the range code into</li>\n<li><strong>range (Union[bool, int]):</strong>  The range code</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The modified quality code</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">value_range</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.set_repl_cause_code", "modulename": "hec.quality", "qualname": "set_repl_cause_code", "kind": "function", "doc": "<p>Encodes a replacement cause code into a quality code</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>code (int):</strong>  The quality code to encode the replacement cause code into</li>\n<li><strong>replacement cause (Union[bool, int]):</strong>  The replacement cause code</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The modified quality code</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">repl_cause</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.set_repl_method_code", "modulename": "hec.quality", "qualname": "set_repl_method_code", "kind": "function", "doc": "<p>Encodes a replacement method code into a quality code</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>code (int):</strong>  The quality code to encode the replacement method code into</li>\n<li><strong>replacement method (Union[bool, int]):</strong>  The replacement method code</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The modified quality code</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">repl_method</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.set_screened_code", "modulename": "hec.quality", "qualname": "set_screened_code", "kind": "function", "doc": "<p>Encodes a screened code into a quality code</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>code (int):</strong>  The quality code to encode the screened code into</li>\n<li><strong>screened (Union[bool, int]):</strong>  The screened code</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The modified quality code</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">screened</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.set_test_failed_code", "modulename": "hec.quality", "qualname": "set_test_failed_code", "kind": "function", "doc": "<p>Encodes a test failed code into a quality code</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>code (int):</strong>  The quality code to encode the test failed code into</li>\n<li><strong>test failed (Union[bool, int]):</strong>  The test failed code</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The modified quality code</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">test_failed</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.set_validity_code", "modulename": "hec.quality", "qualname": "set_validity_code", "kind": "function", "doc": "<p>Encodes a validity code into a quality code</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>code (int):</strong>  The quality code to encode the validity code into</li>\n<li><strong>validity (Union[bool, int]):</strong>  The validity code</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The modified quality code</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">validity</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.test_failed_id", "modulename": "hec.quality", "qualname": "test_failed_id", "kind": "function", "doc": "<p>Returns the text identifier for a valid failed test code.</p>\n\n<p>This code is encoded in the quality code in bits 15-25 of 32 as diagrammed in the <a href=\"#bit-mapping\">bit-mapping</a>, but bits 21 and 23 are not used</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>code (int):</strong>  Must be 0 or sum of 1 or more of: 1, 2, 4, 8, 16, 32, 128, 512, and 1024</li>\n<li>(maximum of one ocrrence per number). Note that values 64 and 256 are not used.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: One or more of the following identifiers. <code>None</code> is always returned alone; if more that one\n      identifier is returned, they will be concatenated with the <code>+</code> character into a single string.</p>\n  \n  <p><table>\n<tr><th>code</th><th>returns</th></tr>\n<tr><td>0</td><td>NONE</td></tr>\n<tr><td>1</td><td>ABSOLUTE_VALUE</td></tr>\n<tr><td>2</td><td>CONSTANT_VALUE</td></tr>\n<tr><td>4</td><td>RATE_OF_CHANGE</td></tr>\n<tr><td>8</td><td>RELATIVE_VALUE</td></tr>\n<tr><td>16</td><td>DURATION_VALUE</td></tr>\n<tr><td>32</td><td>NEG_INCREMENT</td></tr>\n<tr><td>128</td><td>SKIP_LIST</td></tr>\n<tr><td>512</td><td>USER_DEFINED</td></tr>\n<tr><td>1024</td><td>DISTRIBUTION</td></tr>\n</table></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.validity_id", "modulename": "hec.quality", "qualname": "validity_id", "kind": "function", "doc": "<p>Returns the text identifier for a valid validity code.</p>\n\n<p>This code is encoded in the quality code in bits 1-4 of 32 as diagrammed in the <a href=\"#bit-mapping\">bit-mapping</a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>code (int):</strong>  Must be 0, 1, 2, 4, or 8</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: One of the following identifiers:</p>\n  \n  <p><table>\n<tr><th>code</th><th>returns</th></tr>\n<tr><td>0</td><td>UNKNOWN</td></tr>\n<tr><td>1</td><td>OKAY</td></tr>\n<tr><td>2</td><td>MISSING</td></tr>\n<tr><td>4</td><td>QUESTIONABLE</td></tr>\n<tr><td>8</td><td>REJECTED</td></tr>\n</table></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.Quality", "modulename": "hec.quality", "qualname": "Quality", "kind": "class", "doc": "<p>Holds a quality code and provides quality tests and operations</p>\n"}, {"fullname": "hec.quality.Quality.__init__", "modulename": "hec.quality", "qualname": "Quality.__init__", "kind": "function", "doc": "<p>Initializes a Quality object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>init_from (Any, optional):</strong>  The object to initialize from. Defaults to 0.\n<ul>\n<li><strong>Not specified</strong>: the quality code is set to 0</li>\n<li><strong>Integer</strong>: the quality code is set to the integer</li>\n<li><strong>String</strong>: the quality code is set from the unique beginning of one of the following (case insensitive):\n<ul>\n<li>\"Unscreened\": the quality code is 0 (Unscreened)</li>\n<li>\"Unknown\" or \"Indeterminate\": the quality code is 1 (Screened Indeterminate)</li>\n<li>\"Okay\": the quality code is 3 (Screened Okay)</li>\n<li>\"Missing\": the quality code is 5 (Screened Missing)</li>\n<li>\"Questionable\": the quality code is 9 (Screened Questionable)</li>\n<li>\"Rejected\": the quality code is 17 (Screened Rejected)</li>\n</ul></li>\n<li><strong>Quality</strong>: the quality code is set to the other object's quality code</li>\n<li><strong>List or tuple</strong>: the quality code is set from the list of component identifiers.<br>\nThe zero value can be set for any of the component by setting its identifier to <code>None</code>.<br>\nThe sequence must have a mininum length of 8, in this order:\n<ul>\n<li>screened identifier</li>\n<li>validity identifier</li>\n<li>range identifier</li>\n<li>changed identifier</li>\n<li>replacement cause identifier</li>\n<li>replacement method identifier</li>\n<li>test failed identifier (may be multiple identifiers concatenated with <code>+</code> character)</li>\n<li>protected identifier</li>\n</ul></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">init_from</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span>)</span>"}, {"fullname": "hec.quality.Quality.add_test_failed", "modulename": "hec.quality", "qualname": "Quality.add_test_failed", "kind": "function", "doc": "<p>Adds a failed test to the test failed component of this object from a code or identifier and returns the modified object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[int, str]):</strong>  The test failed component code or identifier of the failed test to be added</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Quality: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.Quality.changed", "modulename": "hec.quality", "qualname": "Quality.changed", "kind": "variable", "doc": "<p>The changed component code of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.quality.Quality.changed_id", "modulename": "hec.quality", "qualname": "Quality.changed_id", "kind": "variable", "doc": "<p>The changed component identifier of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.quality.Quality.code", "modulename": "hec.quality", "qualname": "Quality.code", "kind": "variable", "doc": "<p>The internal quality code as a signed or unsigned integer depending on the default setting.<br></p>\n\n<p>See</p>\n\n<ul>\n<li><a href=\"#Quality.set_return_signed_codes\">set_return_signed_codes</a></li>\n<li><a href=\"#Quality.set_return_unsigned_codes\">set_return_unsigned_codes</a></li>\n</ul>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.quality.Quality.protection", "modulename": "hec.quality", "qualname": "Quality.protection", "kind": "variable", "doc": "<p>The protection component code of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.quality.Quality.protection_id", "modulename": "hec.quality", "qualname": "Quality.protection_id", "kind": "variable", "doc": "<p>The protection component identifier of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.quality.Quality.range", "modulename": "hec.quality", "qualname": "Quality.range", "kind": "variable", "doc": "<p>The range component code of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.quality.Quality.range_id", "modulename": "hec.quality", "qualname": "Quality.range_id", "kind": "variable", "doc": "<p>The range component identifier of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.quality.Quality.remove_test_failed", "modulename": "hec.quality", "qualname": "Quality.remove_test_failed", "kind": "function", "doc": "<p>Removes a failed test from the test failed component of this object from a code or identifier and returns the modified object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[int, str]):</strong>  The test failed component code or identifier of the failed test to be removed</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Quality: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.Quality.repl_cause", "modulename": "hec.quality", "qualname": "Quality.repl_cause", "kind": "variable", "doc": "<p>The replacement cause component code of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.quality.Quality.repl_cause_id", "modulename": "hec.quality", "qualname": "Quality.repl_cause_id", "kind": "variable", "doc": "<p>The replacement cause component identifier of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.quality.Quality.repl_method", "modulename": "hec.quality", "qualname": "Quality.repl_method", "kind": "variable", "doc": "<p>The replacement method component code of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.quality.Quality.repl_method_id", "modulename": "hec.quality", "qualname": "Quality.repl_method_id", "kind": "variable", "doc": "<p>The replacement method component identifier of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.quality.Quality.score", "modulename": "hec.quality", "qualname": "Quality.score", "kind": "variable", "doc": "<p>A score to compare qualities by:</p>\n\n<table>\n<tr><th>Screened</th><th>Validity Code</th><th>Score</th></tr>\n<tr><td>UNSCREENED</td><td>UNKNOWN</td><td>1</td></tr>\n<tr><td>SCREENED</td><td>MISSING</td><td>0</td></tr>\n<tr><td>SCREENED</td><td>REJECTED</td><td>0</td></tr>\n<tr><td>SCREENED</td><td>UNKNOWN</td><td>2</td></tr>\n<tr><td>SCREENED</td><td>QUESTIONABLE</td><td>3</td></tr>\n<tr><td>SCREENED</td><td>OKAY</td><td>4</td></tr>\n</table>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.quality.Quality.screened", "modulename": "hec.quality", "qualname": "Quality.screened", "kind": "variable", "doc": "<p>The screened component code of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.quality.Quality.screened_id", "modulename": "hec.quality", "qualname": "Quality.screened_id", "kind": "variable", "doc": "<p>The screened component identifier of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.quality.Quality.set_changed", "modulename": "hec.quality", "qualname": "Quality.set_changed", "kind": "function", "doc": "<p>Sets the changed component of this object from a code or identifier and returns the modified object.</p>\n\n<p>Using this method instead of setting the <code>changed</code> or <code>changed_id</code> properties allows chained operations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[int, str]):</strong>  The changed component code or identifier</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Quality: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.Quality.set_protection", "modulename": "hec.quality", "qualname": "Quality.set_protection", "kind": "function", "doc": "<p>Sets the protection component of this object from a code or identifier and returns the modified object.</p>\n\n<p>Using this method instead of setting the <code>protection</code> or <code>protection_id</code> properties allows chained operations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[int, str]):</strong>  The protection component code or identifier</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Quality: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.Quality.set_range", "modulename": "hec.quality", "qualname": "Quality.set_range", "kind": "function", "doc": "<p>Sets the range component of this object from a code or identifier and returns the modified object.</p>\n\n<p>Using this method instead of setting the <code>range</code> or <code>range_id</code> properties allows chained operations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[int, str]):</strong>  The range component code or identifier</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Quality: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.Quality.set_repl_cause", "modulename": "hec.quality", "qualname": "Quality.set_repl_cause", "kind": "function", "doc": "<p>Sets the replacement cause component of this object from a code or identifier and returns the modified object.</p>\n\n<p>Using this method instead of setting the <code>repl_cause</code> or <code>repl_cause_id</code> properties allows chained operations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[int, str]):</strong>  The replacement cause component code or identifier</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Quality: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.Quality.set_repl_method", "modulename": "hec.quality", "qualname": "Quality.set_repl_method", "kind": "function", "doc": "<p>Sets the replacement method component of this object from a code or identifier and returns the modified object.</p>\n\n<p>Using this method instead of setting the <code>repl_method</code> or <code>repl_method_id</code> properties allows chained operations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[int, str]):</strong>  The replacement method component code or identifier</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Quality: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.Quality.set_screened", "modulename": "hec.quality", "qualname": "Quality.set_screened", "kind": "function", "doc": "<p>Sets the screened component of this object from a code or identifier and returns the modified object.</p>\n\n<p>Using this method instead of setting the <code>screened</code> or <code>screened_id</code> properties allows chained operations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[int, str]):</strong>  The screened component code or identifier</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Quality: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.Quality.set_test_failed", "modulename": "hec.quality", "qualname": "Quality.set_test_failed", "kind": "function", "doc": "<p>Sets the test failed component of this object from a code or identifier and returns the modified object.</p>\n\n<p>Using this method instead of setting the <code>test_failed</code> or <code>test_failed_id</code> properties allows chained operations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[int, str]):</strong>  The test failed component code or identifier</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Quality: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.Quality.set_validity", "modulename": "hec.quality", "qualname": "Quality.set_validity", "kind": "function", "doc": "<p>Sets the validity component of this object from a code or identifier and returns the modified object.</p>\n\n<p>Using this method instead of setting the <code>validity</code> or <code>validity_id</code> properties allows chained operations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[int, str]):</strong>  The validity component code or identifier</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Quality: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.Quality.set_return_signed_codes", "modulename": "hec.quality", "qualname": "Quality.set_return_signed_codes", "kind": "function", "doc": "<p>Sets the type (signed or unsigned of the <code>code</code> property)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (bool, optional):</strong>  Sets default type to signed if true, otherwise unsigned. Defaults to True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.Quality.set_return_unsigned_codes", "modulename": "hec.quality", "qualname": "Quality.set_return_unsigned_codes", "kind": "function", "doc": "<p>Sets the type (signed or unsigned of the <code>code</code> property)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (bool, optional):</strong>  Sets default type to unsigned if true, otherwise signed. Defaults to True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.quality.Quality.signed", "modulename": "hec.quality", "qualname": "Quality.signed", "kind": "variable", "doc": "<p>The internal quality code as a signed integer.</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.quality.Quality.symbol", "modulename": "hec.quality", "qualname": "Quality.symbol", "kind": "variable", "doc": "<p>The text symbol of the quality.</p>\n\n<p>The symbol will be one or two characters, with the first character being:</p>\n\n<ul>\n<li><code>~</code>: Not screened</li>\n<li><code>u</code> or 'U': Screened, validity is unknown</li>\n<li><code>o</code> or <code>O</code>: Screened, validity is okay</li>\n<li><code>m</code> or <code>M</code>: Screened, validity is missing</li>\n<li><code>q</code> or <code>Q</code>: Screened, validity is questioned</li>\n<li><code>r</code> or <code>R</code>: Screened, validity is rejected</li>\n</ul>\n\n<p>If a screened quality has the protection bit set, the first chanacter will be uppercase; if not, it will be lowercase.</p>\n\n<p>A second character of <code>+</code> signifies that the quality has additional information about one or more of the following:</p>\n\n<ul>\n<li>value range</li>\n<li>value replacement cause and method</li>\n<li>test(s) failed</li>\n</ul>\n\n<p>This property is used when the quality is used in a string context (e.g., <code>print(q)</code>)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.quality.Quality.test_failed", "modulename": "hec.quality", "qualname": "Quality.test_failed", "kind": "variable", "doc": "<p>The test failed component code of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.quality.Quality.test_failed_id", "modulename": "hec.quality", "qualname": "Quality.test_failed_id", "kind": "variable", "doc": "<p>The test failed component identifier of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.quality.Quality.text", "modulename": "hec.quality", "qualname": "Quality.text", "kind": "variable", "doc": "<p>The text description of the quality.</p>\n\n<p>A space separated list of words specifying the state of the following, in order:</p>\n\n<ul>\n<li>Screened: (\"Unscreened\" or \"Screened\")</li>\n<li>Validity: (\"Unknown\", \"Okay\", \"Missing\", \"Questionable\", or \"Rejected\")</li>\n<li>Range: (\"No_range\", \"Range_1\", \"Range_2\", or \"Range_3\")</li>\n<li>Changed: (\"Original\" or \"Modified\")</li>\n<li>Replacement Cause: (\"None\", \"Automatic\", \"Interactive\", \"Manual\", \"Restored\")</li>\n<li>Replacement Method: (\"None\", \"Lin_Interp\", \"Explicit\", \"Missing\", \"Graphical\")</li>\n<li>Test Failed: (\"None\" or one or more of the following concatenated with \"+\"):\n<ul>\n<li>\"Absolute_Value\"</li>\n<li>\"Constant_Value\"</li>\n<li>\"Rate_Of_Change\"</li>\n<li>\"Relative_Value\"</li>\n<li>\"Duration_Value\"</li>\n<li>\"Neg_Increment\"</li>\n<li>\"Skip_List\"</li>\n<li>\"User_Defined\"</li>\n<li>\"Distribution\"</li>\n</ul></li>\n<li>Protection: (\"Unprotected\" or \"Protected\")</li>\n</ul>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.quality.Quality.unsigned", "modulename": "hec.quality", "qualname": "Quality.unsigned", "kind": "variable", "doc": "<p>The internal quality code as an unsigned integer.</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.quality.Quality.validity", "modulename": "hec.quality", "qualname": "Quality.validity", "kind": "variable", "doc": "<p>The validity component code of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.quality.Quality.validity_id", "modulename": "hec.quality", "qualname": "Quality.validity_id", "kind": "variable", "doc": "<p>The validity component identifier of the quality code</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.quality.QualityException", "modulename": "hec.quality", "qualname": "QualityException", "kind": "class", "doc": "<p>Common base class for all non-exit exceptions.</p>\n", "bases": "builtins.Exception"}, {"fullname": "hec.shared", "modulename": "hec.shared", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "hec.shared.is_leap", "modulename": "hec.shared", "qualname": "is_leap", "kind": "function", "doc": "<p>Return whether the specified year is a leap year</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>y (int):</strong>  The year</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether the year is a leap year</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.shared.max_day", "modulename": "hec.shared", "qualname": "max_day", "kind": "function", "doc": "<p>Return the last month day for a specified year and month</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>y (int):</strong>  The year</li>\n<li><strong>m (int):</strong>  The month</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The last calendar day of the specified month</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.shared.previous_month", "modulename": "hec.shared", "qualname": "previous_month", "kind": "function", "doc": "<p>Returns the previous year and for a specified year and month.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>y (int):</strong>  The specified year</li>\n<li><strong>m (int):</strong>  The specified month</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[int, int]: The previous year and month</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries", "modulename": "hec.timeseries", "kind": "module", "doc": "<p>Provides time series types and operations</p>\n"}, {"fullname": "hec.timeseries.TimeSeriesException", "modulename": "hec.timeseries", "qualname": "TimeSeriesException", "kind": "class", "doc": "<p>Exception specific to time series operations</p>\n", "bases": "builtins.Exception"}, {"fullname": "hec.timeseries.TimeSeriesValue", "modulename": "hec.timeseries", "qualname": "TimeSeriesValue", "kind": "class", "doc": "<p>Holds a single time series value</p>\n"}, {"fullname": "hec.timeseries.TimeSeriesValue.__init__", "modulename": "hec.timeseries", "qualname": "TimeSeriesValue.__init__", "kind": "function", "doc": "<p>Initializes a TimeSeriesValue object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>time (Any):</strong>  The time. Must be an HecTime object or <a href=\"./hectime.html#HecTime.__init__\">convertible to an HecTime object</a></li>\n<li><strong>value (Any):</strong>  The value. Must be a UnitQuantity object or <a href=\"./unit.html#UnitQuantity.__init__\">convertible to a UnitQuantity</a> object</li>\n<li><strong>quality (Union[Quality, int], optional):</strong>  The quality code. Must be a Quality object or a valid quality integer. Defaults to 0.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"n\">quality</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span>)</span>"}, {"fullname": "hec.timeseries.TimeSeriesValue.equals", "modulename": "hec.timeseries", "qualname": "TimeSeriesValue.equals", "kind": "function", "doc": "<p>Returns whether two TimeSeriesValue objects are equal to the specified strictness.\nIf the strictness indicates comparing the value fields, the comparison can use either of the following for value equality:</p>\n\n<ul>\n<li>normal: equivalent values are considered equal even if they have different units. (e.g., 12 in == 1 ft)</li>\n<li>strict: values must have same magnitude and units to be considered equal</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (object):</strong>  The other TimeSeriesValue object to compare to</li>\n<li><strong>degree (int):</strong>  Specifies how strict to make the comparison. Valid values are:\n<ul>\n<li><code>1</code>: Compares only time fields (same as == operator).</li>\n<li><code>2</code>: Compares only time and value fields with normal value equality.</li>\n<li><code>3</code>: Compares only time and value fields with strict value equality.</li>\n<li><code>4</code>: Compares time, value, and quality fields with normal value equality.</li>\n<li><code>5</code>: Compares time, value, and quality fields with stict value equality.\n<br>Defaults to <code>4</code></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether the time, value, and quality of two TimeSeriesValue objects are equal to the specified strictness.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"nb\">object</span>, </span><span class=\"param\"><span class=\"n\">degree</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeriesValue.is_valid", "modulename": "hec.timeseries", "qualname": "TimeSeriesValue.is_valid", "kind": "variable", "doc": "<p>Whether this object is valid. TimeSeriesValues are valid unless any of the following are True:</p>\n\n<ul>\n<li>The quality is MISSING</li>\n<li>The quality is REJECTED</li>\n<li>The value is NaN</li>\n<li>The value is Infinite</li>\n</ul>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.timeseries.TimeSeriesValue.quality", "modulename": "hec.timeseries", "qualname": "TimeSeriesValue.quality", "kind": "variable", "doc": "<p>The Quality</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": hec.quality.Quality"}, {"fullname": "hec.timeseries.TimeSeriesValue.time", "modulename": "hec.timeseries", "qualname": "TimeSeriesValue.time", "kind": "variable", "doc": "<p>The time</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": hec.hectime.HecTime"}, {"fullname": "hec.timeseries.TimeSeriesValue.value", "modulename": "hec.timeseries", "qualname": "TimeSeriesValue.value", "kind": "variable", "doc": "<p>The value</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-Write</p>\n</blockquote>\n", "annotation": ": hec.unit.UnitQuantity"}, {"fullname": "hec.timeseries.TimeSeries", "modulename": "hec.timeseries", "qualname": "TimeSeries", "kind": "class", "doc": "<p>Holds time series and provides time series operations.</p>\n\n<h3 id=\"structure\">Structure</h3>\n\n<p>TimeSeries objects contain the following properties</p>\n\n<ul>\n<li><code>watershed</code> (Optional): A string that holds the the DSS A pathname part. Unused in CWMS contexts.</li>\n<li><code>location</code> (Required): A <a href=\"./location.html#Location\">Location</a> object. Its <code>name</code> property is used\nfor the CWMS location identifier or DSS B pathname part.</li>\n<li><code>parameter</code> (Required): A <a href=\"./parameter.html#Parameter\">Parameter</a> object. May be an <a href=\"./parameter.html#ElevParameter\">ElevParameter</a>\nif the base parameter is \"Elev\", but only if there is vertical datum info. Its <code>name</code> property is\nused for the CWMS parameter identifier or DSS C pathname part.</li>\n<li><code>parameter_type</code> (Optional): A <a href=\"./parameter.html#ParameterType\">ParameterType</a> object. Its <code>name</code>\nproperty is used for the CWMS parameter type identifier or DSS data type</li>\n<li><code>interval</code> (Required): An <a href=\"./interval.html#Interval\">Interval</a> object. Its <code>name</code> property is used\nfor the CWMS interval identier or DSS E pathname poart</li>\n<li><code>duration</code> (Optional): A <a href=\"./duration.html#Durationg\">Duration</a> object. Its <code>name</code> property is used\nfor the CWMS duration identifier. Unused in DSS contexts.</li>\n<li><code>version</code> (Optional): A string that holds the CWMS version identifier or DSS F pathname part.</li>\n<li><code>data</code> (Optiona): A pandas.DataFrame object containing the time series data. The DataFrame has a DateTime index,\na float column named \"value\" and a integer column named \"quality\"</li>\n</ul>\n\n<h3 id=\"other-properties\">Other properties</h3>\n\n<ul>\n<li><code>name</code>: The name used to initalize the object. Will be a valid CWMS time series identifier or DSS time series pathname.</li>\n<li><code>unit</code>: The unit of the parameter. Also available as the <code>unit_name</code> property of the <code>parameter</code> proerty.</li>\n<li><code>time_zone</code>: The time zone of the data or None if not set</li>\n<li><code>vertical_datum_info_xml</code>: The vertical datum info as an XML string</li>\n<li><code>vertical_datum_info_dict</code>: The vertical datum info as a dictionary</li>\n<li><code>times</code>: The times of the data values as a list of strings</li>\n<li><code>values</code>: The data values as a list of floats</li>\n<li><code>qualities</code>: The quality codes of the data values as a list of integers</li>\n<li><code>slice_stop_exclusive</code>: Controls slicing behavior</li>\n</ul>\n\n<h3 id=\"indexing-and-slicing\">Indexing and slicing</h3>\n\n<p>In addition to operations available on the <code>data</code> DataFrame, TimeSeries objects may also be indexed by\nindividual indexes or slices.</p>\n\n<p>The result of an index or slice operation is a copy TimeSeries object with the data as indicated in\nthe index or slice.</p>\n\n<p>Indexes (single, as well as start and stop values for slices) may be one of:</p>\n\n<ul>\n<li>HecTime object</li>\n<li>datetime object</li>\n<li>String - must be in the format yyyy&#8209;mm&#8209;dd&nbsp;hh:mm:ss([+|&#8209;]hh:mm). The time zone portion is required\nif the data times have the time zone specified</li>\n<li>Integer (index into the list of data times using normal python indexing)</li>\n</ul>\n\n<p>Slice steps are supported and must be a positive integer value (times must always increase)</p>\n\n<p>By default, slicing follows python behavior where the stop value is exclusive (not included in the returned data).\nTo use DataFrame behavior where the stop value is inclusive (returned in the data):</p>\n\n<ul>\n<li>call <code>TimeSeries.set_slice_stop_inclusive()</code> before creating any TimeSeries objects</li>\n<li>set the <code>slice_stop_exclusive</code> property to False on existing TimeSeries objects.</li>\n</ul>\n\n<p>Note that slicing of the <code>data</code> object will always use DataFrame behavior.</p>\n\n<h3 id=\"in-place-methods\">In-Place Methods</h3>\n\n<p>All methods that return a time series have an optional parameter named <code>in_place</code> that defaults to <code>False</code>:</p>\n\n<ul>\n<li>Leaving unspecified or specifying <code>False</code> will cause the method to return a new time series, leaving the time series\non which the method is called unchanged and available for future use.</li>\n<li>Specifying <code>True</code> will modify the time series on which the method is called and return the modified time series. The\nreturn value may of course be ignored if desired.</li>\n</ul>\n\n<p>Each of these method also has a \"in-place\" method without the <code>in_place</code> parameter and which simply calls the original\nmethod with <code>in_place=True</code>. The methods are named the same as the original methods prepended with the letter 'i' (e.g.,\n<code>select()</code> --> <code>iselect()</code>, <code>set_parameter()</code> --> <code>iset_parameter()</code>)</p>\n"}, {"fullname": "hec.timeseries.TimeSeries.__init__", "modulename": "hec.timeseries", "qualname": "TimeSeries.__init__", "kind": "function", "doc": "<p>Initializes a new TimeSeries object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>init_from (Any):</strong>  The object to initialize from.\n<ul>\n<li><strong>str</strong>: A CWMS time series identifier or HEC-DSS time series pathname.\n<ul>\n<li>If CWMS\n<ul>\n<li>The following components are set from the identifier:\n<ul>\n<li>location (may be in the format &lt;<em>office</em>&gt;/&lt;<em>location</em>&gt; to set office)</li>\n<li>parameter</li>\n<li>parameter type</li>\n<li>interval</li>\n<li>duration</li>\n<li>version</li>\n</ul></li>\n<li>The following components are not set:\n<ul>\n<li>watershed</li>\n</ul></li>\n</ul></li>\n<li>If HEC-DSS\n<ul>\n<li>The following components are set from the pathname:\n<ul>\n<li>A =&gt; watershed</li>\n<li>B =&gt; location</li>\n<li>C =&gt; parameter</li>\n<li>E =&gt; interval</li>\n<li>F =&gt; version</li>\n</ul></li>\n<li>The following components are set by default:\n<ul>\n<li>parameter type:\n<ul>\n<li>INST_CUM if C includes \"Precip\" (case insensitive)</li>\n<li>INST_VAL otherwise</li>\n</ul></li>\n</ul></li>\n<li>The following compents are not set:\n<ul>\n<li>duration</li>\n</ul></li>\n</ul></li>\n<li>The parameter unit is set to the default English unit</li>\n<li>No vertical datum information is set for elevation parameter</li>\n</ul></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">init_from</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "hec.timeseries.TimeSeries.accum", "modulename": "hec.timeseries", "qualname": "TimeSeries.accum", "kind": "function", "doc": "<p>Returns a time series whose values are the accumulation of values in this time series.</p>\n\n<p>Missing values are ignored; the accumulation at those times is the same as for the\nprevious time.</p>\n\n<p>If a selection is present, all non-selected items are set to missing before the\naccumulation is computed. They remain missing in the retuned time series.</p>\n\n<p><strong>Restrictions</strong></p>\n\n<ul>\n<li>May be performed only on time series with accumulatable base parameters. Use <a href=\"parameter.html#Parameter.accumulatable_base_parameters\">Parameter.accumulatable_base_parameters()</a> to\nlist the accumulatable base parameters.</li>\n<li>May be performed only on Instantaneous, Average, or Total time series (CWMS: Inst, Ave, Total, DSS: INST-VAL, INST-CUM, PER-CUM)</li>\n</ul>\n\n<p>See <a href=\"parameter.html#base_parameter_definitions\">base_parameter_definitions</a> for information on base parameters and their conversions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>in_place (bool, optional):</strong>  If True, this object is modified and retured, otherwise\na copy of this object is modified and returned.. Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data or one of the restrictions listed above is violated.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The accumulation time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.aggregate", "modulename": "hec.timeseries", "qualname": "TimeSeries.aggregate", "kind": "function", "doc": "<p>Perform an aggregation of the values in a time series time series.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func (Union[list[Union[Callable[[Any], Any], str]],Callable[[Any], Any], str]):</strong>  The aggregation function(s).</li>\n<li><p><strong>May be one of:</strong>  <ul>\n<li><b>list[Union[Callable[[Any], Any], str]]</b>: A list comprised of items from the following two options\n(note that there is overlap between the python builtin functions and the pandas functions)\n<li><b>Callable[[Any], Any]</b>: Must take an iterable of floats and return a float timeseries<br>\n    May be a function defined in the code (including lambda funtions) or a standard python aggregation function:</p>\n\n<pre><code><ul>\n<li><code>all</code></li>\n<li><code>any</code></li>\n<li><code>len</code></li>\n<li><code>max</code></li>\n<li><code>min</code></li>\n<li><code>sum</code></li>\n<li><code>math.prod</code></li>\n<li><code>statistics.fmean</code></li>\n<li><code>statistics.geometric_mean</code></li>\n<li><code>statistics.harmonic_mean</code></li>\n<li><code>statistics.mean</code></li>\n<li><code>statistics.median</code></li>\n<li><code>statistics.median_grouped</code></li>\n<li><code>statistics.median_high</code></li>\n<li><code>statistics.median_low</code></li>\n<li><code>statistics.mode</code></li>\n<li><code>statistics.multimode</code></li>\n<li><code>statistics.pstdev</code></li>\n<li><code>statistics.pvariance</code></li>\n<li><code>statistics.quantiles</code></li>\n<li><code>statistics.stdev</code></li>\n<li><code>statistics.variance</code></li>\n</ul>\n</code></pre>\n\n<p></li>\n<li><b>str</b>: Must be the name of a pandas aggregation function:</p>\n\n<pre><code><ul>\n<li><code>\"all\"</code></li>\n<li><code>\"any\"</code></li>\n<li><code>\"count\"</code></li>\n<li><code>\"describe\"</code></li>\n<li><code>\"first\"</code></li>\n<li><code>\"last\"</code></li>\n<li><code>\"max\"</code></li>\n<li><code>\"mean\"</code></li>\n<li><code>\"median\"</code></li>\n<li><code>\"min\"</code></li>\n<li><code>\"nunique\"</code></li>\n<li><code>\"prod\"</code></li>\n<li><code>\"sem\"</code></li>\n<li><code>\"size\"</code></li>\n<li><code>\"skew\"</code></li>\n<li><code>\"std\"</code></li>\n<li><code>\"sum\"</code></li>\n<li><code>\"var\"</code></li>\n</ul>\n</code></pre>\n\n<p></li>\n</ul></p></li>\n\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n\n<p><li><strong>TimeSeriesException:</strong>  If the time series has no data, or if there are less than two items</li>\n<li>to aggregate over.</li></p>\n\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n\n<p><p>The result of the aggregation function(s)</p>\n</blockquote></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"nb\">str</span><span class=\"p\">]],</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.aggregate_ts", "modulename": "hec.timeseries", "qualname": "TimeSeries.aggregate_ts", "kind": "function", "doc": "<p>Generate a time series that is an aggregation of multiple time series.</p>\n\n<p>Note that some usages (marked with <sup>1</sup>, <sup>2</sup>, <sup>3</sup>, or <sup>4</sup>) generate non-standard TimeSeries results.\nIn these cases the <code>.data</code> property of the TimeSeries should be used directly instead of using the <code>.values</code> property or using the\nTimeSeries in further operations.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func (Union[list[Union[Callable[[Any], Any], str]], Callable[[Any], Any], str]):</strong>  The aggregation function(s).</li>\n<li><p><strong>May be one of:</strong>  <ul>\n<li><b>list[Union[Callable[[Any], Any], str]]</b><sup>1</sup>: A list comprised of items from the following two options\n(note that there is overlap between the python builtin functions and the pandas functions)\n<li><b>Callable[[Any], Any]</b>: Must take an iterable of floats and return a single value<br>\n    May be a function defined in the code (including lambda funtions) or a standard python aggregation function:</p>\n\n<pre><code><ul>\n<li><code>all</code><sup>2</sup></li>\n<li><code>any</code><sup>2</sup></li>\n<li><code>len</code></li>\n<li><code>max</code></li>\n<li><code>min</code></li>\n<li><code>sum</code></li>\n<li><code>math.prod</code></li>\n<li><code>statistics.fmean</code></li>\n<li><code>statistics.geometric_mean</code></li>\n<li><code>statistics.harmonic_mean</code></li>\n<li><code>statistics.mean</code></li>\n<li><code>statistics.median</code></li>\n<li><code>statistics.median_grouped</code></li>\n<li><code>statistics.median_high</code></li>\n<li><code>statistics.median_low</code></li>\n<li><code>statistics.mode</code></li>\n<li><code>statistics.multimode</code><sup>3</sup></li>\n<li><code>statistics.pstdev</code></li>\n<li><code>statistics.pvariance</code></li>\n<li><code>statistics.quantiles</code><sup>3</sup></li>\n<li><code>statistics.stdev</code></li>\n<li><code>statistics.variance</code></li>\n</ul>\n</code></pre>\n\n<p></li>\n<li><b>str</b>: Must be the name of a pandas aggregation function:</p>\n\n<pre><code><ul>\n<li><code>\"all\"</code><sup>2</sup></li>\n<li><code>\"any\"</code><sup>2</sup></li>\n<li><code>\"count\"</code></li>\n<li><code>\"describe\"</code><sup>1</sup></li>\n<li><code>\"first\"</code></li>\n<li><code>\"last\"</code></li>\n<li><code>\"max\"</code></li>\n<li><code>\"mean\"</code></li>\n<li><code>\"median\"</code></li>\n<li><code>\"min\"</code></li>\n<li><code>\"nunique\"</code></li>\n<li><code>\"prod\"</code></li>\n<li><code>\"sem\"</code></li>\n<li><code>\"size\"</code><sup>4</sup></li>\n<li><code>\"skew\"</code></li>\n<li><code>\"std\"</code></li>\n<li><code>\"sum\"</code></li>\n<li><code>\"var\"</code></li>\n</ul>\n</code></pre>\n\n<p></li>\n</ul></p></li>\n\n<p><li><strong>timeseries (list[TimeSeries]):</strong>  The time series for the function to aggregate over</li></p>\n\n</ul>\n\n<sup>1</sup>The `.data` property is a DataFrame with named columns.<br>\n<sup>2</sup>The \"Values\" column of the `.data` property contains bool values float values<br>\n<sup>3</sup>The \"Values\" column of the `.data` property contains lists of values instead of float values.<br>\n<sup>4</sup>The `.data` property is a DataFrame with one unnamed column.<br>\n\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n\n<p><li><strong>TimeSeriesException:</strong>  If less than two of the time series have data, or if the time series have\nno common times.</li></p>\n\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n\n<p><p>TimeSeries: The time series that is the result of the aggregation function. The times series name will be\n  modified from the first time series specified in the following way:</p>\n<br />\n  <ul>\n  <li>The parameter will be \"Code\"</li>\n  <li>the version will be \"Aggregate\"</li>\n  </ul>\n</blockquote></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"nb\">str</span><span class=\"p\">]],</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">timeseries</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.can_determine_unit_system", "modulename": "hec.timeseries", "qualname": "TimeSeries.can_determine_unit_system", "kind": "variable", "doc": "<p>Returns whether the unit of this time series is recognized as an English unit, or a Metric unit, but not both</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.timeseries.TimeSeries.centered_moving_average", "modulename": "hec.timeseries", "qualname": "TimeSeries.centered_moving_average", "kind": "function", "doc": "<p>Computes and returns a time series that is the centered moving average of this time series.</p>\n\n<p>A centered moving average sets the value at each time to be the average of the values at that\ntime and a number of previous and following consecutive times.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>window (int):</strong>  The number of values to average over. The result at each time will be\nthe average of the values at ((window-1)/2) previous times, the value at the current\ntime, and the values at ((window-1)/2) following times. The span between times is not\naccounted for so discretion should be used if the time series is irregular. Must be an odd number.</li>\n<li><strong>only_valid (bool):</strong>  Specifies whether to only average over windows where every value is\nvalid. If False, the average at any given time may be computed using fewer values\nthat specified in the window parameter.</li>\n<li><strong>use_reduced (bool):</strong>  Specifies whether to allow averages using less than window number\nof values will be computed at the beginning and end of the times series. If False, the\nvalues at the first and last ((window-1)/2) times will be set to missing.</li>\n<li><strong>in_place (bool, optional):</strong>  If True, this time series is modified and returned.\nOtherwise this time series is not modified. Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data or if the window is invalid.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The averaged time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">window</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">only_valid</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">use_reduced</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.clone", "modulename": "hec.timeseries", "qualname": "TimeSeries.clone", "kind": "function", "doc": "<p>Creates a copy of this object, with or without data</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>include_data (bool, optional):</strong>  Specifies whether to include the data in the copy. Defaults to True.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The copy of this object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">include_data</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.collapse", "modulename": "hec.timeseries", "qualname": "TimeSeries.collapse", "kind": "function", "doc": "<p>Collapses a regular time series (either this one or a copy of this one), removing all missing values unless they are\neither protected or marked as part of the current selection.</p>\n\n<p>Irregular time series (including pseudo-regular time series) are not affected.</p>\n\n<p>Does not alter any selection, even if selection state is <code>SelectionState.TRANSIENT</code>. Selected items remain\nselected after collapse even though their location in the data may change.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to collapse this time series (True) or a copy of this time series (False).</li>\n<li>Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The collapsed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.context", "modulename": "hec.timeseries", "qualname": "TimeSeries.context", "kind": "variable", "doc": "<p>The context of the time series. Valid contexts are \"CWMS\" and \"DSS\"</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.timeseries.TimeSeries.convert_to_time_zone", "modulename": "hec.timeseries", "qualname": "TimeSeries.convert_to_time_zone", "kind": "function", "doc": "<p>Converts a time series (either this one or a copy of it) to the spcified time zone and returns it</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>time_zone (Union[HecTime, datetime, ZoneInfo, str]):</strong>  The target time zone or object containg the target time zone.\nUse <code>\"local\"</code> to specify the system time zone.</li>\n<li><strong>on_tz_not_set (int, optional):</strong>  Specifies behavior if this object has no time zone attached. Defaults to 1.\n<ul>\n<li><code>0</code>: Quietly behave as if this object had the local time zone attached.</li>\n<li><code>1</code>: (default) Same as <code>0</code>, but issue a warning.</li>\n<li><code>2</code>: Raise an exception preventing objectes with out time zones attached from using this method.</li>\n</ul></li>\n<li><strong>in_place (bool):</strong>  Specifies whether to convert this time series (True) or a copy of it (False). Defaults to False</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The converted time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">on_tz_not_set</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.data", "modulename": "hec.timeseries", "qualname": "TimeSeries.data", "kind": "variable", "doc": "<p>The data as a DataFrame or None if not set. Note this exposes the interal DataFrame object to\nallow direct modification. For uses that should not modify this TimeSeries object, the DataFrame\nshould be copied using its <code>copy()</code> method prior to modification (e.g., <code>df = ts.data.copy()</code>)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[pandas.core.frame.DataFrame]"}, {"fullname": "hec.timeseries.TimeSeries.diff", "modulename": "hec.timeseries", "qualname": "TimeSeries.diff", "kind": "function", "doc": "<p>Returns a time series whose values are the differences of successive values in this time series.</p>\n\n<p>A missing value at a specific time in the source time series will cause the value at that\nand the next time in the result time sereies to be missing.</p>\n\n<p>If a selection is present, all non-selected items are set to missing before the\naccumulation is computed. They remain missing in the retuned time series.</p>\n\n<p><strong>Restrictions</strong></p>\n\n<ul>\n<li>May be performed only on time series with accumulatable base parameters. Use <a href=\"parameter.html#Parameter.accumulatable_base_parameters\">Parameter.accumulatable_base_parameters()</a> to\nlist the accumulatable base parameters.</li>\n<li>May be performed only on Instantaneous, Average, or Total time series (CWMS: Inst, Ave, Total, DSS: INST-VAL, INST-CUM, PER-CUM)</li>\n</ul>\n\n<p>See <a href=\"parameter.html#base_parameter_definitions\">base_parameter_definitions</a> for information on base parameters and their conversions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>in_place (bool, optional):</strong>  If True, this object is modified and retured, otherwise\na copy of this object is modified and returned.. Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The time series of differences</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.duration", "modulename": "hec.timeseries", "qualname": "TimeSeries.duration", "kind": "variable", "doc": "<p>The duration object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[hec.duration.Duration]"}, {"fullname": "hec.timeseries.TimeSeries.estimate_missing_values", "modulename": "hec.timeseries", "qualname": "TimeSeries.estimate_missing_values", "kind": "function", "doc": "<p>Estimates missing values in a time series using specified criteria, and returns the estimated time series (either this time series or a copy of it).\nValues are estimated using linear interpolation between the bounding valid values</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>max_missing_count (int):</strong>  The maximum number of consecutive missing values that will be replaced with estimates.\nGroups of consecutive missing values larger than this number remain missing (except see <code>accumulation</code>).</li>\n<li><strong>accumulation (bool, optional):</strong>  Specifies whether the time series is an accumulation (e.g., cumulative precipitaion).\nThe estimation behavior for accumulation time series differs in that\n<ul>\n<li>If the bounding valid values for a group of consecutive missing values decrease with increasing time, no estimations are performed</li>\n<li>If the bounding valid values for a group of consecutive missing values are equal, the all missing values in the group are replaced\nwith the same value, without regard to <code>max_missing_count</code>\nDefaults to False.</li>\n</ul></li>\n<li><strong>estimate_rejected (bool, optional):</strong>  Specifies whether to treat values in the time series with Rejected quality as missing. Defaults to True.</li>\n<li><strong>set_questioned (bool, optional):</strong>  Specifies whether to set the quality for estimated values to Questionable. If False, quality is set to Okay. Defaults to True.</li>\n<li><strong>in_place (bool, optional):</strong>  Specfies whether to modify and return this time series (True) or a copy of this time series (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If there are no values in the time series</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The estimated time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">max_missing_count</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">accumulation</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">estimate_rejected</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">set_questioned</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.expand", "modulename": "hec.timeseries", "qualname": "TimeSeries.expand", "kind": "function", "doc": "<p>Expands a regular time series (either this one or a copy of this one) so that there are no gaps in time\n(fills gaps with missing values) and returns the expanded time series. If <code>start_time</code> and/or <code>end_time</code>\nare specified, the times between the start_time and the first time and between the last time and the end_time\nare considered as gaps to be filled.</p>\n\n<p>Irregular time series (including pseudo-regular time series) are not affected.</p>\n\n<p>Does not alter any selection, even if selection state is <code>SelectionState.TRANSIENT</code>. Selected items remain\nselected after expansion even though their location in the data may change.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>start_time (Optional[Union[str, datetime, HecTime]]):</strong>  The beginning of the timespan before the first time\nto fill with missing values. Does not need to fall on the time series interval. If not at least one full\ninterval prior to the first time, no missing values will be inserted before the first time. Defaults to None.</li>\n<li><strong>end_time (Optional[Union[str, datetime, HecTime]]):</strong>  The end of the timespan after the last time to fill\nwith missing values. Does not need to fall on the time series interval. If not at least one full interval after\nthe last time, no missing values will be inserted after the last time. Defaults to None.</li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to expand this time series (True) or a copy of this time series (False).</li>\n<li>Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The expanded time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">start_time</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end_time</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.filter", "modulename": "hec.timeseries", "qualname": "TimeSeries.filter", "kind": "function", "doc": "<p>Filters a time series (either this one or a copy of this one) and returns the results. The returned time series\nwill contain only the selected or unselected items in the original time series.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unselected (bool, optional):</strong>  Specifies including only selected itmes (False) or only unselected items (True). Defaults to False.</li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to modifiy this time series (True) or a copy of it (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The filtered time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">unselected</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.ifilter", "modulename": "hec.timeseries", "qualname": "TimeSeries.ifilter", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.filter\">fileter(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">unselected</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.first_valid_time", "modulename": "hec.timeseries", "qualname": "TimeSeries.first_valid_time", "kind": "variable", "doc": "<p>The time of the first valid value in the time series. Values are valid unless any of the following are true:</p>\n\n<ul>\n<li>The quality is MISSING</li>\n<li>The quality is REJECTED</li>\n<li>The value is NaN</li>\n<li>The value is Infinite</li>\n</ul>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[numpy.datetime64]"}, {"fullname": "hec.timeseries.TimeSeries.first_valid_value", "modulename": "hec.timeseries", "qualname": "TimeSeries.first_valid_value", "kind": "variable", "doc": "<p>The first valid value in the time series. Values are valid unless any of the following are true:</p>\n\n<ul>\n<li>The quality is MISSING</li>\n<li>The quality is REJECTED</li>\n<li>The value is NaN</li>\n<li>The value is Infinite</li>\n</ul>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[float]"}, {"fullname": "hec.timeseries.TimeSeries.format_time_for_index", "modulename": "hec.timeseries", "qualname": "TimeSeries.format_time_for_index", "kind": "function", "doc": "<p>Formats a time item for indexing into the times of this object. The formatting depends on\nthe setting of this object's <a href=\"#TimeSeries.midnight_as_2400\"><code>mindnight_as_2400</code></a> property</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>item (Union[HecTime, datetime, str]):</strong>  The time item to format.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The formatted string with the midnight setting of this object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.forward_moving_average", "modulename": "hec.timeseries", "qualname": "TimeSeries.forward_moving_average", "kind": "function", "doc": "<p>Computes and returns a time series that is the forward moving average of this time series.</p>\n\n<p>A forward moving average sets the value at each time to be the average of the values at that\ntime and a number of previous consecutive times.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>window (int):</strong>  The number of values to average over. The result at each time will be\nthe average of the values at (window-1) previous times and the value at the current\ntime. The span between times is not accounted for so discretion should be used if\nthe time series is irregular.</li>\n<li><strong>only_valid (bool):</strong>  Specifies whether to only average over windows where every value is\nvalid. If False, the average at any given time may be computed using fewer values\nthat specified in the window parameter.</li>\n<li><strong>use_reduced (bool):</strong>  Specifies whether to allow averages using less than window number\nof values will be computed at the beginning of the times series. If False, the\nvalues at the first (window-1) times will be set to missing.</li>\n<li><strong>in_place (bool, optional):</strong>  If True, this time series is modified and returned.\nOtherwise this time series is not modified. Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data or if the window is invalid.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The averaged time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">window</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">only_valid</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">use_reduced</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.get_differentiation_parameter", "modulename": "hec.timeseries", "qualname": "TimeSeries.get_differentiation_parameter", "kind": "function", "doc": "<p>Returns a new Parameter object appropriate for differentiating this time series with respect to time.</p>\n\n<p>The new parameter will preserve any sub-parameter of this time series as well as the unit system of this time sereis.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If time series is not integrable (see <a href=\"parameter.html#Parameter.differentiable_base_parameters\">Parameter.differentiable_base_parameters</a>)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Parameter: The new parameter object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">Parameter</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.get_integration_parameter", "modulename": "hec.timeseries", "qualname": "TimeSeries.get_integration_parameter", "kind": "function", "doc": "<p>Returns a new Parameter object appropriate for integrating this time series over time.</p>\n\n<p>The new parameter will preserve any sub-parameter of this time series as well as the unit system of this time sereis.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If time series is not integrable (see <a href=\"parameter.html#Parameter.integrable_base_parameters\">Parameter.integrable_base_parameters</a>)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Parameter: The new parameter object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">Parameter</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.has_same_times", "modulename": "hec.timeseries", "qualname": "TimeSeries.has_same_times", "kind": "function", "doc": "<p>Returns whether another time series has the same times as this time series.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (TimeSeries):</strong>  The other time series</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether another time series has the same times as this time series.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.has_selection", "modulename": "hec.timeseries", "qualname": "TimeSeries.has_selection", "kind": "variable", "doc": "<p>Whether the object has a current selection specified</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.timeseries.TimeSeries.iaccum", "modulename": "hec.timeseries", "qualname": "TimeSeries.iaccum", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.accum\">accum(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.icentered_moving_average", "modulename": "hec.timeseries", "qualname": "TimeSeries.icentered_moving_average", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.centered_moving_average\">centered_moving_average(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">window</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">only_valid</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">use_reduced</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.icollapse", "modulename": "hec.timeseries", "qualname": "TimeSeries.icollapse", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.collapse\">collapse(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.iconvert_to_time_zone", "modulename": "hec.timeseries", "qualname": "TimeSeries.iconvert_to_time_zone", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.convert_to_time_zone\">convert_to_time_zone(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">on_tz_not_set</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.idiff", "modulename": "hec.timeseries", "qualname": "TimeSeries.idiff", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.diff\">diff(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.iestimate_missing_values", "modulename": "hec.timeseries", "qualname": "TimeSeries.iestimate_missing_values", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.estimate_missing_values\">estimate_missing_values(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">max_missing_count</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">accumulation</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">estimate_rejected</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">set_questioned</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.iexpand", "modulename": "hec.timeseries", "qualname": "TimeSeries.iexpand", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.expand\">expand(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">start_time</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end_time</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.iforward_moving_average", "modulename": "hec.timeseries", "qualname": "TimeSeries.iforward_moving_average", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.forward_moving_average\">forward_moving_average(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">window</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">only_valid</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">use_reduced</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.imap", "modulename": "hec.timeseries", "qualname": "TimeSeries.imap", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.map\">map(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"nb\">float</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.ilabel_as_time_zone", "modulename": "hec.timeseries", "qualname": "TimeSeries.ilabel_as_time_zone", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.label_as_time_zone\">label_as_time_zone(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">on_already_set</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.imerge", "modulename": "hec.timeseries", "qualname": "TimeSeries.imerge", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.merge\">merge(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.index_of", "modulename": "hec.timeseries", "qualname": "TimeSeries.index_of", "kind": "function", "doc": "<p>Retrieves the data index of a specified object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>item_to_index (Union[HecTime, datetime, int, str]):</strong>  The object to retrieve the index of.\n<ul>\n<li><strong>HecTime</strong>: an HecTime object</li>\n<li><strong>datetime</strong>:  a datetime object</li>\n<li><strong>int</strong>: a normal python index</li>\n<li><strong>str</strong>: a date-time string</li>\n</ul></li>\n<li><strong>not_found (Optional[str]):</strong>  Specifies the behavior if <code>item_to_index</code> is not in the index:\n<ul>\n<li>'next': return the higher of the bounding indices of the item</li>\n<li>'previous': return the lower of the bounding indices of the item</li>\n<li>'stop': used for the stop index of slices - return the lower of the bounding indices plus one (unless beyond end)</li>\n<li>None (default): raise an IndexError</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no values, or if <code>not_found</code> is specifed and is not \"next\" \"previous\", or \"stop\"</li>\n<li><strong>TypeError:</strong>  If <code>item_to_index</code> is not one of the expected types</li>\n<li><strong>IndexError:</strong>  * <strong>int</strong>: If the integer is out of range of the number of times\n<ul>\n<li><strong>Others</strong>: If no index item matches the input object</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The actual index item that for the specified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">item_to_index</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">not_found</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.interval", "modulename": "hec.timeseries", "qualname": "TimeSeries.interval", "kind": "variable", "doc": "<p>The interval object (used in HEC-DSS E pathname part)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": hec.interval.Interval"}, {"fullname": "hec.timeseries.TimeSeries.iolympic_moving_average", "modulename": "hec.timeseries", "qualname": "TimeSeries.iolympic_moving_average", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.olympic_moving_average\">olympic_moving_average(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">window</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">only_valid</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">use_reduced</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.iresample", "modulename": "hec.timeseries", "qualname": "TimeSeries.iresample", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.resample\">resample(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">operation</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">start_time</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end_time</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_missing_percent</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">25.0</span>,</span><span class=\"param\">\t<span class=\"n\">entire_interval</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">before</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">after</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;LAST&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.iround_off", "modulename": "hec.timeseries", "qualname": "TimeSeries.iround_off", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.round_off\">round_off(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">precision</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">tens_place</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.is_any_irregular", "modulename": "hec.timeseries", "qualname": "TimeSeries.is_any_irregular", "kind": "variable", "doc": "<p>Specifies whether the time series is a normal irregular or pseudo-regular time series</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.timeseries.TimeSeries.is_any_regular", "modulename": "hec.timeseries", "qualname": "TimeSeries.is_any_regular", "kind": "variable", "doc": "<p>Specifies whether the time series is a normal regular or local regular time series</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.timeseries.TimeSeries.is_cwms_ts_id", "modulename": "hec.timeseries", "qualname": "TimeSeries.is_cwms_ts_id", "kind": "function", "doc": "<p>Returns whether the specified identifier is a valid CWMS time series identifier</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>identifier (str):</strong>  The identifier</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether the identifier is a valid CWMS time series identifier</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.is_dss_ts_pathname", "modulename": "hec.timeseries", "qualname": "TimeSeries.is_dss_ts_pathname", "kind": "function", "doc": "<p>Returns whether the specified identifier is a valid HEC-DSS time series pathname</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>identifier (str):</strong>  The identifier</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether the identifier is a valid HEC-DSS time series pathname</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">identifier</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.is_english", "modulename": "hec.timeseries", "qualname": "TimeSeries.is_english", "kind": "variable", "doc": "<p>Returns whether the unit of this time series is recognized as an English unit</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.timeseries.TimeSeries.is_irregular", "modulename": "hec.timeseries", "qualname": "TimeSeries.is_irregular", "kind": "variable", "doc": "<p>Specifies whether the time series is a normal irregular time series</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.timeseries.TimeSeries.is_local_regular", "modulename": "hec.timeseries", "qualname": "TimeSeries.is_local_regular", "kind": "variable", "doc": "<p>Specifies whether the time series is a local regular time series</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.timeseries.TimeSeries.is_metric", "modulename": "hec.timeseries", "qualname": "TimeSeries.is_metric", "kind": "variable", "doc": "<p>Returns whether the unit of this time series is recognized as an Metric unit</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.timeseries.TimeSeries.is_pseudo_regular", "modulename": "hec.timeseries", "qualname": "TimeSeries.is_pseudo_regular", "kind": "variable", "doc": "<p>Specifies whether the time series is a normal irregular or pseudo-regular time series</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.timeseries.TimeSeries.is_regular", "modulename": "hec.timeseries", "qualname": "TimeSeries.is_regular", "kind": "variable", "doc": "<p>Specifies whether the time series is a normal regular time series</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.timeseries.TimeSeries.is_valid", "modulename": "hec.timeseries", "qualname": "TimeSeries.is_valid", "kind": "function", "doc": "<p>Returns whether the index is in the time series and the value at the index is valid</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>index (Union[int, str, datetime, HecTime]):</strong>  The index to test.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: False if any of the following are true, otherwise True:</p>\n  \n  <ul>\n  <li>The time series does not contain the index</li>\n  <li>The quality is MISSING</li>\n  <li>The quality is REJECTED</li>\n  <li>The value is NaN</li>\n  <li>The value is Infinite</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.iscreen_with_constant_value", "modulename": "hec.timeseries", "qualname": "TimeSeries.iscreen_with_constant_value", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.screen_with_constant_value\">screen_with_constant_value(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">duration</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">duration</span><span class=\"o\">.</span><span class=\"n\">Duration</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">missing_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">min_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">percent_valid_required</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.iscreen_with_duration_magnitude", "modulename": "hec.timeseries", "qualname": "TimeSeries.iscreen_with_duration_magnitude", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.screen_with_duration_magnitude\">screen_with_duration_magnitude(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">duration</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">duration</span><span class=\"o\">.</span><span class=\"n\">Duration</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">min_missing_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">min_reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">min_question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">max_question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">max_reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">max_missing_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">percent_valid_required</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.iscreen_with_forward_moving_average", "modulename": "hec.timeseries", "qualname": "TimeSeries.iscreen_with_forward_moving_average", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.screen_with_forward_moving_average\">screen_with_forward_moving_average(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">window</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">only_valid</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">use_reduced</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">diff_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">invalid_validity</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;M&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.iscreen_with_value_change_rate", "modulename": "hec.timeseries", "qualname": "TimeSeries.iscreen_with_value_change_rate", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.screen_with_value_change_rate\">screen_with_value_change_rate(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">min_reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">min_question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">max_question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">max_reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.iscreen_with_value_range", "modulename": "hec.timeseries", "qualname": "TimeSeries.iscreen_with_value_range", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.screen_with_value_range\">screen_with_value_range(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">min_reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">min_question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">max_question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">max_reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.iscreen_with_value_range_or_change", "modulename": "hec.timeseries", "qualname": "TimeSeries.iscreen_with_value_range_or_change", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.screen_with_value_range_or_change\">screen_with_value_range_or_change(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">min_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">max_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">change_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">replace_invalid_value</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">invalid_value_replacement</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">invalid_validity</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;M&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.iselect", "modulename": "hec.timeseries", "qualname": "TimeSeries.iselect", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.select\">select(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">selection</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">Select</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeriesValue</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">combination</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">Combine</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Combine</span><span class=\"o\">.</span><span class=\"n\">REPLACE</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.iselect_valid", "modulename": "hec.timeseries", "qualname": "TimeSeries.iselect_valid", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.select_valid\">select_valid(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.iset_duration", "modulename": "hec.timeseries", "qualname": "TimeSeries.iset_duration", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.set_duration\">set_duration(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">duration</span><span class=\"o\">.</span><span class=\"n\">Duration</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.iset_interval", "modulename": "hec.timeseries", "qualname": "TimeSeries.iset_interval", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.set_interval\">set_interval(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.iset_location", "modulename": "hec.timeseries", "qualname": "TimeSeries.iset_location", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.set_location\">set_location(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">location</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.iset_parameter", "modulename": "hec.timeseries", "qualname": "TimeSeries.iset_parameter", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.set_parameter\">set_parameter(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">Parameter</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.iset_parameter_type", "modulename": "hec.timeseries", "qualname": "TimeSeries.iset_parameter_type", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.set_parameter_type\">set_parameter_type(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">ParameterType</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.iset_protected", "modulename": "hec.timeseries", "qualname": "TimeSeries.iset_protected", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.set_protected\">set_protected(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.iset_quality", "modulename": "hec.timeseries", "qualname": "TimeSeries.iset_quality", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.set_quality\">set_quality(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">quality</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.iset_unit", "modulename": "hec.timeseries", "qualname": "TimeSeries.iset_unit", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.set_unit\">set_unit(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.iset_unprotected", "modulename": "hec.timeseries", "qualname": "TimeSeries.iset_unprotected", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.set_unprotected\">set_unprotected(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.iset_value", "modulename": "hec.timeseries", "qualname": "TimeSeries.iset_value", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.set_value\">set_value(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.iset_value_quality", "modulename": "hec.timeseries", "qualname": "TimeSeries.iset_value_quality", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.set_value_quality\">set_value_quality(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">quality</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.iset_vertical_datum_info", "modulename": "hec.timeseries", "qualname": "TimeSeries.iset_vertical_datum_info", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.set_vertical_datum_info\">set_vertical_datum_info(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.isnap_to_regular", "modulename": "hec.timeseries", "qualname": "TimeSeries.isnap_to_regular", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.snap_to_regular\">snap_to_regular(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">backward</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">forward</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.itime_derivative", "modulename": "hec.timeseries", "qualname": "TimeSeries.itime_derivative", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.time_derivative\">time_derivative(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.ito", "modulename": "hec.timeseries", "qualname": "TimeSeries.ito", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.to\">to(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">unit_parameter_or_datum</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">Parameter</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.ito_irregular", "modulename": "hec.timeseries", "qualname": "TimeSeries.ito_irregular", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.to_irregular\">to_irregular(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.itrim", "modulename": "hec.timeseries", "qualname": "TimeSeries.itrim", "kind": "function", "doc": "<p>Convenience method for executing <a href=\"#TimeSeries.trim\">trim(...)</a> with <code>in_place=True</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.kurtosis", "modulename": "hec.timeseries", "qualname": "TimeSeries.kurtosis", "kind": "function", "doc": "<p>Computes the kurtosis coefficient of the values in the time series</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data or fewer than 2 items selected.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: The kurtosis coefficient</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.label_as_time_zone", "modulename": "hec.timeseries", "qualname": "TimeSeries.label_as_time_zone", "kind": "function", "doc": "<p>Attaches the specified time zone to this object or a copy of this object and returns it. Does not change the actual times</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>time_zone (Optional[Union[\"HecTime\", datetime, ZoneInfo, str]]):</strong>  The time zone to attach or\nobject containing that time zone.\n<ul>\n<li>Use <code>\"local\"</code> to specify the system time zone.</li>\n<li>Use <code>None</code> to remove time zone information</li>\n</ul></li>\n<li><strong>on_already_set (int):</strong>  Specifies action to take if a different time zone is already\nattached. Defaults to 1.\n<ul>\n<li><code>0</code>: Quietly attach the new time zone</li>\n<li><code>1</code>: (default) Issue a warning about attaching a different time zone</li>\n<li><code>2</code>: Raises an exception</li>\n</ul></li>\n<li><strong>in_place (bool):</strong>  Specifies whether to attach the time zone to this time series (True) or a copy of it (False). Defaults to False</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  if a different time zone is already attached and <code>on_already_set</code> == 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">on_already_set</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.last_valid_time", "modulename": "hec.timeseries", "qualname": "TimeSeries.last_valid_time", "kind": "variable", "doc": "<p>The time of the last valid value in the time series. Values are valid unless any of the following are true:</p>\n\n<ul>\n<li>The quality is MISSING</li>\n<li>The quality is REJECTED</li>\n<li>The value is NaN</li>\n<li>The value is Infinite</li>\n</ul>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[numpy.datetime64]"}, {"fullname": "hec.timeseries.TimeSeries.last_valid_value", "modulename": "hec.timeseries", "qualname": "TimeSeries.last_valid_value", "kind": "variable", "doc": "<p>The last valid value in the time series. Values are valid unless any of the following are true:</p>\n\n<ul>\n<li>The quality is MISSING</li>\n<li>The quality is REJECTED</li>\n<li>The value is NaN</li>\n<li>The value is Infinite</li>\n</ul>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[float]"}, {"fullname": "hec.timeseries.TimeSeries.location", "modulename": "hec.timeseries", "qualname": "TimeSeries.location", "kind": "variable", "doc": "<p>The location object (used in HEC-DSS B pathname part)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": hec.location.Location"}, {"fullname": "hec.timeseries.TimeSeries.map", "modulename": "hec.timeseries", "qualname": "TimeSeries.map", "kind": "function", "doc": "<p>Applies a function of one variable to the values of this object and returns the modified object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func (Callable):</strong>  The function of one variable to apply to the values</li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to operate on this object (True)\nor a copy of this object (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: Either this object (modified) or a modified copy of this object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"nb\">float</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.max_value", "modulename": "hec.timeseries", "qualname": "TimeSeries.max_value", "kind": "function", "doc": "<p>Returns the maximum value in the time series.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: The maximum value in the time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.max_value_time", "modulename": "hec.timeseries", "qualname": "TimeSeries.max_value_time", "kind": "function", "doc": "<p>Returns the time of maximum value in the time series.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: The time of maximum value in the time series. If the maximum value\n      occurs more than once, the earliest time is returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.merge", "modulename": "hec.timeseries", "qualname": "TimeSeries.merge", "kind": "function", "doc": "<p>Merges one or more time series into either this time series or a copy of it, and returns the merged time series.</p>\n\n<p>When the same time exists while merging, the following precedence is followed:</p>\n\n<ul>\n<li>other protected value (incoming protected trumps existing protected)</li>\n<li>this protected value</li>\n<li>this unprotected value if it is not NaN or infinite</li>\n<li>other unprotected value if it is not NaN or infinte</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (Union[&quot;TimeSeries&quot;, List[&quot;TimeSeries&quot;]]):</strong>  The other times series (one or a list) to merge.\nIf a list, each other time series is merged in sequence, with earlier results acting as this time series for later merges</li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to merge into this time series (True) or a copy of it (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If this time series is a regular time series and the merged times are not all on the interval</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The merged time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.midnight_as_2400", "modulename": "hec.timeseries", "qualname": "TimeSeries.midnight_as_2400", "kind": "variable", "doc": "<p>The object's current setting of whether to show midnight as hour 24 (default) or not.</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.timeseries.TimeSeries.min_value", "modulename": "hec.timeseries", "qualname": "TimeSeries.min_value", "kind": "function", "doc": "<p>Returns the minimum value in the time series.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: The minimum value in the time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.min_value_time", "modulename": "hec.timeseries", "qualname": "TimeSeries.min_value_time", "kind": "function", "doc": "<p>Returns the time of minimum value in the time series.</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: The time of minimum value in the time series. If the minimum value\n      occurs more than once, the earliest time is returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.name", "modulename": "hec.timeseries", "qualname": "TimeSeries.name", "kind": "variable", "doc": "<p>The CWMS time series identifier or HEC-DSS pathname</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.timeseries.TimeSeries.new_regular_time_series", "modulename": "hec.timeseries", "qualname": "TimeSeries.new_regular_time_series", "kind": "function", "doc": "<p>Generates and returns a new regular (possibly local regular) interval time series with the\nspecified times, values, and qualities.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the time series. The interval portion will be overwritten by the <code>interval</code> if they don't agree</li>\n<li><strong>start (Union[HecTime, datetime, str]):</strong>  The specified start time. The actual start time may be later than this, depending on <code>interval</code> and <code>offset</code></li>\n<li><strong>end (Union[HecTime, datetime, str, int]):</strong>  Either the specified end time or, if int, the number of intervals in the time series.\nThe actual end time may be earlier than the specified end time, depending on <code>interval</code> and <code>offset</code></li>\n<li><strong>interval (Union[Interval, timedelta, str]):</strong>  The interval of the time series. Will overwrite the interval portion of <code>name</code>. If it\nis a local regular interval and <code>start</code> includes a time zone, then the time series will be a local regular time series</li>\n<li><strong>offset (Optional[Union[TimeSpan, timedelta, str, int]]):</strong>  The interval offset. If int, then number of minutes. If none, then the\noffset is determined from <code>start</code> (it's offset into the specified interval). Defaults to None.</li>\n<li><strong>time_zone (Optional[str]):</strong>  The time zone. Must be specified if <code>interval</code> is a local-regular interval.</li>\n<li><strong>value (Union[List[float], float], optional):</strong>  The value(s) to populate the time series with. If float, it specifies all values.\nIf list, the list is repeated as many whole and/or partial time as necessary to fill the time series Defaults to 0.0.</li>\n<li><strong>quality (Union[List[Quality], List[int], Quality, int], optional):</strong>  The qualities to fill the time series with. If Quality or int,\nit specifies all qualities. If list, the list is repeated as many whole and/or partial times to fill the time sries Defaults to 0.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If an irregular interval is specified</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The generated regular (possible local regular) interval time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_zone</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">quality</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.number_invalid_values", "modulename": "hec.timeseries", "qualname": "TimeSeries.number_invalid_values", "kind": "variable", "doc": "<p>The number of invalid values in the time series. Values are invalid if any of the following are true:</p>\n\n<ul>\n<li>The quality is MISSING</li>\n<li>The quality is REJECTED</li>\n<li>The value is NaN</li>\n<li>The value is Infinite</li>\n</ul>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.timeseries.TimeSeries.number_missing_values", "modulename": "hec.timeseries", "qualname": "TimeSeries.number_missing_values", "kind": "variable", "doc": "<p>The number of invalid values in the time series. Values are missing if either of the following are true:</p>\n\n<ul>\n<li>The quality is MISSING</li>\n<li>The value is NaN</li>\n</ul>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.timeseries.TimeSeries.number_questioned_values", "modulename": "hec.timeseries", "qualname": "TimeSeries.number_questioned_values", "kind": "variable", "doc": "<p>The number of values in the time series that have quality of QUESTIONABLE:</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.timeseries.TimeSeries.number_rejected_values", "modulename": "hec.timeseries", "qualname": "TimeSeries.number_rejected_values", "kind": "variable", "doc": "<p>The number of values in the time series that have quality of REJECTED:</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.timeseries.TimeSeries.number_valid_values", "modulename": "hec.timeseries", "qualname": "TimeSeries.number_valid_values", "kind": "variable", "doc": "<p>The number of valid values in the time series. Values are valid unless any of the following are true:</p>\n\n<ul>\n<li>The quality is MISSING</li>\n<li>The quality is REJECTED</li>\n<li>The value is NaN</li>\n<li>The value is Infinite</li>\n</ul>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.timeseries.TimeSeries.number_values", "modulename": "hec.timeseries", "qualname": "TimeSeries.number_values", "kind": "variable", "doc": "<p>The number of values in the time series. Same as len(ts).</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.timeseries.TimeSeries.olympic_moving_average", "modulename": "hec.timeseries", "qualname": "TimeSeries.olympic_moving_average", "kind": "function", "doc": "<p>Computes and returns a time series that is the olympic moving average of this time series.</p>\n\n<p>An olympic moving average sets the value at each time to be the average of the values at that\ntime and a number of previous and following consecutive times, disregarding the minimum\nand maximum values in the range to average over.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>window (int):</strong>  The number of values to average over. The result at each time will be\nthe average of the values at ((window-1)/2) previous times, the value at the current\ntime, and the values at ((window-1)/2) following times, not using the minimum and\nmaximum values in the window. The span between times is not accounted for so discretion\nshould be used if the time series is irregular. Must be an odd number.</li>\n<li><strong>only_valid (bool):</strong>  Specifies whether to only average over windows where every value is\nvalid. If False, the average at any given time may be computed using fewer values\nthat specified in the window parameter.</li>\n<li><strong>use_reduced (bool):</strong>  Specifies whether to allow averages using less than window number\nof values will be computed at the beginning and end of the times series. If False, the\nvalues at the first and last ((window-1)/2) times will be set to missing.</li>\n<li><strong>in_place (bool, optional):</strong>  If True, this time series is modified and returned.\nOtherwise this time series is not modified. Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data or if the window is invalid.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The averaged time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">window</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">only_valid</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">use_reduced</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.parameter", "modulename": "hec.timeseries", "qualname": "TimeSeries.parameter", "kind": "variable", "doc": "<p>The parameter object (used in HEC-DSS C pathname part)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": hec.parameter.Parameter"}, {"fullname": "hec.timeseries.TimeSeries.parameter_type", "modulename": "hec.timeseries", "qualname": "TimeSeries.parameter_type", "kind": "variable", "doc": "<p>The parameter type object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[hec.parameter.ParameterType]"}, {"fullname": "hec.timeseries.TimeSeries.percentile", "modulename": "hec.timeseries", "qualname": "TimeSeries.percentile", "kind": "function", "doc": "<p>Computes the specified percentile of the values in the time series</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pct (float):</strong>  The desired percentile in the range of 1..100</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data or fewer than 2 items selected.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>float: The value for the specified percentile</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pct</span><span class=\"p\">:</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.percentile_ts", "modulename": "hec.timeseries", "qualname": "TimeSeries.percentile_ts", "kind": "function", "doc": "<p>Computes the specified percentile of the values in the time series</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pct (Union[tuple[float, ...], list[float], float]):</strong>  The desired percentile in the range of 1..100\nor a list or tuple of such percentiles.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data or fewer than 2 items selected.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The time series of percentiles for each time. The times series name will be\n  modified from the first time series specified in the following way:</p>\n  \n  <ul>\n  <li>The parameter will be \"Code-Percentile\"</li>\n  <li>the version will be \"<pct>-percentile\" with <pct> replaced by the pct parameter with any decimal\n  point replaced with an underscore (_) character</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">pct</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">timeseries</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.qualities", "modulename": "hec.timeseries", "qualname": "TimeSeries.qualities", "kind": "variable", "doc": "<p>The qualities as a list of integers (empty if there is no data)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": list[int]"}, {"fullname": "hec.timeseries.TimeSeries.resample", "modulename": "hec.timeseries", "qualname": "TimeSeries.resample", "kind": "function", "doc": "<p>Resamples a time series using a specified operation onto an interval or time pattern and returns the result, which may be a new time series or this time series modified.</p>\n\n<p>For this method document:</p>\n\n<ul>\n<li><strong>old</strong>: pertains to the time series this method is called on</li>\n<li><strong>new</strong>: pertains to the result time series</li>\n<li><strong>point</strong>: a time/value combination in a time series</li>\n<li><strong>interval</strong>: the time between one point (exclusive) and the next (inclusive), regardless of whether it corresponds to an actual <a href=\"interval.html#Interval\"><code>Interval</code></a></li>\n<li><strong>interval time</strong>: the ending time of the interval</li>\n</ul>\n\n<p><strong>Operation Types</strong></p>\n\n<p>The resample operations are divided in to discreet and continuous operations:</p>\n\n<ul>\n<li><strong>Discreet</strong>:\n<ul>\n<li><code>Count</code>: The number of valid old points in each new interval</li>\n<li><code>Maximum</code>: The maximum value of valid old points in each new interval</li>\n<li><code>Minimum</code>: The minimum value of valid old points in each new interval</li>\n<li><code>Previous</code>: The value of the latest valid old point prior to each new interval time</li>\n</ul></li>\n<li><strong>Continuous</strong>:\n<ul>\n<li><code>Interpolate</code>: Find the value at each new interval time (see callouts in plots below)</li>\n<li><code>Integrate</code>: Integrate the time series for each new interval(see shaded area in plots below)</li>\n<li><code>Average</code>: The integration of the time series for each new interval divided by the sum of the times used for integration for that interval.\nNote that this generates the <em>average value in the interval</em> which can be greater than the <em>average value over the interval</em> (integration divided by new interval span)\nif one or more old points in the new interval are missing or invalid.</li>\n<li><code>Accumulate</code>: The accumulation over each new interval (see computations below each plot below). Note that this differs from the <a href=\"#TimeSeries.accum\"><code>accum</code></a> method which accumulates\nsuccessive values in a time series.</li>\n<li><code>Volume</code>: A special case of <code>Integrate</code> that requires the old time series to have the base parameter of \"Flow'; the new base parameter is \"Volume\"</li>\n</ul></li>\n</ul>\n\n<p>For discreet operations (except <code>Previous</code>) the <code>entire_interval</code> argument specifies whether to require that each entire old interval falls within the new interval\n(True) or to allow all old points whose interval time is in the new interval (False).</p>\n\n<p>See <a href=\"parameter.html#base_parameter_definitions\">base_parameter_definitions</a> for information on base parameters and their conversions.</p>\n\n<p><strong>Parameter Type Effects</strong></p>\n\n<p>Interpolation, which is performed for all continous operations, and accumulation are dependent on the <a href=\"#TimeSeries.parameter_type\"><code>parameter_type</code></a> of the time series. Each plot below\nis for a 1-Hour regular time series with the following points:</p>\n\n<table>\n<thead>\n<tr>\n  <th>Time</th>\n  <th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n  <td>01Feb2025 01:10</td>\n  <td>1.0</td>\n</tr>\n<tr>\n  <td>01Feb2025 02:10</td>\n  <td>2.0</td>\n</tr>\n<tr>\n  <td>01Feb2025 03:10</td>\n  <td>3.0</td>\n</tr>\n<tr>\n  <td>01Feb2025 04:10</td>\n  <td>4.0</td>\n</tr>\n<tr>\n  <td>01Feb2025 05:10</td>\n  <td>3.0</td>\n</tr>\n<tr>\n  <td>01Feb2025 06:10</td>\n  <td>2.0</td>\n</tr>\n</tbody>\n</table>\n\n<p>The callouts show the interpolated values at 01:00 (except for Intantaneous), 02:00, 03:00, 04:00, 05:00, and 06:00. The shaded portion show the area used for integration,\nwhich is performed not only for the <code>Integrate</code> operation, but <code>Average</code> and <code>Volume</code> operations as well. Below each plot the accumulation from 02:00 to 04:00 is computed.</p>\n\n<ul>\n<li><strong>Instantaneous Types</strong> (CWMS: Inst, DSS: INST-VAL, INST-CUM): <img src=\"images/Interpolate_Integrate_Instantaneous.png\" alt=\"Intantaneous interpolataion and integration\" />\n<br><em>For instantaeous accumulation (e.g., CWMS: Precip.Inst, DSS INST-CUM), any point with a value lower than the previous point is considered to be invalid, so 05:00 and and 06:00 would be invalid values.</em>\n<br><code>Accumulation (02:00-04:00) = 3.8333 - 1.8333 = 2.0</code>.</li>\n<li><strong>Period Constant Types</strong> (CWMS: Ave, Const, Min, Max, DSS: PER-AVER, PER-MIN, PER-MAX): <img src=\"images/Interpolate_Integrate_Average.png\" alt=\"Period value interpolataion and integration\" />\n<br><code>Accumulation (02:00-04:00) = 4.0000 - 2.0000 = 2.0</code>.</li>\n<li><strong>Period Total Types</strong> (CWMS: Total, DSS: PER-CUM): <img src=\"images/Interpolate_Integrate_Total.png\" alt=\"Total interpolataion and integration\" />\n<br><code>Accumulation (02:00-04:00) = 2.0000 - 1.6667 + 3.0 + 3.3333 = 6.6667</code>.</li>\n</ul>\n\n<p><strong>Parameters, Units, and Parameter Types</strong></p>\n\n<p>The new time series may have different parameter, unit, and/or parameter than the old time series:</p>\n\n<ul>\n<li><code>Count</code>:\n<ul>\n<li><strong>Parameter</strong>: will be \"Count-&lt;old_parameter&gt;\"</li>\n<li><strong>Unit</strong>: will be \"unit\"</li>\n<li><strong>Parameter Type</strong>: will be Total (CWMS: Total, DSS: PER-CUM)</li>\n</ul></li>\n<li><code>Maximum</code>\n<ul>\n<li><strong>Parameter Type</strong>: will be Maximum (CWMS: Max, DSS: PER-MAX)</li>\n</ul></li>\n<li><code>Minimum</code>\n<ul>\n<li><strong>Parameter Type</strong>: will be Minimum (CWMS: Min, DSS: PER-MIN)</li>\n</ul></li>\n<li><code>Integrate</code>:\n<ul>\n<li><strong>Parameter</strong>: will be the integration parameter returned by <a href=\"#TimeSeries.get_integration_parameter\">get_integration_parameter()</a></li>\n<li><strong>Unit</strong>: will be the unit of the parameter returned by <a href=\"#TimeSeries.get_integration_parameter\">get_integration_parameter()</a>, which preserves the unit system of the old time series</li>\n</ul></li>\n<li><code>Average</code>\n<ul>\n<li><strong>Parameter Type</strong>: will be Average (CWMS: Ave, DSS: PER-AVER)</li>\n</ul></li>\n<li><code>Volume</code>:\n<ul>\n<li><strong>Parameter</strong>: will be \"Volume\"</li>\n<li><strong>Unit</strong>: will be \"ft3\" or \"m3\" depending on the unit system of the old time series</li>\n</ul></li>\n</ul>\n\n<p><a name=\"restrictions\"></a>\n<strong>Restrictions</strong></p>\n\n<p>Not all continuous resample operations can be performed on all time series.</p>\n\n<ul>\n<li><code>Integrate</code>:\n<ul>\n<li>May be performed only on time series with integrable base parameters. Use <a href=\"parameter.html#Parameter.integrable_base_parameters\">Parameter.integrable_base_parameters()</a> to\nlist the integrable base parameters.</li>\n<li>May be performed only on Instantaneous, Average, or constant time series (CWMS: Inst, Ave, Const, DSS: INST-VAL, INST-CUM, PER-AVER)</li>\n</ul></li>\n<li><code>Accumulate</code>:\n<ul>\n<li>May be performed only on time series with accumulatable base parameters. Use <a href=\"parameter.html#Parameter.accumulatable_base_parameters\">Parameter.accumulatable_base_parameters()</a> to\nlist the accumulatable base parameters.</li>\n<li>May be performed only on Instantaneous, Average, or Total time series (CWMS: Inst, Ave, Total, DSS: INST-VAL, INST-CUM, PER-CUM)</li>\n</ul></li>\n<li><code>Volume</code>:\n<ul>\n<li>May be performed only on Instantaneous, Average, or Constant time series (CWMS: Inst, Ave, Const, DSS: INST-VAL, INST-CUM, PER-AVER) with base parameter of \"Flow\"</li>\n</ul></li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>operation (str):</strong>  The resample operation to perform. Must be one of <code>Count</code>, <code>Maximum</code>, <code>Minimum</code>, <code>Previous</code>, <code>Interpolate</code>, <code>Integrate</code>, <code>Average</code>, <code>Accumulate</code>, or <code>Volume</code> or a unique\nbeginning portion (case insensitive). 'c' is interpeted as <code>Count</code>, but 'INT' is ambiguous between <code>Interpolate</code> and <code>Integrate</code>.</li>\n<li><strong>interval (Optional[Union[&quot;TimeSeries&quot;, TimeSpan, timedelta]]):</strong>  The interval or time pattern to resample onto. If None, the old interval is used. Otherwise the following\ncan be used:\n<ul>\n<li><a href=\"interval.html#Interval\"><code>Interval</code></a>: resample onto a standard regular or local-regular interval</li>\n<li><a href=\"timespan.html#TimeSpan\"><code>TimeSpan</code></a> or <code>timedelta</code>: resample onto non-standard regular interval</li>\n<li><a href=\"#TimeSeries\"><code>TimeSeries</code></a>: resample onto an irregular time interval\nDefaults to None.</li>\n</ul></li>\n<li><strong>offset (Optional[Union[int, TimeSpan, timedelta]]):</strong>  Offset into <code>interval</code> for each new time. If specified as an int, the value is in minutes. None is the\nsame as specifying <code>0</code>, <code>TimeSpan(\"PT0S\")</code>, or <code>timedelta(seconds=0)</code>. Defaults to None</li>\n<li><strong>start_time (Optional[Union[HecTime, datetime, str]]):</strong>  Start time of the new time series. None specifies the same start time as the old time sereies. Defaults to None.</li>\n<li><strong>end_time (Optional[Union[HecTime, datetime, str]]):</strong>  End time of the new time series. None specifies the same end time as the old time sereies. Defaults to None.</li>\n<li><strong>max_missing_percent (float, optional):</strong>  The maximum amount of time in each new interval that can be invalid or missing and still perform the resample operation for that interval.\nIf the old time series is regular interval, this is approximately equivalent to the max percent of points that can be invalid or missing. If more than this amount of time\nis invalid or missing in any new interval, the value for that interval will be set to missing. Defaults to 25.0.</li>\n<li><strong>entire_interval (Optional[bool]):</strong>  <em>Used only for discreet resample operations (except <code>Previous</code>)</em>. Specifies whether to require each old interval to begin and end in the new\ninterval in order to be considered (True) or to allow all old intervals that end in the new interval (False). If None, each old interval is required toe begin and end in the new interval\nfor all data types except Instantaneous (CWMS: Inst, DSS: INST-VAL, INST-CUM). Defaults to None.</li>\n<li><strong>before (Union[str, float], optional):</strong>  <em>Used only for time patterns</em>. Specfies the value for new points (points in the time pattern) that are prior to the beginning of the old time series.\n<ul>\n<li><strong>float</strong>: The floating point value to set the new points to.</li>\n<li><strong>str</strong>: May be one of\n<ul>\n<li>\"FIRST\": sets the new values to the first value in the old time series</li>\n<li>\"MISSING\": sets the new values to missing\nDefaults to 0.0.</li>\n</ul></li>\n</ul></li>\n<li><strong>after (Union[str, float], optional):</strong>  <em>Used only for time patterns</em>. Specfies the value for new points (points in the time pattern) that are after to the end of the old time series.\n<ul>\n<li><strong>float</strong>: The floating point value to set the new points to.</li>\n<li><strong>str</strong>: May be one of\n<ul>\n<li>\"LAST\": sets the new values to the last value in the old time series</li>\n<li>\"MISSING\": sets the new values to missing\nDefaults to \"LAST\".</li>\n</ul></li>\n</ul></li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to resample onto this time series (True) or onto a new time series (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong> <br>\n<ul>\n<li>on time series with no data</li>\n<li>on time series with no parameter type</li>\n<li>on invalid <code>operation</code> parameter (matches zero or more than one)</li>\n<li>on invalid <code>before</code> paremeter</li>\n<li>on invalid <code>after</code> parameter</li>\n<li>on empty pattern time series</li>\n<li>on attempt perform invalid continuous resample operation (see <a href=\"#restrictions\">Restrictions</a>) above</li>\n</ul></li>\n<li><strong>TypeError:</strong> <br>\n<ul>\n<li>on unexpected <code>interval</code> type parameter</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The resampled time series, whether this one or a new one.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">operation</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">start_time</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">end_time</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_missing_percent</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">25.0</span>,</span><span class=\"param\">\t<span class=\"n\">entire_interval</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">before</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">after</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;LAST&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.round_off", "modulename": "hec.timeseries", "qualname": "TimeSeries.round_off", "kind": "function", "doc": "<p>Return a time series whose values are rounded according to the parameters.</p>\n\n<table>\n<tr><th>value</th><th>precision</th><th>tens_place></th><th>result</th></tr>\n<tr><td>123456.789</td><td>5</td><td>0</td><td>123460.0</td></tr>\n<tr><td>123456.789</td><td>7</td><td>-1</td><td>123456.8</td></tr>\n<tr><td>123456.789</td><td>7</td><td>0</td><td>123457.0</td></tr>\n<tr><td>123456.789</td><td>7</td><td>1</td><td>123460.0</td></tr>\n</table>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>precision (int):</strong>  The maximum number of significant digits to use.</li>\n<li><strong>tens_place (int):</strong>  The lowest power of 10 to have a non-zero value.</li>\n<li><strong>in_place (bool, optional):</strong>  Modify and return this object if True, otherwise modify\nand return a copy of this object. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">precision</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">tens_place</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.screen_with_constant_value", "modulename": "hec.timeseries", "qualname": "TimeSeries.screen_with_constant_value", "kind": "function", "doc": "<p>Screens a time series - either this one or a copy of this one - setting values and/or quality codes\nwhere the value changes over a specified duration are below specified limits.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>duration (Union[Duration, str]):</strong>  The duration over which to screen the value changes. May be a\n<a href=\"duration.html#Duration\"><code>Duration</code></a> object or the name of a valid duration (e.g., '6Hours', '1Day', ...).</li>\n<li><strong>missing_limit (float, optional):</strong>  The mininum value change over the duration that is not flagged as missing. Values flagged as missing also have the value modified to math.nan. Defaults to math.nan (test not performed).</li>\n<li><strong>reject_limit (float, optional):</strong>  The mininum non-missing value change over the duration that is not flagged as rejected. Defaults to math.nan (test not performed).</li>\n<li><strong>question_limit (float, optional):</strong>  The mininum non-rejected, non-missing value change over the duration that is not flagged as questionable. Defaults to math.nan (test not performed).</li>\n<li><strong>min_threshold (float, optional):</strong>  Values less than this will not be screened. Defaults to math.nan (test not performed)</li>\n<li><strong>percent_valid_required (float, optional):</strong>  The minimum percent (0..100) of valid values in the duration that will allow the value to be screened. Defaults to math.nan (test not performed).\nDefaults to math.nan. Values are invalid if any of the following are true:\n<ul>\n<li>The quality is MISSING</li>\n<li>The quality is REJECTED</li>\n<li>The value is NaN</li>\n<li>The value is Infinite</li>\n</ul></li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to modify this time series (True) or a copy of it. Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If any of the following are true:\n<ul>\n<li>The time series has fewer than two values to be screened.</li>\n<li>If <code>percent_valid_required</code> is not in the range 0..100</li>\n<li>If the non-NaN limits are not in the following increasing-value order:\n<ul>\n<li><code>missing_limit</code></li>\n<li><code>reject_limit</code></li>\n<li><code>question_limit</code></li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The screened time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">duration</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">duration</span><span class=\"o\">.</span><span class=\"n\">Duration</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">missing_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">min_threshold</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">percent_valid_required</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.screen_with_duration_magnitude", "modulename": "hec.timeseries", "qualname": "TimeSeries.screen_with_duration_magnitude", "kind": "function", "doc": "<p>Screens a time series - either this one or a copy of this one - setting values and/or quality codes\nwhere the accumulated values over a specified duration are outside the specified range.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>duration (Union[Duration, str]):</strong>  The duration over which to screen the accumulated values. May be a\n<a href=\"duration.html#Duration\"><code>Duration</code></a> object or the name of a valid duration (e.g., '6Hours', '1Day', ...). Accumulations for durations that are not even multiples\nof regular time series intervals may be used. Irregular time series may also be screened. The end of the duration is always positioned at the time (assumed to be EOP) of\nthe accumulation to be screened. If the beginning of the duration does not align with a data time in the time series, a fraction of the first interval's accumulation is used.\nOnly EOP durations may be used.</li>\n<li><strong>min_missing_limit (float, optional):</strong>  The minimum accumulation over the duration that is not flagged as missing. Values flagged as missing also have the value modified to math.nan. Defaults to <code>math.nan</code> (test disabled).</li>\n<li><strong>min_reject_limit (float, optional):</strong>  The minimum non-missing accumulation over the duration that is not flagged as rejected. Defaults to <code>math.nan</code> (test disabled).</li>\n<li><strong>min_question_limit (float, optional):</strong>  The minimum non-rejected, non-missing accumulation over the duration that is not flagged as questioned. Defaults to <code>math.nan</code> (test disabled).</li>\n<li><strong>max_question_limit (float, optional):</strong>  The maximum non-rejected, non-missing accumulation over the duration that is not flagged as questioned. Defaults to <code>math.nan</code> (test disabled).</li>\n<li><strong>max_reject_limit (float, optional):</strong>  The maximum non-missing accumulation over the duration that is not flagged as rejected. Defaults to <code>math.nan</code> (test disabled).</li>\n<li><strong>max_missing_limit (float, optional):</strong>  The maximum accumulation over the duration that is not flagged as missing. Values flagged as missing also have the value modified to math.nan. Defaults to <code>math.nan</code> (test disabled).</li>\n<li><strong>percent_valid_required (float, optional):</strong>  The minimum percent (0..100) of valid values in the accumulation that will allow the value to be screened. Defaults to 0.\nValues are invalid if any of the following are true:\n<ul>\n<li>The quality is MISSING</li>\n<li>The quality is REJECTED</li>\n<li>The value is NaN</li>\n<li>The value is Infinite</li>\n</ul></li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to modify this time series (True) or a copy of it. Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If any of the following are true:\n<ul>\n<li>The time series has fewer than two values to be screened.</li>\n<li>If <code>percent_valid_required</code> is not in the range 0..100</li>\n<li>If the non-NaN limits are not in the following increasing-value order:\n<ul>\n<li><code>min_missing_limit</code></li>\n<li><code>min_reject_limit</code></li>\n<li><code>min_question_limit</code></li>\n<li><code>max_question_limit</code></li>\n<li><code>max_reject_limit</code></li>\n<li><code>max_missing_limit</code></li>\n</ul></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The screened time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">duration</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">duration</span><span class=\"o\">.</span><span class=\"n\">Duration</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">min_missing_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">min_reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">min_question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">max_question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">max_reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">max_missing_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">percent_valid_required</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.screen_with_forward_moving_average", "modulename": "hec.timeseries", "qualname": "TimeSeries.screen_with_forward_moving_average", "kind": "function", "doc": "<p>Screens a time series - either this one or a copy of this one - setting values and/or quality codes where the value differ from\nthose of a forward moving averge of the time series by a specified amount.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>window (int):</strong>  The number of values to average over. See <a href=\"#TimeSeries.forward_moving_average\"><code>forward_moving_average()</code></a> for more info.</li>\n<li><strong>only_valid (bool):</strong>  Specifies whether to only average over windows where every value is\nvalid. See <a href=\"#TimeSeries.forward_moving_average\"><code>forward_moving_average()</code></a> for more info.</li>\n<li><strong>use_reduced (bool):</strong>  Specifies whether to allow averages using less than window number\nof values will be computed at the beginning of the times series. See <a href=\"#TimeSeries.forward_moving_average\"><code>forward_moving_average()</code></a> for more info.</li>\n<li><strong>diff_limit (float):</strong>  The maximum difference between a value and the value at the same time in the forward moving average\nthat will not be flagged as questionable, rejected, or missing. See <a href=\"#TimeSeries.forward_moving_average\"><code>forward_moving_average()</code></a> for more info.</li>\n<li><strong>failed_validity (str, optional):</strong>  Specifies the validity portion of the quality code for failed values\nMust be one of \"M\" (Missing), \"R\" (Rejected) or \"Q\" (Questionable). Values flagged as missing also have the value modified to math.nan.\nDefaults to \"M\".</li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to modify this time series (True) or a copy of it. Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If any of the following are true:\n<ul>\n<li>The time series has no data</li>\n<li>The window is invalid</li>\n<li><code>failed_validity</code> is not one of \"M\", \"R\", or \"Q\"</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The screened time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">window</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">only_valid</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">use_reduced</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>,</span><span class=\"param\">\t<span class=\"n\">diff_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">failed_validity</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;M&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.screen_with_value_change_rate", "modulename": "hec.timeseries", "qualname": "TimeSeries.screen_with_value_change_rate", "kind": "function", "doc": "<p>Screens a time series - either this one or a copy of this one - settting the quality codes to\n\"Okay\", \"Missing\", \"Questionable\" or \"Rejected\" based on specified criteria about the rate of change.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>min_reject_limit (float, optional):</strong>  The minimum change per minute from one value to the next (increasing or decreasing) that is not flagged as rejected. Defaults to <code>math.nan</code> (test disabled).</li>\n<li><strong>min_question_limit (float, optional):</strong>  The minimum non-rejected change per minute  from one value to the next (increasing or decreasing) that is not flagged as questioned. Defaults to <code>math.nan</code> (test disabled).</li>\n<li><strong>max_question_limit (float, optional):</strong>  The maximum non-rejected change per minute  from one value to the next (increasing or decreasing) that is not flagged as questioned. Defaults to <code>math.nan</code> (test disabled).</li>\n<li><strong>max_reject_limit (float, optional):</strong>  The maximum change per minute  from one value to the next (increasing or decreasing) that is not flagged as rejected. Defaults to <code>-ath.nan</code> (test disabled).</li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to modify and return this time series (True) or a copy of this\ntime series (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If this time series has no data, or if:\n<ul>\n<li><code>min_reject_limit</code> (if not <code>math.nan</code>) is not less than <code>min_question_limit</code> (if not <code>math.nan</code>) or <code>max_reject_limit</code> (if not <code>math.nan</code>)</li>\n<li><code>min_question_limit</code> (if not <code>math.nan</code>) is not less than <code>max_question_limit</code> (if not <code>math.nan</code>) or <code>max_reject_limit</code> (if not <code>math.nan</code>)</li>\n<li><code>max_question_limit</code> (if not <code>math.nan</code>) is not less thatn <code>max_reject_limit</code> (if not <code>math.nan</code>)</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The screened time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">min_reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">min_question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">max_question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">max_reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.screen_with_value_range", "modulename": "hec.timeseries", "qualname": "TimeSeries.screen_with_value_range", "kind": "function", "doc": "<p>Screens a time series - either this one or a copy of this one - settting the quality codes to\n\"Okay\", \"Missing\", \"Questionable\" or \"Rejected\" based on specified criteria about the value magnitudes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>min_reject_limit (float, optional):</strong>  The minimum value that is not flagged as rejected. Defaults to <code>-math.nan</code> (test disabled).</li>\n<li><strong>min_question_limit (float, optional):</strong>  The minium non-rejected value that is flagged as questionable. Defaults to <code>-math.nan</code> (test disabled).</li>\n<li><strong>max_question_limit (float, optional):</strong>  The maxium non-rejected value that is flagged as questionable. Defaults to <code>-math.nan</code> (test disabled).</li>\n<li><strong>max_reject_limit (float, optional):</strong>  The minimum value that is not flagged as rejected. Defaults to <code>-math.nan</code> (test disabled).</li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to modify and return this time series (True) or a copy of this\ntime series (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If this time series has no data, or if:\n<ul>\n<li><code>min_reject_limit</code> (if not <code>math.nan</code>) is not less than <code>min_question_limit</code> (if not <code>math.nan</code>) or <code>max_reject_limit</code> (if not <code>math.nan</code>)</li>\n<li><code>min_question_limit</code> (if not <code>math.nan</code>) is not less than <code>max_question_limit</code> (if not <code>math.nan</code>) or <code>max_reject_limit</code> (if not <code>math.nan</code>)</li>\n<li><code>max_question_limit</code> (if not <code>math.nan</code>) is not less than <code>max_reject_limit</code> (if not <code>math.nan</code>)</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The screened time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">min_reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">min_question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">max_question_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">max_reject_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.screen_with_value_range_or_change", "modulename": "hec.timeseries", "qualname": "TimeSeries.screen_with_value_range_or_change", "kind": "function", "doc": "<p>Screens a time series - either this one or a copy of this one - setting values and/or quality codes\nwhere the values are outside the specified range or differ more than the specified change.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>min_limit (float):</strong>  The minimum valid value. Values below this value will have their values and/or quality codes changed.\nDefaults to <code>math.nan</code> (test disabled).</li>\n<li><strong>max_limit (float):</strong>  The maximum valid value. Values above this value will have their values and/or quality codes changed.\nDefaults to <code>math.nan</code> (test disabled).</li>\n<li><strong>change_limit (float):</strong>  The maxium valid change from one value to the next. Values whose change (either increasing or decreasing)\nis greater that is will have their values and/or quality codes changed. Defaults to <code>math.nan</code> (test disabled).</li>\n<li><strong>replace_invalid_value (bool, optional):</strong>  Replace screened-out values with the specified value. Defaults to True.</li>\n<li><strong>invalid_value_replacement (float, optional):</strong>  The value to replace screen-out values with if <code>replace_invalid_value=True</code>.\nDefaults to <code>math.nan</code> (missing value).</li>\n<li><strong>invalid_validity (str, optional):</strong>  Specifies the validity component of the quality code for screened-out values.\nMay be \"M\" (Missing), \"Q\" (Questionable), or \"R\" (Rejected). Values flagged as missing also have the value modified to math.nan.\nDefaults to \"M\".</li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to modify and return this time series (True) or a copy of this\ntime series (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data or f <code>invalid_validity</code> (if specified) is not 'M', 'Q', or 'R'.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The screened time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">min_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">max_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">change_limit</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">replace_invalid_value</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">invalid_value_replacement</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">invalid_validity</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;M&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.select", "modulename": "hec.timeseries", "qualname": "TimeSeries.select", "kind": "function", "doc": "<p>Marks individual items in this object - or a copy of this object - as selected for pariticpation the next operation,\neither directly or by combining each item's current selected state with the result of a function.\nOn creation the selection is cleared (i.e., every item is selected)</p>\n\n<p>This object's selection_state property determines the selection of this object after the next operation:</p>\n\n<ul>\n<li><code>SelectionState.TRANSIENT</code>: (default) The selection will be cleared after the next operation.</li>\n<li><code>SelectionState.DURABLE</code>: The selection will remain until explicitly changed by a call to iselect()</li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>selection (Union[Select, int, slice, Callable[[TimeSeriesValue], bool]]):</strong>  One of the following:\n<ul>\n<li><code>Select.NONE</code>: Marks all items as unselected. Any <code>combination</code> is ignored.</li>\n<li><code>Select.ALL</code>: Marks all items as selected. Any <code>combination</code> is ignored.</li>\n<li><code>Select.INVERT</code>: Inverts the current selected state of each item. Any <code>combination</code> is ignored.</li>\n<li>integer: An integer offset from the beginning of the time series</li>\n<li><code>HecTime</code> object: single item matching specified time</li>\n<li>datetime object: single item matching specified time</li>\n<li>string convertible to HecTime object: : single item matching specified time</li>\n<li>slice: One or more items.\n<ul>\n<li>The start parameter (if specified) and stop parameter may be:\n<ul>\n<li>integers - offsets from the first value in the time series</li>\n<li><code>HecTime</code> objects</li>\n<li>datetime objects</li>\n<li>strings convertible to HecTime objects</li>\n</ul></li>\n<li>The step parameter must be an integer, if specified</li>\n</ul></li>\n<li>function: A function that takes a single <code>TimeSeriesValue</code> parameter and returns a bool result.\nAn item is marked as selected if and only if the result of the function is True for the item (when combined with the current state if necessary).</li>\n</ul></li>\n<li><strong>combination (Combine, optional):</strong>  Specifies how to combine the function result with an item's current selected state.\nUsed when <code>selection</code> is not one of eh <code>Select</code> values. Defaults to Combine.REPLACE.\n<ul>\n<li><code>Combine.REPLACE</code>: Current selected state of each item is ignored and is replaced by the result of the function.</li>\n<li><code>Combine.AND</code>: Current selected state of each item is ANDed with the result of the function to generate new selected state.</li>\n<li><code>Combine.OR</code>: Current selected state of each items is ORed with the result of the function to generate new selected state.</li>\n<li><code>Combine.XOR</code>: Current selected state of each item is XORed with the result of the function to generate new selected state.</li>\n</ul></li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to mark itmes in this object (True) or a copy of this object (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If this object has no data</li>\n<li><strong>ValueError:</strong>  If an invalid selection or combination is specified.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The marked object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">selection</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">Select</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeriesValue</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">combination</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">const</span><span class=\"o\">.</span><span class=\"n\">Combine</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">Combine</span><span class=\"o\">.</span><span class=\"n\">REPLACE</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.select_valid", "modulename": "hec.timeseries", "qualname": "TimeSeries.select_valid", "kind": "function", "doc": "<p>Marks individual items in this object - or a copy of this object - as selected for pariticpation the next operation based on whether\nthe items are valid. Items are valid unless any of the following are true:</p>\n\n<ul>\n<li>The quality is MISSING</li>\n<li>The quality is REJECTED</li>\n<li>The value is NaN</li>\n<li>The value is Infinite</li>\n</ul>\n\n<p>This selection replaces any other selection - if it is to be combined with other selection criteria\nit must be performed before the other criteria</p>\n\n<p>This object's selection_state property indicates/determines whether the selection is cleared af the next operation (via\nan automatic ts.select(Select.NONE)) or maintained until explicitly modified.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to mark itmes in this object (True) or a copy of this object (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If this object has no data</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The marked object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.selected", "modulename": "hec.timeseries", "qualname": "TimeSeries.selected", "kind": "variable", "doc": "<p>The current selection (empty if all items are selected)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": list[bool]"}, {"fullname": "hec.timeseries.TimeSeries.selection_state", "modulename": "hec.timeseries", "qualname": "TimeSeries.selection_state", "kind": "variable", "doc": "<p>The persistence state of selections in this object.</p>\n\n<p>The default selection_state of <a href=\"./const.html#SelectionState\">SelectionState.TRANSIENT</a></p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": hec.const.SelectionState"}, {"fullname": "hec.timeseries.TimeSeries.set_duration", "modulename": "hec.timeseries", "qualname": "TimeSeries.set_duration", "kind": "function", "doc": "<p>Sets the Duration for this time series, or a copy of it, and returns the modified time series</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[Duration, str]):</strong>  * Interval: The Duration object to use\n<ul>\n<li>str: The duration name</li>\n<li>int: The (actual or characteristic) number of minutes for the duration</li>\n</ul></li>\n<li><strong>in_place (bool):</strong>  Specifies whether to modify and return this time series (True) or a copy of this\ntime series. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modified time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">duration</span><span class=\"o\">.</span><span class=\"n\">Duration</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.set_interval", "modulename": "hec.timeseries", "qualname": "TimeSeries.set_interval", "kind": "function", "doc": "<p>Sets the interval for this time series, or a copy of it, and returns the modified time series</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[Interval, str]):</strong>  * Interval: The Interval object to use\n<ul>\n<li>str: The interval name</li>\n<li>int: The (actual or characteristic) number of minutes for the interval</li>\n</ul></li>\n<li><strong>in_place (bool):</strong>  Specifies whether to modify and return this time series (True) or a copy of this\ntime series. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modified time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.set_location", "modulename": "hec.timeseries", "qualname": "TimeSeries.set_location", "kind": "function", "doc": "<p>Sets the location for this time series or a copy of it and returns the modified time series</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[Location, str]):</strong>  * Location: The Location object to use\n<ul>\n<li>str: The location name (may be in the format &lt;<em>office</em>&gt;/&lt;<em>location</em>&gt; to set office)</li>\n</ul></li>\n<li><strong>in_place (bool):</strong>  Specifies whether to modify and return this time series (True) or a copy of this\ntime series. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modified time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">location</span><span class=\"o\">.</span><span class=\"n\">Location</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.set_parameter", "modulename": "hec.timeseries", "qualname": "TimeSeries.set_parameter", "kind": "function", "doc": "<p>Sets the parameter for this time series or a copy of it, and returns the modified time series</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[Parameter, str]):</strong>  * Parameter: The Parameter object to use\n<ul>\n<li>str: The parameter name - the unit will be set to the default English unit</li>\n</ul></li>\n<li><strong>in_place (bool):</strong>  Specifies whether to modify and return this time series (True) or a copy of this\ntime series. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modified time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">Parameter</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.set_parameter_type", "modulename": "hec.timeseries", "qualname": "TimeSeries.set_parameter_type", "kind": "function", "doc": "<p>Sets the parameter type for this time series, or a copy of it, and returns the modified time series</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[ParameterType, str]):</strong>  * ParameterType: The ParameterType object to use\n<ul>\n<li>str: The parameter type name</li>\n</ul></li>\n<li><strong>in_place (bool):</strong>  Specifies whether to modify and return this time series (True) or a copy of this\ntime series. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">ParameterType</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.set_protected", "modulename": "hec.timeseries", "qualname": "TimeSeries.set_protected", "kind": "function", "doc": "<p>Sets the quality protection bit of selected items of this time series - or a copy of it - and\nreturns the modified time series.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to modify and return this time series (True)\nor a copy of this time series (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modidified time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.set_unprotected", "modulename": "hec.timeseries", "qualname": "TimeSeries.set_unprotected", "kind": "function", "doc": "<p>Un-sets the quality protection bit of selected items of this time series - or a copy of it - and\nreturns the modified time series.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to modify and return this time series (True)\nor a copy of this time series (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modidified time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.set_quality", "modulename": "hec.timeseries", "qualname": "TimeSeries.set_quality", "kind": "function", "doc": "<p>Sets the quality of selected items of this object or a copy of this object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>quality:</strong>  Union[Quality, int]: The quality to set for selected items</li>\n<li><strong>in_place (bool):</strong>  Specifies whether to set the values in this object\n(True) or a copy of this object (False)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">quality</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.set_slice_stop_exclusive", "modulename": "hec.timeseries", "qualname": "TimeSeries.set_slice_stop_exclusive", "kind": "function", "doc": "<p>Set the default slicing behavior of new TimeSeries objects</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (bool, optional):</strong>  Defaults to True.\n<ul>\n<li><code>True</code>: python behavior (stop value is excluded)</li>\n<li><code>False</code>: DataFrame behavior (stop value is included)</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.set_slice_stop_inclusive", "modulename": "hec.timeseries", "qualname": "TimeSeries.set_slice_stop_inclusive", "kind": "function", "doc": "<p>Set the default slicing behavior of new TimeSeries objects</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (bool, optional):</strong>  Defaults to True.\n<ul>\n<li><code>True</code>: DataFrame behavior (stop value is included)</li>\n<li><code>False</code>: python behavior (stop value is excluded)</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.set_unit", "modulename": "hec.timeseries", "qualname": "TimeSeries.set_unit", "kind": "function", "doc": "<p>Sets the parameter unit for this time series, or a copy of it, and returns the modified time series.</p>\n\n<p><strong>NOTE</strong>: This does <em>not</em> modify any data values. Use the <a href=\"#TimeSeries.ito\">ito()</a> method\nto modify data, which also sets the unit.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[Unit, str]):</strong>  <ul>\n<li>Unit: The Unit object or name to use</li>\n<li>str: The unit name</li>\n</ul></li>\n\n<p><li><strong>in_place (bool):</strong>  Specifies whether to modify and return this time series (True) or a copy of this\ntime series. Defaults to False.</li></p>\n\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n\n<p><p>TimeSeries: The modified time series</p>\n</blockquote></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.set_value", "modulename": "hec.timeseries", "qualname": "TimeSeries.set_value", "kind": "function", "doc": "<p>Sets the value of selected items of this object or a copy of this object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (float):</strong>  The value to set for selected items</li>\n<li><strong>in_place (bool):</strong>  Specifies whether to set the values in this object\n(True) or a copy of this object (False)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">float</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.set_value_quality", "modulename": "hec.timeseries", "qualname": "TimeSeries.set_value_quality", "kind": "function", "doc": "<p>Sets the value and quality of selected items of this object or a copy of this object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (float):</strong>  The value to set for selected items</li>\n<li><strong>quality:</strong>  Union[Quality, int]: The quality to set for selected items</li>\n<li><strong>in_place (bool):</strong>  Specifies whether to set the values in this object\n(True) or a copy of this object (False)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">float</span>,</span><span class=\"param\">\t<span class=\"n\">quality</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"o\">.</span><span class=\"n\">Quality</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.set_vertical_datum_info", "modulename": "hec.timeseries", "qualname": "TimeSeries.set_vertical_datum_info", "kind": "function", "doc": "<p>Sets the vertical datum info for this time series, or a copy  of it, and returns the modified time series</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Union[str, dict[str, Any]]):</strong>  <ul>\n<li>str: the vertical datum info as an XML string\n<li>dict: the vertical datum info as a dictionary</li>\n</ul></li>\n\n<p><li><strong>in_place (bool):</strong>  Specifies whether to modify and return this time series (True) or a copy of this\ntime series. Defaults to False.</li></p>\n\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n\n<p><li><strong>TimeSeriesException:</strong>  If the base parameter is not \"Elev\"</li></p>\n\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n\n<p><p>TimeSeries: The modified time series</p>\n</blockquote></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.slice_stop_exclusive", "modulename": "hec.timeseries", "qualname": "TimeSeries.slice_stop_exclusive", "kind": "variable", "doc": "<p>Whether the <code>stop</code> portion of <code>[start:stop]</code> slicing is exclusive for this object.</p>\n\n<ul>\n<li>If <code>True</code>, the slicing TimeSeries objects follows Python rules, where <code>stop</code>\nspecifies the lowest index not included.</li>\n<li>If <code>False</code>, the slicing of TimeSeries objects follows pandas.DataFrame rules,\nwhere <code>stop</code> specifies the highest index included.</li>\n</ul>\n\n<p>The default value is determined by the class state, which defaults to <code>True</code>, but\ncan be set by calling <a href=\"#TimeSeries.set_slice_stop_exclusive\">set_slice_stop_exclusive()</a> or\n<a href=\"#TimeSeries.set_slice_stop_inclusive\">set_slice_stop_inclusive()</a> before creating a\nTimeSeries object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.timeseries.TimeSeries.snap_to_regular", "modulename": "hec.timeseries", "qualname": "TimeSeries.snap_to_regular", "kind": "function", "doc": "<p>Modifies and returns a time series (either this one or a copy of this one) by snapping values to a specified regular interval\n(with an optional interval offset) and setting the interval to the one specified.</p>\n\n<ul>\n<li>Only values within the <code>forward</code> and <code>backward</code> time spans around the new interval/offset will be included in the modified time series</li>\n<li>If multiple values in the source time series are within the <code>forward</code> and <code>backward</code> time spans:\n<ul>\n<li>If some values are protected and others unprotected, the protected value closest to the snapping time is used.</li>\n<li>If all or none of the values are protected:\n<ul>\n<li>If some values are valid and others invalid the valid value closest to the snapping time is used.</li>\n<li>If all or none of the values are valid, the value closest to the snapping time is used.</li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p>This method does not respect selections. To snap based on a selection, first use the <a href=\"#TimeSeries.filter\"><code>filter()</code></a> or\n<a href=\"#TimeSeries.ifilter\"><code>ifilter()</code></a> method to genrate a time series from the selected values.</p>\n\n<p>The resulting time series is always a regular time series, but if the time series has an attached time zone and <code>interval</code> is an\n<a href=\"./interval.html#Interval\"><code>Interval</code></a> object with the <a href=\"./interval.html#Interval.is_local_regular\"><code>is_local_regular</code></a> property of True, then the resulting time series will be a Local Regular Time Series (LRTS).</p>\n\n<p>The resulting time series will be a collapsed time series, with no values at times for which no values in the original time series\nwere within the <code>forward</code> and <code>backward</code> time spans. The <a href=\"#TimeSeries.expand\"><code>expand()</code></a> method may be used to expand the collapsed time series.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>interval (Union[Interval, str]):</strong>  The new interval</li>\n<li><strong>offset (Optional[Union[TimeSpan, timedelta, str]]):</strong>  The offset into the interval to snap the vlues to. Defaults to None.</li>\n<li><strong>backward (Optional[Union[TimeSpan, timedelta, str]]):</strong>  The time span prior to the interval/offset to accept values from.\nDefaults to None.</li>\n<li><strong>forward (Optional[Union[TimeSpan, timedelta, str]]):</strong>  The time span after the interval/offset to accept values from.\nDefaults to None.</li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to modify this time series (True) or a copy of it (False). Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the specified interval is not a valid regular interval for the context of the time series. E.g., an\nirregular interval or a DSS-only regluar interval is specified for a CWMS time series</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modified time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">backward</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">forward</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.time_derivative", "modulename": "hec.timeseries", "qualname": "TimeSeries.time_derivative", "kind": "function", "doc": "<p>Returns a time series whose values are the differences of successive values in this time series divided\nby the number of minutes between the times of the values.</p>\n\n<p>A missing value at a specific time in the source time series will cause the value at that\nand the next time in the result time sereies to be missing.</p>\n\n<p>If a selection is present, all non-selected items are set to missing before the\naccumulation is computed. They remain missing in the retuned time series.</p>\n\n<p><strong>Restrictions</strong>\n    * May be performed only on time series with differentiable base parameters. Use <a href=\"parameter.html#Parameter.differentiable_base_parameters\">Parameter.differentiable_base_parameters()</a> to\n      list the accumulatable base parameters.</p>\n\n<p>See <a href=\"parameter.html#base_parameter_definitions\">base_parameter_definitions</a> for information on base parameters and their conversions.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>in_place (bool, optional):</strong>  If True, this object is modified and retured, otherwise\na copy of this object is modified and returned.. Defaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the time series has no data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The time series of time-based differences</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.time_zone", "modulename": "hec.timeseries", "qualname": "TimeSeries.time_zone", "kind": "variable", "doc": "<p>The time zone of the data</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.timeseries.TimeSeries.times", "modulename": "hec.timeseries", "qualname": "TimeSeries.times", "kind": "variable", "doc": "<p>The times as a list of strings (empty if there is no data). Items are formatted as yyyy&#8209;mm&#8209;dd&nbsp;hh:mm:ss([+|&#8209;]hh:mm)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": list[str]"}, {"fullname": "hec.timeseries.TimeSeries.to", "modulename": "hec.timeseries", "qualname": "TimeSeries.to", "kind": "function", "doc": "<p>Converts this object - or a copy of this object - to another unit, parameter, or vertical datum</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit_parameter_or_datum (Union[str, Unit, Parameter]):</strong>  The unit, parameter or vertical datum to convert to</li>\n<li><strong>in_place (bool, optional):</strong>  Whether to convert this object (True) or a copy of this object (False).\nDefaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If setting the vertical datum on a non Elev parameter or an Elev parameter\nwithout vertical datum information</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The converted object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">unit_parameter_or_datum</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">Parameter</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.to_irregular", "modulename": "hec.timeseries", "qualname": "TimeSeries.to_irregular", "kind": "function", "doc": "<p>Sets a time series (either this one or a copy of this one) to a specified irregular interval, and returns\nthe modified time series. The times of the data values are not changed.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>interval (Union[Interval, str]):</strong>  The irregular interval to set the time series to.</li>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to modify this time series (True) or a copy of it (False).\nDefaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSeriesException:</strong>  If the specified interval is not a valid irregular interval for the\ncontext of the time series (e.g., a regular interval or a DSS-only irregular interval\nfor a CWMS time series)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The modified time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.trim", "modulename": "hec.timeseries", "qualname": "TimeSeries.trim", "kind": "function", "doc": "<p>Trims a regular time series (either this one or a copy of this one), removing all missing values from the beginning and\nend of the time series unless they are either protected or marked as part of the current selection.</p>\n\n<p>Irregular time series (including pseudo-regular time series) are not affected.</p>\n\n<p>Does not alter any selection, even if selection state is <code>SelectionState.TRANSIENT</code>. Selected items remain\nselected after trim even though their location in the data may change.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>in_place (bool, optional):</strong>  Specifies whether to trim this time series (True) or a copy of this time series (False).</li>\n<li>Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TimeSeries: The trimmed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">TimeSeries</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timeseries.TimeSeries.tsv", "modulename": "hec.timeseries", "qualname": "TimeSeries.tsv", "kind": "variable", "doc": "<p>The times, values, and qualities as a list of TimeSeriesValue objects (empty if there is no data)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": list[hec.timeseries.TimeSeriesValue]"}, {"fullname": "hec.timeseries.TimeSeries.unit", "modulename": "hec.timeseries", "qualname": "TimeSeries.unit", "kind": "variable", "doc": "<p>The parameter unit object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.timeseries.TimeSeries.values", "modulename": "hec.timeseries", "qualname": "TimeSeries.values", "kind": "variable", "doc": "<p>The values as a list of floats (empty if there is no data)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": list[float]"}, {"fullname": "hec.timeseries.TimeSeries.version", "modulename": "hec.timeseries", "qualname": "TimeSeries.version", "kind": "variable", "doc": "<p>The version (HEC-DSS F pathname part)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.timeseries.TimeSeries.version_time", "modulename": "hec.timeseries", "qualname": "TimeSeries.version_time", "kind": "variable", "doc": "<p>The version date/time</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[hec.hectime.HecTime]"}, {"fullname": "hec.timeseries.TimeSeries.vertical_datum_info", "modulename": "hec.timeseries", "qualname": "TimeSeries.vertical_datum_info", "kind": "variable", "doc": "<p>The vertical datum info object or None if not set</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[hec.parameter.ElevParameter._VerticalDatumInfo]"}, {"fullname": "hec.timeseries.TimeSeries.vertical_datum_info_dict", "modulename": "hec.timeseries", "qualname": "TimeSeries.vertical_datum_info_dict", "kind": "variable", "doc": "<p>The vertical datum info as a dictionary or None if not set</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[dict[str, Any]]"}, {"fullname": "hec.timeseries.TimeSeries.vertical_datum_info_xml", "modulename": "hec.timeseries", "qualname": "TimeSeries.vertical_datum_info_xml", "kind": "variable", "doc": "<p>The vertical datum info as an XML string or None if not set</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.timeseries.TimeSeries.watershed", "modulename": "hec.timeseries", "qualname": "TimeSeries.watershed", "kind": "variable", "doc": "<p>The watershed (DSS A pathname part)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.timespan", "modulename": "hec.timespan", "kind": "module", "doc": "<p>Provides basic time span functionality.\nLike timedelta, but with calendar capabilities and without sub-second resolution.</p>\n"}, {"fullname": "hec.timespan.TimeSpanException", "modulename": "hec.timespan", "qualname": "TimeSpanException", "kind": "class", "doc": "<p>Exception specific to TimeSpan operations</p>\n", "bases": "builtins.Exception"}, {"fullname": "hec.timespan.TimeSpan", "modulename": "hec.timespan", "qualname": "TimeSpan", "kind": "class", "doc": "<p>Class to provide generic timespan capabilities that includes both calendar-based and non-calendar-based\nfunctionality. Internal fields are:</p>\n\n<ul>\n<li>years</li>\n<li>months</li>\n<li>days</li>\n<li>hours</li>\n<li>minutes</li>\n<li>seconds</li>\n</ul>\n\n<p><strong>Comparison/Contrast with <code>timedelta</code></strong></p>\n\n<pre>\n<table>\n<tr><th>timedelta</th><th>TimeSpan</th></tr>\n<tr><td><b>Does not </b> support calendar-based\noperations</td><td><b>Does</b> support calendar-based operations</td></tr>\n<tr><td><b>Does</b> have sub-second resolution</td><td><b>Does not</b> have sub-second resolution</td></tr>\n<tr><td>Can <b>always</b> be combined/compared\nwith other timedelta objects</td><td>\n<ul>\n<li>Can <b>always</b> be combined with other TimeSpan\nobjects</li>\n<li>Can be combined with timedelta objects <b>if</b> <em>years</em>\nand <em>months</em> are both zero</li>\n<li>Can be compared with other TimeSpan objects <b>if</b> <em>days</em>\nvalues don't conflict with <em>years</em> or <em>months</em> values</li>\n<li>Can be compared with timedelta objects <b>if</b> <em>years</em>\nand <em>months</em> are both zero</li>\n</ul>\n</td></tr>\n</table>\n</pre>\n\n<p><strong>Fractional Months</strong></p>\n\n<p>Since HEC-DSS supports intervals of 1/3 and 1/2 month, the month portion of a <code>TimeSpan</code> object may be an integer\nor a <code>Fraction</code> object from the fractions package. Rules for using fractions are:</p>\n\n<ul>\n<li>Fractions can be used for the month portion only</li>\n<li><code>n/2</code> and <code>n/3</code> are the only fractions allowed</li>\n<li>Fractions can be specified as:\n<ul>\n<li>mathimatical expression (<code>1/3</code>)</li>\n<li>Fraction object (<code>Fraction(1,3)</code>)</li>\n<li>string (<code>\"1/3\"</code>)</li>\n</ul></li>\n</ul>\n\n<p><strong>Uninitialized Objects</strong></p>\n\n<p>Objects constructed without any initializer (e.g., <code>ts = TimeSpan()</code>) are initialized to be instantaneous (all values are zero).</p>\n\n<p><a id=\"string_representation\"></a>\n<strong>String Representation</strong></p>\n\n<p>The <code>repr</code> function returns: <pre>TimeSpan([<em>years</em>, <em>months</em>, <em>days</em>, <em>hours</em>, <em>minutes</em>, <em>seconds</em>])</pre>\nThe <code>str</code> function returns one or two ISO 8601 duration strings or <em>pseudo-</em>duration strings if the months value is a fraction.</p>\n\n<ul>\n<li>If the object has both calendar- and non-calendar-based (non-zero) values, and the signs of those portions are different,\nthe result will be one duration string for the calendar portion and one for the non-calendar portion, separated by a comma.</li>\n<li>Otherwise the result will be a single duration string.</li>\n</ul>\n\n<pre>\nPT0S\nP1Y2M3DT4H5M\n-P1Y2M3DT4H5M\nP1Y2M,-P3DT4H5M\n-P1Y2M,P3DT4H5M\nP3Y1/3M\n-P2/3M\n</pre>\n"}, {"fullname": "hec.timespan.TimeSpan.__init__", "modulename": "hec.timespan", "qualname": "TimeSpan.__init__", "kind": "function", "doc": "<p>Initialiazes the object at construction.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>Default</strong>\n<ul>\n<li><strong><code>TimeSpan()</code></strong> Initializes to default value of instantaneous (all values equal zero)</li>\n</ul></li>\n<li><p><strong>Positional</strong></p>\n\n<ul>\n<li><strong><code>TimeSpan(</code><em><code>timedelta</code></em><code>)</code></strong></li>\n<li><strong><code>TimeSpan(</code><em><code>string</code></em><code>)</code></strong> where <em>string</em> is:\n<ul>\n<li>an integer as a string</li>\n<li>one or two ISO 8601 strings or <em>pseudo-</em>duration strings as discussed under\n<a href=\"#string_representation\"><strong>String Representation</strong></a></li>\n</ul></li>\n<li><strong><code>TimeSpan(</code><em><code>list</code></em><code>)</code></strong> where <em>list</em> contains 1..6 values interpreted as years,\nmonths, days, hours, minutes, and seconds. Values must be convertable via the\n<code>int()</code> function except for the second value, which may also be convertable via the <code>Fraction()</code> constructor.</li>\n<li><strong><code>TimeSpan(</code><em><code>tuple</code></em><code>)</code></strong> where <em>tuple</em> contains 1..6 values interpreted as years,\nmonths, days, hours, minutes, and seconds. Values must be convertable via the\n<code>int()</code> function except for the second value, which may also be convertable via the <code>Fraction()</code> constructor.</li>\n<li><strong><code>TimeSpan(</code><em><code>years</code></em><code>[,</code><em><code>months</code></em><code>[,</code><em><code>days</code></em><code>[,</code><em><code>hours</code></em><code>[,</code><em><code>minutes</code></em><code>[,</code><em><code>seconds</code></em><code>]]]]])</code></strong>\nAll values must be convertable via the <code>int()</code> function except for <em>months</em>,  which may\nalso be convertable via the <code>Fraction()</code> constructor.</li>\n</ul></li>\n<li><p><strong>Keyword</strong>:<br></p>\n\n<ul>\n<li><strong><code>TimeSpan([years=</code><em><code>years</code></em><code>,] [months=</code><em><code>months</code></em><code>,] [days=</code><em><code>days</code></em><code>,] [hours=</code><em><code>hours</code></em><code>,] [minutes=</code><em><code>minutes</code></em><code>,] [seconds=</code><em><code>seconds</code></em><code>])</code></strong>\nAll values must be convertable via the <code>int()</code> function except for <em>months</em>,  which may\nalso be convertable via the <code>Fraction()</code> constructor.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSpanException:</strong>  if invalid initializers are specified</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "hec.timespan.TimeSpan.set", "modulename": "hec.timespan", "qualname": "TimeSpan.set", "kind": "function", "doc": "<p>Initialiazes or re-initializes the object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><p><strong>Positional</strong></p>\n\n<ul>\n<li><strong><code>set(</code><em><code>timedelta</code></em><code>)</code></strong></li>\n<li><strong><code>set(</code><em><code>string</code></em><code>)</code></strong> where <em>string</em> is:\n<ul>\n<li>an integer as a string</li>\n<li>one or two ISO 8601 strings or <em>pseudo-</em>duration strings as discussed under\n<a href=\"#string_representation\"><strong>String Representation</strong></a></li>\n</ul></li>\n<li><strong><code>set(</code><em><code>list</code></em><code>)</code></strong> where <em>list</em> contains 1..6 values interpreted as years,\nmonths, days, hours, minutes, and seconds. Values must be convertable via the\n<code>int()</code> function except for the second value, which may also be convertable via the <code>Fraction()</code> constructor.</li>\n<li><strong><code>set(</code><em><code>tuple</code></em><code>)</code></strong> where <em>tuple</em> contains 1..6 values interpreted as years,\nmonths, days, hours, minutes, and seconds. Values must be convertable via the\n<code>int()</code> function except for the second value, which may also be convertable via the <code>Fraction()</code> constructor.</li>\n<li><strong><code>set(</code><em><code>years</code></em><code>[,</code><em><code>months</code></em><code>[,</code><em><code>days</code></em><code>[,</code><em><code>hours</code></em><code>[,</code><em><code>minutes</code></em><code>[,</code><em><code>seconds</code></em><code>]]]]])</code></strong>\nAll values must be convertable via the <code>int()</code> function except for <em>months</em>,  which may\nalso be convertable via the <code>Fraction()</code> constructor.</li>\n</ul></li>\n<li><p><strong>Keyword</strong>:<br></p>\n\n<ul>\n<li><strong><code>set([years=</code><em><code>years</code></em><code>], [months=</code><em><code>months</code></em><code>], [days=</code><em><code>days</code></em><code>], [hours=</code><em><code>hours</code></em><code>], [minutes=</code><em><code>minutes</code></em><code>], [seconds=</code><em><code>seconds</code></em><code>])</code></strong>\nAll values must be convertable via the <code>int()</code> function except for <em>months</em>,  which may\nalso be convertable via the <code>Fraction()</code> constructor.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSpanException:</strong>  if invalid initializers are specified</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timespan.TimeSpan.timedelta", "modulename": "hec.timespan", "qualname": "TimeSpan.timedelta", "kind": "function", "doc": "<p>Returns an equivalent <code>timedelta</code> object</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSpanException:</strong>  if the object contains any calendar-based values</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>timedelta: The equivalent <code>timedelta</code> object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timespan.TimeSpan.total_seconds", "modulename": "hec.timespan", "qualname": "TimeSpan.total_seconds", "kind": "function", "doc": "<p>Returns the total number of seconds represented by this object</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSpanException:</strong>  if the object contains any calendar-based values</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The total number of seconds</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timespan.TimeSpan.values", "modulename": "hec.timespan", "qualname": "TimeSpan.values", "kind": "variable", "doc": "<p>A list of years, months, days, hours, minutes, and seconds in this time span.\nOn read, all values will be normalized:</p>\n\n<ul>\n<li>years and days are unconstrained in magnitude</li>\n<li>integer months will be in the range of \u00b10..12</li>\n<li>fractional months normalized</li>\n<li>hours will be in the range of \u00b10..23</li>\n<li>minutes and seconds will be in the range \u00b10..59</li>\n<li>calendar-based values (years, months) will have the same sign if not zero</li>\n<li>non-calendar-based values (days, hours, minutes, seconds) will have the same sign if not zero</li>\n<li>calendar- and non-calendar-based values may have different signs</li>\n</ul>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[list[Union[int, fractions.Fraction]]]"}, {"fullname": "hec.unit", "modulename": "hec.unit", "kind": "module", "doc": "<p>Module for unit definitions and conversions.</p>\n\n<p>Uses the <a href=\"https://pint.readthedocs.io\">Pint unit library</a> for operations.\nFor any unit some or all of the following exist:</p>\n\n<ul>\n<li><strong>Pint unit:</strong> The Pint Unit object or a valid name or definition used to create a Pint Unit object</li>\n<li><strong>Unit name:</strong> The local name used to refer to the Pint unit</li>\n<li><strong>Unit aliases:</strong> (Optional) Aliases for the unit name\nAll Pint Units may be defined in a Pint unit registry with specified names. However those\nnames (but not the definitions) must adhere to Python identifier rules which elimiates many\ncommon unit names. Although non-identifier aliases can (sometimes) be associated with the\nunit definitions, there is no mechanism to output the units in those aliases. If a Pint Unit\ndoes not have a name, its definition is output in its place. For this reason,unit names and\naliaes are maintained in dictionaries separate from the Pint library.<br></li>\n</ul>\n\n<p><strong>Example 1:</strong> Unit name is not a valid Python identifier but is the same as the Pint Unit definition</p>\n\n<ul>\n<li>Unit name = <code>g/l</code></li>\n<li>Pint unit definition = <code>g/l</code></li>\n<li>Unit aliases =\n<ul>\n<li><code>gm/l</code></li>\n<li><code>grams per liter</code></li>\n<li><code>grams/liter</code></li>\n</ul></li>\n</ul>\n\n<pre><code>&gt;&gt;&gt; from hec import unit\n&gt;&gt;&gt; g_per_l_unit = unit.get_pint_unit('g/l')\n&gt;&gt;&gt; print(repr(g_per_l_unit))\n&lt;Unit('gram / liter')&gt;\n&gt;&gt;&gt; print(g_per_l_unit)\ngram / liter\n&gt;&gt;&gt; print(f\"{g_per_l_unit:D}\")\ngram / liter\n&gt;&gt;&gt; print(f\"{g_per_l_unit:~D}\")\ng / l\n&gt;&gt;&gt; print(f\"{g_per_l_unit:C}\")\ngram/liter\n&gt;&gt;&gt; print(f\"{g_per_l_unit:~C}\")\ng/l\n&gt;&gt;&gt; print(f\"{g_per_l_unit:P}\")\ngram/liter\n&gt;&gt;&gt; print(f\"{g_per_l_unit:~P}\")\ng/l\n&gt;&gt;&gt; print(unit.get_unit_name(g_per_l_unit))\ng/l\n&gt;&gt;&gt;\n</code></pre>\n\n<p><strong>Example 2:</strong> Unit name is a valid Python identifier but is not the same as the Pint Unit definition</p>\n\n<ul>\n<li>Pint unit definition = <code>ft**3/s</code></li>\n<li>Unit name = <code>cfs</code></li>\n<li>Unit aliases =\n<ul>\n<li><code>CFS</code></li>\n<li><code>FT3/S</code></li>\n<li><code>FT3/SEC</code></li>\n<li><code>cu-ft/sec</code></li>\n<li><code>cuft/sec</code></li>\n<li><code>ft3/s</code></li>\n<li><code>ft3/sec</code></li>\n<li><code>ft^3/s</code></li>\n</ul></li>\n</ul>\n\n<pre><code>&gt;&gt;&gt; from hec import unit\n&gt;&gt;&gt; cfs_unit = unit.get_pint_unit(\"CFS\")\n&gt;&gt;&gt; print(repr(cfs_unit))\n&lt;Unit('foot ** 3 / second')&gt;\n&gt;&gt;&gt; print(cfs_unit)\nfoot ** 3 / second\n&gt;&gt;&gt; print(f\"{cfs_unit:D}\")\nfoot ** 3 / second\n&gt;&gt;&gt; print(f\"{cfs_unit:~D}\")\nft ** 3 / s\n&gt;&gt;&gt; print(f\"{cfs_unit:C}\")\nfoot**3/second\n&gt;&gt;&gt; print(f\"{cfs_unit:~C}\")\nft**3/s\n&gt;&gt;&gt; print(f\"{cfs_unit:P}\")\nfoot\u00b3/second\n&gt;&gt;&gt; print(f\"{cfs_unit:~P}\")\nft\u00b3/s\n&gt;&gt;&gt; print(unit.get_unit_name(cfs_unit))\ncfs\n&gt;&gt;&gt;\n</code></pre>\n"}, {"fullname": "hec.unit.convert_units", "modulename": "hec.unit", "qualname": "convert_units", "kind": "function", "doc": "<p>Converts an object from one unit to another. If the object is non-convertable\nit is returned unchanged.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>to_convert (Any):</strong>  The object to convert. May be:\n<ul>\n<li>integer</li>\n<li>float</li>\n<li>string</li>\n<li>Pint Quantity</li>\n<li>list</li>\n<li>tuple</li>\n<li>cwms.cwms_types.Data</li>\n</ul></li>\n<li><strong>from_unit (Union[pint.Unit, str]):</strong>  The unit to convert from. May be:\n<ul>\n<li>a unit name</li>\n<li>a unit alias</li>\n<li>a valid Pint unit string</li>\n<li>a Pint unit</li>\n</ul></li>\n<li><strong>to_unit (Union[pint.Unit, str]):</strong>  The unit to conver to. May be:\n<ul>\n<li>a unit name</li>\n<li>a unit alias</li>\n<li>a valid Pint unit string</li>\n<li>a Pint unit</li>\n</ul></li>\n<li><strong>in_place (bool):</strong>  for list and cwms.cwms_types.Data types, specifies whether to convert the object\nin-place. Ignored for all other data types. If True, the converted object is returned.\nIf False, a converted copy is returned. Defaults to False</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>UnitException:</strong>  If:\n<ul>\n<li>A string is passed for one of the units that is not:\n<ul>\n<li>a unit name</li>\n<li>a unit alias</li>\n<li>a valid Pint unit string</li>\n</ul></li>\n<li>The object to convert is Pint quantity or cwms.cwms_types.Data object whose\nunit is not the same as the <code>from_unit</code>.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Any: if <code>to_convert</code> is:</p>\n  \n  <ul>\n  <li><strong>integer</strong> or <strong>float:</strong> a <em>float</em> is returned</li>\n  <li><strong>Pint Quantity:</strong>\n  <ul>\n  <li>if <code>from_unit</code> is the same as the unit of <code>to_convert</code>, a converted <em>Pint Quantity</em> is returned</li>\n  <li>if <code>from_unit</code> is not the same as the unit of <code>to_convert</code>, a <code>UnitException</code> is raised</li>\n  </ul></li>\n  <li><strong>string:</strong> a <em>string</em> is returned\n  <ul>\n  <li>if the string is numeric the returned string will be a string of the converted value</li>\n  <li>if the string is not numeric, it is returned unchanged</li>\n  </ul></li>\n  <li><strong>list:</strong>, a <em>list</em> returned with each item either converted or not as specified\n  in the rules above. If <code>in_place</code> == <code>True</code>, the return value can be ignored if desired.</li>\n  <li><strong>tuple:</strong>, a <em>tuple</em> returned with each item either converted or not as specified\n  in the rules above. If in_place == True, the return value can be ignored if desired.</li>\n  <li><strong>cwms.type.Data:</strong>, a <em>cwms.type.Data</em> object is returned. If <code>in_place</code> == <code>True</code>, the return\n  value can be ignored if desired.</li>\n  </ul>\n  \n  <p>Otherwise <code>to_convert</code> is returned unchanged</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">to_convert</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">from_unit</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">to_unit</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.get_compatible_base_parameters", "modulename": "hec.unit", "qualname": "get_compatible_base_parameters", "kind": "function", "doc": "<p>Returns a list of base parameter names that are compatible with the specified unit</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit (Union[str, pint.Unit]):</strong>  The unit object or unit name to retrieve the base parameter names for</li>\n<li><strong>parameter_context (str):</strong>  The parameter context, defaults to \"CWMS\" (currently only valid context)</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>UnitException:</strong>  If an invalid context is specified</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: The compatible base parameter names</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">unit</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">parameter_context</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;CWMS&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.get_compatible_units", "modulename": "hec.unit", "qualname": "get_compatible_units", "kind": "function", "doc": "<p>Returns a list of units names that are convertable to/from the specified unit</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit (Union[str, pint.Unit]):</strong>  The unit to get compatible units for</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: The list of compatible unit names</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unit</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.get_pint_unit", "modulename": "hec.unit", "qualname": "get_pint_unit", "kind": "function", "doc": "<p>Gets the Pint unit object for a specified unit string</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit (str):</strong>  The specified unit. May be a unit name, unit alias, or a Pint unit string</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>UnitException:</strong>  If the specified unit is not a valid unit name, unit alias, or Pint unit string</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pint.Unit: The Pint unit object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unit</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.get_unit_aliases", "modulename": "hec.unit", "qualname": "get_unit_aliases", "kind": "function", "doc": "<p>Returns a list of aliases for the specified unit</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit (Union[str, pint.Unit]):</strong>  A unit name, Pint Unit definition, or Pint Unit object</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError:</strong>  if the specified unit is not an existing unit name or a Pint Unit\n(definition or object) referenced by a unit_name</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: A list of aliases for the specified unit</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unit</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.get_unit_context", "modulename": "hec.unit", "qualname": "get_unit_context", "kind": "function", "doc": "<p>Returns the Pint unit registry context.\nSee <a href=\"https://pint.readthedocs.io\">Pint documentation</a> for more details.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pint.facets.context.objects.Context: The unit registry context</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">facets</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">Context</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.get_unit_name", "modulename": "hec.unit", "qualname": "get_unit_name", "kind": "function", "doc": "<p>Returns the unit name of unit name, unit alias, or Pint unit (string or object)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name_alias_or_unit (Union[str, pint.Unit]):</strong>  A unit name, unit alias or a Pint unit</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError:</strong>  If no unit name exists for the unit alias or Pint unit</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The unit_name</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name_alias_or_unit</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.get_unit_names_for_unit_system", "modulename": "hec.unit", "qualname": "get_unit_names_for_unit_system", "kind": "function", "doc": "<p>Returns a list of unit names for the specified unit system</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit_system (Optional[str]):</strong>  \"EN\", \"SI\", or None</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError:</strong>  if the specified unit system is not \"EN\", \"SI\", or None</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: A list of English unit names, Syst\u00e8me International unit names,\n      or unit names used by both (if <code>unit_system</code> is None)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unit_system</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.get_unit_registry", "modulename": "hec.unit", "qualname": "get_unit_registry", "kind": "function", "doc": "<p>Returns the Pint unit registry. Pint doesn't share unit information between\nregistries so this registry must be used for any modification to the Pint behavior.\nSee <a href=\"https://pint.readthedocs.io\">Pint documentation</a> for more details.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pint.registry.UnitRegistry: the Pint unit registry currently in use</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">UnitRegistry</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.get_unit_system", "modulename": "hec.unit", "qualname": "get_unit_system", "kind": "function", "doc": "<p>Returns the unit system of a unit name or unit alias</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit (str):</strong>  A unit name or unit alias</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError:</strong>  if the specified unit is not an existing unit name or a Pint Unit\n(definition or object) referenced by a unit_name</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[str]: \"EN\" if English, \"SI\" if Syst\u00e8me International, or None if both</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unit</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.UnitException", "modulename": "hec.unit", "qualname": "UnitException", "kind": "class", "doc": "<p>Exception specific to Unit operations</p>\n", "bases": "builtins.Exception"}, {"fullname": "hec.unit.UnitQuantity", "modulename": "hec.unit", "qualname": "UnitQuantity", "kind": "class", "doc": "<p>Class for scalar values with units.</p>\n\n<p>Thinly wraps pint.UnitRegistry.Quantity, but allows non-identifier unit names to be\nassociated with quantities. Can be used with mathematical, comparison, and conversion\noperators in conjuction with pint.UnitRegistry.Quantity objects and scalars (ints and floats).</p>\n"}, {"fullname": "hec.unit.UnitQuantity.__init__", "modulename": "hec.unit", "qualname": "UnitQuantity.__init__", "kind": "function", "doc": "<p>Creates a UnitQuantity object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>One argument:</strong> <br>\n<ul>\n<li><code>str</code>: Either:\n<ul>\n<li>A valid string for <a href=\"https://pint.readthedocs.io/en/stable/user/defining-quantities.html\">Pint string parsing</a></li>\n<li>A unit name (quantity will default to 1.0)</li>\n</ul></li>\n<li><code>UnitQuantity</code>: Another UnitQuantity object</li>\n<li><code>pint.Quantity</code>: A Pint Quantity object</li>\n</ul></li>\n<li><strong>Two arguments:</strong> <br>\n<ul>\n<li>args[0] (<code>Union[int, float, Fraction]</code>): The magnitude of the quantity</li>\n<li>args[1] (<code>Union[str, pint.Unit</code>): The uni of the quantity</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>UnitException:</strong>  if in valid arguments are specified</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "hec.unit.UnitQuantity.dimensionality", "modulename": "hec.unit", "qualname": "UnitQuantity.dimensionality", "kind": "variable", "doc": "<p>The dimensionality of the object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Only</p>\n</blockquote>\n", "annotation": ": pint.util.UnitsContainer"}, {"fullname": "hec.unit.UnitQuantity.get_compatible_base_parameters", "modulename": "hec.unit", "qualname": "UnitQuantity.get_compatible_base_parameters", "kind": "function", "doc": "<p>Returns a list of base parameter names that are compatible with this object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>parameter_context (str, optional):</strong>  Currently only \"CWMS\" is supported. Defaults to \"CWMS\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: _description_</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parameter_context</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;CWMS&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.UnitQuantity.get_compatible_units", "modulename": "hec.unit", "qualname": "UnitQuantity.get_compatible_units", "kind": "function", "doc": "<p>Returns a list of compatible unit unit names for the specified unit of this object.\nCompatible units are those that have the same dimensionality.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: The list of compatible unit names for this object's specified unit</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.UnitQuantity.get_unit_aliases", "modulename": "hec.unit", "qualname": "UnitQuantity.get_unit_aliases", "kind": "function", "doc": "<p>Returns a list of unit aliases for the specified unit of this object</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: The list of unit aliases for this object's specified unit</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.UnitQuantity.get_unit_systems", "modulename": "hec.unit", "qualname": "UnitQuantity.get_unit_systems", "kind": "function", "doc": "<p>Returns a list of unit systems that include the name of this unit.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: Will be [], ['EN'], ['SI'], or ['EN', 'SI']</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.UnitQuantity.isnan", "modulename": "hec.unit", "qualname": "UnitQuantity.isnan", "kind": "variable", "doc": "<p>Whether the magnitude of the objed is NaN</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.unit.UnitQuantity.ito", "modulename": "hec.unit", "qualname": "UnitQuantity.ito", "kind": "function", "doc": "<p>Converts this object to a different unit in place.</p>\n\n<p>Identical to calling <code>.to(..., in_place=True)</code></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit (Union[str, pint.Unit]):</strong>  The unit ot convert to</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>UnitQuantity: The converted object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">unit</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">unit</span><span class=\"o\">.</span><span class=\"n\">UnitQuantity</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.UnitQuantity.magnitude", "modulename": "hec.unit", "qualname": "UnitQuantity.magnitude", "kind": "variable", "doc": "<p>The magnitude of the object (unitless value)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Only</p>\n</blockquote>\n", "annotation": ": Any"}, {"fullname": "hec.unit.UnitQuantity.output_format", "modulename": "hec.unit", "qualname": "UnitQuantity.output_format", "kind": "variable", "doc": "<p>The output format used for this object if a format specifier is not used. Any format specifier used\nwill override this property.</p>\n\n<p>If <code>None</code>, the unit name or alias specified when the object was creaed will be output (e.g., 10 dsf).\nSee <a href=\"https://pint.readthedocs.io/en/stable/user/formatting.html\">Pint format specification</a> for other formats.</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.unit.UnitQuantity.round", "modulename": "hec.unit", "qualname": "UnitQuantity.round", "kind": "function", "doc": "<p>Returns a copy of this object with the magnitude rounded to the specified number of decimal places</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>places (int):</strong>  The number of decimal places to round to. Default is 0.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>UnitQuantity: The rounded object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">places</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">unit</span><span class=\"o\">.</span><span class=\"n\">UnitQuantity</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.UnitQuantity.set_default_output_format", "modulename": "hec.unit", "qualname": "UnitQuantity.set_default_output_format", "kind": "function", "doc": "<p>Sets the default output format for new UnitQuantity objects</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>format (Optional[str]):</strong>  <br>\n<ul>\n<li>None: (default value) outputs the units as specified when the UnitQuantity object was created</li>\n<li>Other: Must be a valid <a href=\"https://pint.readthedocs.io/en/stable/user/formatting.html\">Pint format specification</a></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.UnitQuantity.specified_unit", "modulename": "hec.unit", "qualname": "UnitQuantity.specified_unit", "kind": "variable", "doc": "<p>The unit specified when the object was created. May be a unit name, alias, or a pint unit definition</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.unit.UnitQuantity.to", "modulename": "hec.unit", "qualname": "UnitQuantity.to", "kind": "function", "doc": "<p>Converts this object to a different unit</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit (Union[str, pint.Unit]):</strong>  The unit to convert to</li>\n<li><strong>in_place (bool, optional):</strong>  If True, this object is modified and returned. Otherwise\na new object is returned. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>UnitQuantity: The converted object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">unit</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">unit</span><span class=\"o\">.</span><span class=\"n\">UnitQuantity</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.UnitQuantity.unit", "modulename": "hec.unit", "qualname": "UnitQuantity.unit", "kind": "variable", "doc": "<p>The Pint unit of the object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Only</p>\n</blockquote>\n", "annotation": ": pint.registry.Unit"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();