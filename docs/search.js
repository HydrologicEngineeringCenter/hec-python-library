window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "hec", "modulename": "hec", "kind": "module", "doc": "<p>Package to provide native Python compatibility with HEC Java classes</p>\n"}, {"fullname": "hec.duration", "modulename": "hec.duration", "kind": "module", "doc": "<p>Provides standard time durations</p>\n"}, {"fullname": "hec.duration.DurationException", "modulename": "hec.duration", "qualname": "DurationException", "kind": "class", "doc": "<p>Exception specific to Duration operations</p>\n", "bases": "hec.timespan.TimeSpanException"}, {"fullname": "hec.duration.Duration", "modulename": "hec.duration", "qualname": "Duration", "kind": "class", "doc": "<p>Class to hold information about the durations represented by time series values.</p>\n\n<p>Durations are a restriction of the TimeSpan base class that also hold extra information.</p>\n\n<ul>\n<li><strong>Restriction:</strong> At most one of <code>years</code>, <code>months</code>, <code>days</code>, <code>hours</code>, and <code>minutes</code> can be non-zero, and <code>seconds</code> must be zero.</li>\n<li><strong>Extension:</strong>\n<ul>\n<li>Each duration has a name</li>\n<li>Each duration is a Beginning of Period (BOP) or End of Period (EOP) duration. Normally values\nrepresent the state at the end of duration (e.g, the elevation or flow at the end of an hour or day).\nEOP Duration objects are returned unless otherwise specified.</li>\n</ul></li>\n</ul>\n\n<p>Durations should not need to be created by the user, as durations for all CWMS intervals are created\nduring module initialization.</p>\n", "bases": "hec.timespan.TimeSpan"}, {"fullname": "hec.duration.Duration.__init__", "modulename": "hec.duration", "qualname": "Duration.__init__", "kind": "function", "doc": "<p>Initializer used by module</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span>, </span><span class=\"param\"><span class=\"n\">bop</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "hec.duration.Duration.forInterval", "modulename": "hec.duration", "qualname": "Duration.forInterval", "kind": "function", "doc": "<p>Returns a Duration object for a specified interval</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>interval (Union[Interval, str, int]):</strong>  A standard CWMS Interval object, or the name or\n(actual or characteristic) minutes of a standard CWMS interval</li>\n<li><strong>bop (bool, optional):</strong>  Specifies whether to return a Beginning of Period Duration object.\nDefaults to False.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TypeError:</strong>  If the first argument is not an Interval, string, or integer</li>\n<li><strong>DurationException:</strong>  If the first argument a non-standard name or minutes or\nno such Duration object exists</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Duration: The Duration object matching the specified interval and bop setting.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">bop</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">duration</span><span class=\"o\">.</span><span class=\"n\">Duration</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.duration.Duration.minutes", "modulename": "hec.duration", "qualname": "Duration.minutes", "kind": "variable", "doc": "<p>The minutes (actual or characteristic) of this object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.duration.Duration.name", "modulename": "hec.duration", "qualname": "Duration.name", "kind": "variable", "doc": "<p>The name of this object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.duration.Duration.isBop", "modulename": "hec.duration", "qualname": "Duration.isBop", "kind": "variable", "doc": "<p>Whether this object is a Beginning of Period Duration</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.duration.Duration.isEop", "modulename": "hec.duration", "qualname": "Duration.isEop", "kind": "variable", "doc": "<p>Whether this object is an End of Period Duration</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.hectime", "modulename": "hec.hectime", "kind": "module", "doc": "<p>Module to provide native python compatibility for the <code>hec.heclib.util.HecTime</code> java class</p>\n\n<p><strong>NOTE</strong> Static java fields and methods are now module constants and functions (e.g., java <code>HecTime.isLeap()</code> -> python <code>hectime.isLeap()</code>)</p>\n\n<p>Jump to <a href=\"#HecTime\"><strong><code>class HecTime</code></strong></a></p>\n"}, {"fullname": "hec.hectime.UNDEFINED_TIME", "modulename": "hec.hectime", "qualname": "UNDEFINED_TIME", "kind": "variable", "doc": "<p>The value for a time integer that repsents that the time has either not been set yet\nor has been set incorrectly.</p>\n", "annotation": ": int", "default_value": "-4294967296"}, {"fullname": "hec.hectime.SECOND_GRANULARITY", "modulename": "hec.hectime", "qualname": "SECOND_GRANULARITY", "kind": "variable", "doc": "<p>Value that specifies that each granule represents one second</p>\n\n<ul>\n<li>Values are offset from <code>[1970, 1, 1, 0, 0, 0]</code></li>\n<li>Earliest represntable time is <code>[1901, 12, 13, 20, 45, 52]</code> (integer value = <code>-2147483648</code>)</li>\n<li>Latest represntable time is <code>[2038, 1, 19, 3, 14, 7]</code> (integer value = <code>2147483647</code>)</li>\n</ul>\n", "annotation": ": int", "default_value": "10"}, {"fullname": "hec.hectime.MINUTE_GRANULARITY", "modulename": "hec.hectime", "qualname": "MINUTE_GRANULARITY", "kind": "variable", "doc": "<p>Value that specifies that each granule represents one minute. New HecTime objects default to\nthis granularity if not otherwise specified.</p>\n\n<ul>\n<li>Values are offset from <code>[1899, 12, 31, 0, 0, 0]</code></li>\n<li>Earliest represntable time is <code>[-2184, 12, 6, 21, 52, 0]</code> (integer value = <code>-2147483648</code>)</li>\n<li>Latest represntable time is <code>[5983, 1, 23, 2, 7, 0]</code> (integer value = <code>2147483647</code>)</li>\n</ul>\n", "annotation": ": int", "default_value": "11"}, {"fullname": "hec.hectime.HOUR_GRANULARITY", "modulename": "hec.hectime", "qualname": "HOUR_GRANULARITY", "kind": "variable", "doc": "<p>Value that specifies that each granule represents one hour</p>\n\n<ul>\n<li>Values are offset from <code>[1899, 12, 31, 0, 0, 0]</code></li>\n<li>Earliest represntable time is <code>[-243084, 3, 22, 16, 0, 0]</code> (integer value = <code>-2147483648</code>)</li>\n<li>Latest represntable time is <code>[246883, 10, 8, 7, 0, 0]</code> (integer value = <code>2147483647</code>)</li>\n</ul>\n", "annotation": ": int", "default_value": "12"}, {"fullname": "hec.hectime.DAY_GRANULARITY", "modulename": "hec.hectime", "qualname": "DAY_GRANULARITY", "kind": "variable", "doc": "<p>Value that specifies that each granule represents one day</p>\n\n<ul>\n<li>Values are offset from <code>[1899, 12, 31, 0, 0, 0]</code></li>\n<li>Earliest represntable time is <code>[-5877711, 6, 22, 0, 0, 0]</code> (integer value = <code>-2147483645</code>)</li>\n<li>Latest represntable time is <code>[5879610, 7, 10, 0, 0, 0]</code> (integer value = <code>2147483647</code>)</li>\n</ul>\n", "annotation": ": int", "default_value": "13"}, {"fullname": "hec.hectime.addCentury", "modulename": "hec.hectime", "qualname": "addCentury", "kind": "function", "doc": "<p>Converts 2-digit years into 4 digit years.</p>\n\n<p>If the year passed in is not in the range 0..99, the year is returned unchanged</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>y (int):</strong>  The year</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The year as a 4 digit year</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.cleanTime", "modulename": "hec.hectime", "qualname": "cleanTime", "kind": "function", "doc": "<p>Normalizes in integer list of either <code>[julian, minute]</code> or <code>[year, month, day, hour, minute, second]</code></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>values (list[int]):</strong>  Either <code>[julian, minute]</code> or `[year, month, day, hour, minute, second]</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.computeNumberIntervals", "modulename": "hec.hectime", "qualname": "computeNumberIntervals", "kind": "function", "doc": "<p>Returns the complete number of intervals between two times</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>startTime (int):</strong>  The time to compute the number of intervals from, in julian * 1440 + minutesSinceMidnight</li>\n<li><strong>endTime (int):</strong>  The time to compute the number of intervals to, in julian * 1440 + minutesSinceMidnight</li>\n<li><strong>interval (Union[Interval, int]):</strong>  The interval to compute the number for. If an integer, it must the the</li>\n<li>actual or characteristic minutes value of a standard Interval object.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if the interval is not one of the standard intervals</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The number of complete intervals between the two times</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">startTime</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">endTime</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.convertTimeZone", "modulename": "hec.hectime", "qualname": "convertTimeZone", "kind": "function", "doc": "<p>Converts an HecTime object from one time zone to another, optionally specifyintg that the\ntarget time zone does not observe Daylight Saving Time (DST). Only for HecTime objects\nconvertable to datetime objects (between 01Jan0001, 00:00 and 31Dec9999, 23:59).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>hecTime (HecTime):</strong>  The HecTime object to convert</li>\n<li><strong>fromTimeZone (ZoneInfo):</strong>  The time zone that the object is currently in</li>\n<li><strong>toTimeZone (ZoneInfo):</strong>  The target time</li>\n<li><strong>respectDaylighSaving (Optional[bool], optional):</strong>  Specifies whether the target time zone.\nshould observe DST. Defaults to True.\n<ul>\n<li>If <code>True</code>, the target time zone is used as specified</li>\n<li>If <code>False</code> and the specified target time zone observes DST, then a time zone is\nfound that has the same UTC offset as the specified target time zone but does not\nobserve DST.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  - If the HecTime object has an attached time zone that is not the same as <code>fromTimeZone</code>.\n<ul>\n<li>If <code>respectDaylightSaving</code> is <code>True</code>, <code>toTimeZone</code> observes DST and no equivalent\ntime zone could be found that does not observer DST</li>\n<li>If the HecTime object is not convertable to a datetime object</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">hecTime</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>,</span><span class=\"param\">\t<span class=\"n\">fromTimeZone</span><span class=\"p\">:</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span>,</span><span class=\"param\">\t<span class=\"n\">toTimeZone</span><span class=\"p\">:</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span>,</span><span class=\"param\">\t<span class=\"n\">respeectDalightSaving</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.curtim", "modulename": "hec.hectime", "qualname": "curtim", "kind": "function", "doc": "<p>Get the current timm as days since 1899 and minutes past midnight and return in parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>julian (list[int]):</strong>  A list of length &gt; 0 whose first value receives the current days since 1899</li>\n<li><strong>minutes (list[int]):</strong>  A list of length &gt; 0 whose first value receives the current minutes past midnight</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#systim\"><strong><code>systim()</code></strong></a> instead</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">julian</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">minutes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.datcln", "modulename": "hec.hectime", "qualname": "datcln", "kind": "function", "doc": "<p>Normalizes a time specified in days since 1899 and minutes past midnight so that 0 &lt;= minutesOut &lt; 1440</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>julianIn (int):</strong>  _description_</li>\n<li><strong>minutesIn (int):</strong>  _description_</li>\n<li><strong>julianOut (list[int]):</strong>  _description_</li>\n<li><strong>minutesOut (list[int]):</strong>  _description_</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">julianIn</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">minutesIn</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">julianOut</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">minutesOut</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.datjul", "modulename": "hec.hectime", "qualname": "datjul", "kind": "function", "doc": "<p>Parses a date string and sets the the number of days since 1899 in the return variable</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dateStr (str):</strong>  The date string (may contain time portion)</li>\n<li><strong>julian (list[int]):</strong>  A list of length &gt; 0 that whose first element receives the days since 1988</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if the date string cannot be successfully parsed</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dateStr</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">julian</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.datymd", "modulename": "hec.hectime", "qualname": "datymd", "kind": "function", "doc": "<p>Parses a date string and sets the year, month, and day in the return variable</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dateStr (str):</strong>  The date string to parse (may contain a time portion)</li>\n<li><strong>ymd (list[int]):</strong>  A list of length &gt; 2 whose first three elements receive the year, month, and day</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: 0 on success or -1 otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dateStr</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">ymd</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.getime", "modulename": "hec.hectime", "qualname": "getime", "kind": "function", "doc": "<p>Parses or computes the start and end of a time window specified as a string in the general form\n<code>start_time</code> <code>end_time</code> and return the computed times in the specified parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>timeWindowString (str):</strong>  The time window string. Both start time and end time may be absolute times or relative times.\nThe string is not case sensitive, but the start and end times must be separated by a comma or whitespace.\n<ul>\n<li>If absolute:\n<ul>\n<li>may contain commas and/or spaces</li>\n<li>may specify a time portion or not:</li>\n</ul></li>\n<li>If relative:\n<ul>\n<li>may not contain commas or spaces</li>\n<li>are of the format &lt;<em>anchor</em>&gt;&lt;<em>offset</em>&gt;... where each offset is of the format [+-]&lt;<em>count</em>&gt;&lt;<em>unit</em>&gt;\nMultiple offsets are allowed.\n<ul>\n<li>Valid anchors are:\n<ul>\n<li><code>T</code> the current time</li>\n<li><code>D</code> the start of the current day</li>\n<li><code>B</code> or <code>S</code> - the start time (allowed only on end time and end must not depend on start time)</li>\n<li><code>E</code> - the end time (allowed only on start time and the start time must not depend on end time)<br></li>\n</ul></li>\n<li>The unit for each offset must be one of:\n<ul>\n<li><code>Y</code> - year(s)</li>\n<li><code>M</code> - month(s)</li>\n<li><code>D</code> - days(s)</li>\n<li><code>H</code> - hour(s)</li>\n</ul></li>\n</ul></li>\n</ul></li>\n<li>Examples:\n<ul>\n<li><code>01Aug2024, 01:00 31Aug2024 2400</code></li>\n<li><code>2024-01-01 2024-12-31,24:00</code></li>\n<li><code>t-7d, t</code></li>\n<li><code>e-1m+1d-2h,d</code></li>\n<li><code>01Aug2024, 01:00, s+1m</code></li>\n</ul></li>\n</ul></li>\n<li><strong>startJul (list[int]):</strong>  Element[0] receives the days since 1899 for the start time if status[0] == 0</li>\n<li><strong>startMin (list[int]):</strong>  Element[0] receives the minutes past midnight for the start time if status[0] == 0</li>\n<li><strong>endJul (list[int]):</strong>  Element[0] receives the days since 1899 for the end time if status[0] == 0</li>\n<li><strong>endMin (list[int]):</strong>  Element[0] receives the minutes past midnight for the end time if status[0] == 0</li>\n<li><strong>status (list[int]):</strong>  Element[0] recieves <code>0</code> if the time window string was successfully parsed, <code>-1</code> otherwise</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">timeWindowString</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">startJul</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">startMin</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">endJul</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">endMin</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">status</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.getTimeInt", "modulename": "hec.hectime", "qualname": "getTimeInt", "kind": "function", "doc": "<p>Return a time integer for specified time values and granularity</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>values (list[int]):</strong>  The time values (<code>[year, month, day, hour, minute, second]</code>)</li>\n<li><strong>granularity (int):</strong>  The granularity of the time integer to return</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if values is less than six items in length</li>\n<li><strong>HecTimeException:</strong>  if the specified granularity is not valid</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The time integer for the specified time values and granularity</p>\n</blockquote>\n\n<h6 id=\"see\">See:</h6>\n\n<blockquote>\n  <p><a href=\"#isValidGranularity\"><code>isValidGranularity(...)</code></a></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">granularity</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.getTimeVals", "modulename": "hec.hectime", "qualname": "getTimeVals", "kind": "function", "doc": "<p>Return time values for a time value and granularity</p>\n\n<p><strong>NOTE</strong> This function always returns midnight as <code>[..., 0, 0, 0]</code>.\nUse <a href=\"#to2400\"><code>to2400(...)</code></a> to get midnight as hour 24</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>timeInt (int):</strong>  The time integer to return the time values for</li>\n<li><strong>granularity (int):</strong>  The granularity of the time integer</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if timeInt is not valid for the specified granularity</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[int]: The list of time values (<code>[year, month, day, hour, minute, second]</code>) represented by the time integer in and granularity</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">timeInt</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">granularity</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.getTimeWindow", "modulename": "hec.hectime", "qualname": "getTimeWindow", "kind": "function", "doc": "<p>Parses or computes the start and end of a time window specified as a string in the general form\n<code>start_time</code> <code>end_time</code> and return the computed times in the specified parameters.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>timeWindowString (str):</strong>  The time window string. Both start time and end time may be absolute times or relative times.\nThe string is not case sensitive, but the start and end times must be separated by a comma or whitespace.\n<ul>\n<li>If absolute:\n<ul>\n<li>may contain commas and/or spaces</li>\n<li>may specify a time portion or not:</li>\n</ul></li>\n<li>If relative:\n<ul>\n<li>may not contain commas or spaces</li>\n<li>are of the format &lt;<em>anchor</em>&gt;&lt;<em>offset</em>&gt;... where each offset is of the format [+-]&lt;<em>count</em>&gt;&lt;<em>unit</em>&gt;\nMultiple offsets are allowed.\n<ul>\n<li>Valid anchors are:\n<ul>\n<li><code>T</code> the current time</li>\n<li><code>D</code> the start of the current day</li>\n<li><code>B</code> or <code>S</code> - the start time (allowed only on end time and end must not depend on start time)</li>\n<li><code>E</code> - the end time (allowed only on start time and the start time must not depend on end time)<br></li>\n</ul></li>\n<li>The unit for each offset must be one of:\n<ul>\n<li><code>Y</code> - year(s)</li>\n<li><code>M</code> - month(s)</li>\n<li><code>D</code> - days(s)</li>\n<li><code>H</code> - hour(s)</li>\n</ul></li>\n</ul></li>\n</ul></li>\n<li>Examples:\n<ul>\n<li><code>01Aug2024, 01:00 31Aug2024 2400</code></li>\n<li><code>2024-01-01 2024-12-31,24:00</code></li>\n<li><code>t-7d, t</code></li>\n<li><code>e-1m+1d-2h,d</code></li>\n<li><code>01Aug2024, 01:00, s+1m</code></li>\n</ul></li>\n</ul></li>\n<li><strong>startTime (HecTime):</strong>  Is set to the parsed or computed start time if returned status == 0</li>\n<li><strong>endTime (HecTime):</strong>  Is set to the parsed or computed end time if returned status == 0</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: <code>0</code> on success or <code>-1</code> on failure to parse the string</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">timeWindowString</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">startTime</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>,</span><span class=\"param\">\t<span class=\"n\">endTime</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.hm2m", "modulename": "hec.hectime", "qualname": "hm2m", "kind": "function", "doc": "<p>Converts a time in hhmm format (integer or string) to minutes</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>hm (int):</strong>  The time to convert (e.g, '0730', 730)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The equivalent minutes (e.g., 450)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">hm</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.idaywk", "modulename": "hec.hectime", "qualname": "idaywk", "kind": "function", "doc": "<p>Returns the weekday (1=Sunday -> 7=Saturday) for the specified date.</p>\n\n<p><strong>NOTE</strong> This differs from <code>datetime.weekday()</code> whch returns 0=Monday -> 6=Sunday.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><p><strong>date (Union[int, list[int]]):</strong>  The date as:</p>\n\n<ul>\n<li><code>int</code> - number of days since 1899</li>\n<li><code>list</code> - a list of at least 3 integers specifying the year, month and day</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The weekday (1=Sunday -> 7=Saturday)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">date</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.ihm2m", "modulename": "hec.hectime", "qualname": "ihm2m", "kind": "function", "doc": "<p>Converts a string in hhmm format to integer minutes</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>hm (int):</strong>  The time to convert (e.g, '0730', 730)</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#hm2m\"><strong><code>hm2m()</code></strong></a> instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The equivalent minutes (e.g., 450)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">hm</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.ihm2m_2", "modulename": "hec.hectime", "qualname": "ihm2m_2", "kind": "function", "doc": "<p>Converts integers in a string to integer minutes</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>hm (str):</strong>  The string to collect integers from. Valid strings are:\n<ul>\n<li>\"0730\"</li>\n<li>\"730\"</li>\n<li>\"7 30\"</li>\n<li>\"0 7 3 0\"</li>\n<li>\"7H30M\"</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The equivalent minutes (e.g., 450)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">hm</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.incrementTimeVals", "modulename": "hec.hectime", "qualname": "incrementTimeVals", "kind": "function", "doc": "<p>Increment or decrement time values by a specified amount and return the result</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>values (list[int]):</strong>  The time values (<code>[year, month, day, hour, minute, sec]</code>) to increment/decrement.</li>\n<li><strong>incrementValue (int):</strong>  The number of granules to increment (&gt;0) or decrement (&lt;0)</li>\n<li><strong>granularity (int):</strong>  The granule size (SECOND_GRANULE, MINUTE_GRANULE, HOUR_GRANULE, or DAY_GRANULE)</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if values is less than six items in length</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[int]: The incremented or decremented values</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">incrementValue</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">granularity</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.inctim", "modulename": "hec.hectime", "qualname": "inctim", "kind": "function", "doc": "<p>Increments a number of days since 1899 and minutes past midnight by a specified number of intervals of a specified size</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>6 Parameters:</strong>\n<ul>\n<li><strong>interval (Union[TimeSpan, timedelta, int]):</strong> - If integer, it is in minutes</li>\n<li><strong>numPeriods (int):</strong> - The number of intervals to increment</li>\n<li><strong>startJulian (int):</strong> - The starting number of days since 1899</li>\n<li><strong>startMinutes (int):</strong> - The starting minutes past midnight</li>\n<li><strong>endJulian (list[int]):</strong> - Element 0 receives the ending days since 1899</li>\n<li><strong>endMinutes (list[int]):</strong> - Element 0 receives the ending minutes past midnight</li>\n</ul></li>\n<li><strong>7 Parameters:</strong>\n<ul>\n<li><strong>interval (int):</strong> - The interval in minutes or days</li>\n<li><strong>unitFlag (int):</strong> - A flag spcifying whether <code>interval</code> is in minutes (<code>0</code>) or days (<code>1</code>)</li>\n<li><strong>numPeriods (int):</strong> - The number of intervals to increment</li>\n<li><strong>startJulian (int):</strong> - The starting number of days since 1899</li>\n<li><strong>startMinutes (int):</strong> - The starting minutes past midnight</li>\n<li><strong>endJulian (list[int]):</strong> - Element 0 receives the ending days since 1899</li>\n<li><strong>endMinutes (list[int]):</strong> - Element 0 receives the ending minutes past midnight</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if invalid arguments are passed to the function</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.isLeap", "modulename": "hec.hectime", "qualname": "isLeap", "kind": "function", "doc": "<p>Return whether the specified year is a leap year</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>y (int):</strong>  The year</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether the year is a leap year</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.isValidGranularity", "modulename": "hec.hectime", "qualname": "isValidGranularity", "kind": "function", "doc": "<p>Return whether specified granularity is valid</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (int):</strong>  The granularity value to test</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether the value is one of</p>\n  \n  <ul>\n  <li><a href=\"#SECOND_GRANULARITY\"><code>SECOND_GRANULARITY</code></a></li>\n  <li><a href=\"#MINUTE_GRANULARITY\"><code>MINUTE_GRANULARITY</code></a></li>\n  <li><a href=\"#HOUR_GRANULARITY\"><code>HOUR_GRANULARITY</code></a></li>\n  <li><a href=\"#DAY_GRANULARITY\"><code>DAY_GRANULARITY</code></a></li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.isValidTime", "modulename": "hec.hectime", "qualname": "isValidTime", "kind": "function", "doc": "<p>Return whether a specified time integer or time values are in the valid range for the specified granularity</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dateTime (Union[int, list[int]]):</strong>  The time integer or time values (<code>[year, month, day, hour, minute, second]</code>) to check validity for</li>\n<li><strong>granularity (int):</strong>  The granularity to check validity for</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether the time integer or time values are in the valid range for the granularity</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dateTime</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]]</span>, </span><span class=\"param\"><span class=\"n\">granularity</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.iymdjl", "modulename": "hec.hectime", "qualname": "iymdjl", "kind": "function", "doc": "<p>Returns the number of days since 31Dec1899 for a specified year, month, and day</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>year (int):</strong>  The year</li>\n<li><strong>month (int):</strong>  The month</li>\n<li><strong>day (int):</strong>  The day</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#yearMonthDayToJulian\"><strong><code>yearMonthDayToJulian()</code></strong></a> instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The number of days sinc 31Dec1899</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">month</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">day</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.jliymd", "modulename": "hec.hectime", "qualname": "jliymd", "kind": "function", "doc": "<p>Populates year, month, and day arguments with the appropriate values for a specified number of days since 31Dec1899</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>2 args:</strong>\n<ul>\n<li><strong>jul (int):</strong> The number of days since 31Dec1899</li>\n<li><strong>ymd (list[int]):</strong> A list of length &gt;= 3 that receives the year, month, and day</li>\n</ul></li>\n<li><strong>4 args</strong>\n<ul>\n<li><strong>jul (int):</strong> The number of days since 31Dec1899</li>\n<li><strong>year (list[int]):</strong> An integer list whose first value received the year</li>\n<li><strong>month (list[int]):</strong> An integer list whose first value received the month</li>\n<li><strong>day (list[int]):</strong> An integer list whose first value received the day</li>\n</ul></li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#julianToYearMonthDay\"><strong><code>julianToYearMonthDay()</code></strong></a> instead</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if invalid arguments are specified</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.juldat", "modulename": "hec.hectime", "qualname": "juldat", "kind": "function", "doc": "<p>Returns the date of the specified number of days since 31Dec1899 in the specified style</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>julian (int):</strong>  The number of days since 1899</li>\n<li><strong>style (int):</strong>  The style to return the date in. See <a href=\"#HecTime.date\"><strong><code>date()</code></strong></a></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The date in the specified style</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">julian</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">style</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.julianToYearMonthDay", "modulename": "hec.hectime", "qualname": "julianToYearMonthDay", "kind": "function", "doc": "<p>Populates year, month, and day arguments with the appropriate values for a specified number of days since 31Dec1899</p>\n\n<p>Args:</p>\n\n<ul>\n<li><strong>2 args</strong>:\n<ul>\n<li><strong>jul (int):</strong> The number of days since 31Dec1899</li>\n<li><strong>ymd (list[int]):</strong> A list of length &gt;= 3 that receives the year, month, and day</li>\n</ul></li>\n<li><strong>4 args</strong>\n<ul>\n<li><strong>jul (int):</strong> The number of days since 31Dec1899</li>\n<li><strong>year (list[int]):</strong> An integer list whose first value received the year</li>\n<li><strong>month (list[int]):</strong> An integer list whose first value received the month</li>\n<li><strong>day (list[int]):</strong> An integer list whose first value received the day</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if invalid arguments are specified</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.maxDay", "modulename": "hec.hectime", "qualname": "maxDay", "kind": "function", "doc": "<p>Return the last month day for a specified year and month</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>y (int):</strong>  The year</li>\n<li><strong>m (int):</strong>  The month</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The last calendar day of the specified month</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.m2hm", "modulename": "hec.hectime", "qualname": "m2hm", "kind": "function", "doc": "<p>Returns the equivalent time integer (hhmm) for a specified minute count</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>m (int):</strong>  The minutes to convert (e.g., 450)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The time equivalent in hhmm (e.g, 730)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.m2ihm", "modulename": "hec.hectime", "qualname": "m2ihm", "kind": "function", "doc": "<p>Returns the equivalent time integer (hhmm) for a specified minute count and\nplaces the string representaion in HHMM format in the specified variable</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>m (int):</strong>  The minutes to convert (e.g., 450)</li>\n<li><strong>hourMinutes (list[str]):</strong>  Element 0 receives string equivalen in HHMM format (e.g., \"0730\")</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#m2hm\"><strong><code>m2hm()</code></strong></a> instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The time equivalent in hhmm (e.g, 730)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mintues</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">hourMinutes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.minutesSinceMidnight", "modulename": "hec.hectime", "qualname": "minutesSinceMidnight", "kind": "function", "doc": "<p>Returns the number of minutes past midnight for specified time values</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>values (list[int]):</strong>  The time values (<code>[year, month, day, hour, minute, second]</code>)</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  If <code>values</code> is less than six items in length</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The number of minutes past midnight</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.nextMonth", "modulename": "hec.hectime", "qualname": "nextMonth", "kind": "function", "doc": "<p>Returns the next year and for a specified year and month.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>y (int):</strong>  The specified year</li>\n<li><strong>m (int):</strong>  The specified month</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[int, int]: The next year and month</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.nopers", "modulename": "hec.hectime", "qualname": "nopers", "kind": "function", "doc": "<p>Returns the complete number of intervals between two times</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>5-parameter version\n<ul>\n<li><strong>interval (Union[Interval, int]):</strong> The interval to compute the number of. If an integer, must be the\nactual or characteristic minutes of a standard Interval object</li>\n<li><strong>startJulian (int):</strong> The days since 1899 of the first time</li>\n<li><strong>startMinutes (int):</strong> The minutes past midnight of the first time</li>\n<li><strong>endJulian (int):</strong> The days since 1899 of the second time</li>\n<li><strong>endMinutes (int):</strong> The minutes past midnight of the second time</li>\n</ul></li>\n<li>6 parameter version\n<ul>\n<li><strong>interval (int):</strong> The number of minutes or days in the interval to compute the number of. Must be the\nactual or characteristic number of minutes (or equivalent days) of a standard Interval object</li>\n<li><strong>unitFlag (int):</strong> 0 for interval in minutes, 1 for interval in days</li>\n<li><strong>startJulian (int):</strong> The days since 1899 of the first time</li>\n<li><strong>startMinutes (int):</strong> The minutes past midnight of the first time</li>\n<li><strong>endJulian (int):</strong> The days since 1899 of the second time</li>\n<li><strong>endMinutes (int):</strong> The minutes past midnight of the second time</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if the interval is not one of the standard intervals</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The number of complete intervals between the two times</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.normalizeDateStyle", "modulename": "hec.hectime", "qualname": "normalizeDateStyle", "kind": "function", "doc": "<p>Returns a valid date style for a specified input style</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>style (int):</strong>  The input date style</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The valid date style</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">style</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.normalizeTimeVals", "modulename": "hec.hectime", "qualname": "normalizeTimeVals", "kind": "function", "doc": "<p>Normalize a list of time values (<code>[year, month, day, hour, minute, second]</code>) in place.</p>\n\n<p>Adjusts each element of the list to be in the valid range for a date/time value.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>values (list[int]):</strong>  The values to normalize.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if values is less that six items in length</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.parseDateTimeStr", "modulename": "hec.hectime", "qualname": "parseDateTimeStr", "kind": "function", "doc": "<p>Parse date/time strings of various formats into time values (<code>[year, month, day, hour, minute, second]</code>).</p>\n\n<p>The string must contain at least year, month, day. Missing seconds, (minutes, seconds), or (hours, minutes, seconds)\nare set to zero.</p>\n\n<p>For strings that cannot be parsed with this method, use <a href=\"#HecTime.strptime\"><strong><code>HecTime.strptime()</code></strong></a></p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dateTimeStr (str):</strong>  The date/time string</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if dateTimeStr cannot be parsed into at least year, month, and day</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[int]: The time values as parsed from the date/time string.</p>\n</blockquote>\n\n<h6 id=\"see-also\">See Also:</h6>\n\n<blockquote>\n  <p><a href=\"#HecTime.strptime\"><strong><code>HecTime.strptime()</code></strong></a></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dateTimeStr</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.previousMonth", "modulename": "hec.hectime", "qualname": "previousMonth", "kind": "function", "doc": "<p>Returns the previous year and for a specified year and month.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>y (int):</strong>  The specified year</li>\n<li><strong>m (int):</strong>  The specified month</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[int, int]: The previous year and month</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.secondsSinceMidnight", "modulename": "hec.hectime", "qualname": "secondsSinceMidnight", "kind": "function", "doc": "<p>Returns the number of seconds past midnight for specified time values</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>values (list[int]):</strong>  The time values (<code>[year, month, day, hour, minute, second]</code>)</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  If <code>values</code> is less than six items in length</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The number of seconds past midnight</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.systim", "modulename": "hec.hectime", "qualname": "systim", "kind": "function", "doc": "<p>Get the current time as days since 1899 and minutes or seconds past midnight and return in parameters,\noptionally in a specified time zone</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>julian (list[int]):</strong>  A list of length &gt; 0 whose first value receives the current days since 1899</li>\n<li><strong>time (list[int]):</strong>  A list of length &gt; 0 whose first value receives the current minutes or seconds past midnight</li>\n<li><strong>timeInMinutes (Optional[bool]):</strong>  Specifies whether to return the time in minutes (<code>True</code>) or seconds (<code>False</code>) past midnight.\nDefault is False</li>\n<li><strong>inTimeZone (Optional[str]):</strong>  If present, specifies the time zone of the current time. The days and time values\nwill be converted from this time zone to UTC</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">julian</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">timeInMinutes</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">inTimeZone</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.to0000", "modulename": "hec.hectime", "qualname": "to0000", "kind": "function", "doc": "<p>Return a copy of time values (<code>[year, month, day, hour, minute, second]</code>) with\n<code>[..., 24, 0, 0]</code> changed to <code>[..., 0, 0, 0]</code> of the next day</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>values (list[int]):</strong>  The values to modify if ending in <code>[24, 0, 0]</code></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if values less than six items in length</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[int]: A copy of the time values, modified if necessrary</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.to2400", "modulename": "hec.hectime", "qualname": "to2400", "kind": "function", "doc": "<p>Return a copy of time values (<code>[year, month, day, hour, minute, second]</code>) with\n<code>[..., 0, 0, 0]</code> changed to <code>[..., 24, 0, 0]</code> of the previous day</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>values (list[int]):</strong>  The values to modify if ending in <code>[0, 0, 0]</code></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if values less than six items in length</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[int]: A copy of the time values, modified if necessrary</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.yearMonthDayToJulian", "modulename": "hec.hectime", "qualname": "yearMonthDayToJulian", "kind": "function", "doc": "<p>Returns the number of days since 31Dec 1899 for a specified year, month, and day</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>y (int):</strong>  The year</li>\n<li><strong>m (int):</strong>  The month</li>\n<li><strong>d (int):</strong>  The day</li>\n<li><strong>account_for_offset (bool) :</strong>  (Default = True) Specifies whether to account for the missing date (31Dec0004).\nThis should be True unless the function is called from an HecTime method which already\naccounts for it.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The number of days since 31Dec1899</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">account_for_offset</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.ymddat", "modulename": "hec.hectime", "qualname": "ymddat", "kind": "function", "doc": "<p>Returns the date in the specified style</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ymd (list[int]):</strong>  The year, month, and day to format</li>\n<li><strong>style (int):</strong>  The style to use (see <a href=\"#HecTime.date\"><strong><code>HecTime.date()</code></strong></a>)</li>\n<li><strong>err (list[int]):</strong>  Element 0 recieve <code>0</code> on success and <code>-1</code> otherwise</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The date in the specified style, or None if err[0] == -1</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ymd</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">style</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">err</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.zofset", "modulename": "hec.hectime", "qualname": "zofset", "kind": "function", "doc": "<p>Computes the offet into a standard interval and/or adjusts the specified time to be at the computed offset</p>\n\n<p><strong>NOTE:</strong> Unlike <a href=\"#HecTime.adjustToIntervalOffset\"><code>HecTime.adjustToIntervalOffset</code></a>, any adjustments made will result\nin the output time being earlier than the input time.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>julian (list[int]):</strong>  On input, element 0 specifies the days since 1899 of the date On output,\nelement[0] recieves the adjusted days since 1899 if operation is <code>1</code> or <code>2</code></li>\n<li><strong>minutes (list[int]):</strong>  On input, element 0 specifies the minutes past midnight of the time. On output,\nelement[0] recieves the adjusted minutes past midnight if operation is <code>1</code> or <code>2</code></li>\n<li><strong>interval (int):</strong>  The interval used to compute the offset and/or adjust the time</li>\n<li><strong>operation (int):</strong> <br>\n<ul>\n<li><strong>0:</strong> Compute the offset only (return in <code>offset[0]</code>)</li>\n<li><strong>1:</strong> Compute the offset (return in <code>offset[0]</code>) and adjust the time to the offset\n(return in <code>julian[0]</code> and <code>minutes[0]</code>)</li>\n<li><strong>2:</strong> adjust the time to the offset only (return in <code>julian[0]</code> and <code>minutes[0]</code>)</li>\n</ul></li>\n<li><strong>offset (list[int]):</strong>  On output, element 0 receives the computed offset if operation is <code>0</code> or <code>1</code></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">julian</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">minutes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">operation</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTimeException", "modulename": "hec.hectime", "qualname": "HecTimeException", "kind": "class", "doc": "<p>Exception specific to the hectime module</p>\n", "bases": "builtins.Exception"}, {"fullname": "hec.hectime.HecTime", "modulename": "hec.hectime", "qualname": "HecTime", "kind": "class", "doc": "<p>Class to facilitate moving Jython scripts that use Java class <code>hec.heclib.util.</code><code>HecTime</code> to Python</p>\n\n<h6 id=\"implementation\">Implementation:</h6>\n\n<blockquote>\n  <p><strong>Granularity</strong></p>\n  \n  <p>Like Java HecTime, <code>HecTime</code> objects can be instaniated with different time granularities, with each granule specifying a\n  second, minute, hour, or day. Specifically:</p>\n\n<pre>\n<table>\n<tr><th>Granularity</th><th>Integer Range</th><th>Each Granule Specifies</th><th>Date Range</th></tr>\n<tr><td>SECOND_GRANULARITY<br>= 10</td><td>-2147483648<br>+2147483647</td><td>Seconds after<br>01Jan1970, 00:00</td><td>+1901-12-13T20:45:52<br>+2030-01-19T03:14:17</td></tr>\n<tr><td>MINUTE_GRANULARITY<br>= 11</td><td>-2147483648<br>+2147483647</td><td>Minutes after<br>31Dec1899, 00:00</td><td>-2184-12-06T21:52<br>+5983-01-23T02:07</td></tr>\n<tr><td>HOUR_GRANULARITY<br>= 12</td><td>-2147483648<br>+2147483647</td><td>Hours after<br>31Dec1899, 00:00</td><td>-243084-03-22T16<br>+246883-10-08T07</td></tr>\n<tr><td>DAY_GRANULARITY<br>= 13</td><td>-2147483645<br>+2146789687</td><td>Days after<br>31Dec1899</td><td>-5877711-06-22<br>+5879610-07-10</td></tr>\n</table>\n</pre>\n  \n  <p>The default granularity is MINUTE_GRANULARITY, but this may be overridden when calling <a href=\"#HecTime\"><code>HecTime()</code></a>.</p>\n  \n  <p><strong>Chainable methods</strong></p>\n  \n  <p>Since, unlike Java, Python allows code to ignore the return value from functions and methods, many HecTime methods\n  with a <code>void</code> return type in Java now return a modified <code>HecTime</code> object. This allows the chaining of methods\n  together for simplify code. For example:</p>\n\n<pre>\nt = HecTime()\nt.setCurrent()\nt.adjustToIntervalOffset(intvl, 0)\nt.increment(1, intvl)\n</pre>\n  \n  <p>can now be coded as:</p>\n\n<pre>\nt = HecTime.now().adjustToIntervalOffset(intvl, 0).increment(1, intvl)\n</pre>\n  \n  <p>although the previous style is still supported.</p>\n  \n  <p><strong>Compatibility with <code>datetime</code></strong></p>\n  \n  <p>This class is written to be trivially convertable to/from <code>datetime</code> objects and updatable via <code>timedelta</code> objects.\n  Like <code>datetime</code> objects, <code>HecTime</code> objects are not time zone aware unless given time zone information. For <code>HecTime</code>\n  objects the <code>atTimeZone()</code> method is used for this purpose. Also like <code>datetime</code> objects, using the <a href=\"#HecTime.astimezone\"><code>astimezone()</code></a>\n  method causes the object to act as if it had been initialized with the local time zone.</p>\n  \n  <p>Initialization from a <code>datetime</code> object is acccomplished via <code>ht = HecTime(dt_obj)</code>. Retieval of a <code>datetime</code>\n  object is accomplished via <code>dt_obj = ht.datetime()</code>. The <a href=\"#HecTime.atTimeZone\"><code>HecTime.atTimeZone(tz)</code></a> accomplishes\n  the same thing as <code>datetime.replace(tzinfo=tz)</code>, and the <a href=\"#HecTime.astimezone\"><code>HecTime.astimezone(tz)</code></a> accomplishes\n  the same thing as <code>datetime.astimezone(tz)</code></p>\n  \n  <p><code>datetime</code> methods, properties, and operators supported in <code>HecTime</code> objects are:</p>\n  \n  <ul>\n  <li>Methods\n  <ul>\n  <li><code>now()</code> (static method)</li>\n  <li><code>astimezone(timezone)</code><sup>*</sup></li>\n  <li><code>strftime(format)</code></li>\n  <li><code>strptime(dateTimeString, format)</code></li>\n  <li><code>__str__()</code> (used in <code>print()</code>)</li>\n  </ul></li>\n  <li>Properties\n  <ul>\n  <li><code>year</code></li>\n  <li><code>month</code></li>\n  <li><code>day</code></li>\n  <li><code>hour</code></li>\n  <li><code>minute</code></li>\n  <li><code>second</code></li>\n  <li><code>tzinfo</code></li>\n  </ul></li>\n  <li>Operators\n  <ul>\n  <li><code>+</code> and <code>+=</code></li>\n  <li><code>-</code> and <code>-=</code></li>\n  <li><code>==</code> and <code>!=</code></li>\n  <li><code>&lt;</code> and <code>&lt;=</code></li>\n  <li><code>&gt;</code> and &gt;=`</li>\n  </ul></li>\n  </ul>\n  \n  <p><sup>*</sup>The <code>astimezone(timezone)</code>, method, like all <code>HecTime</code> methods that take time zone will accept:</p>\n  \n  <ul>\n  <li><code>ZoneInfo</code> object</li>\n  <li>String (timezone name)</li>\n  <li><code>HecTime</code> object (the object's time zone is used)</li>\n  <li><code>datetime</code> object (the object's time zone is used)</li>\n  </ul>\n  \n  <p><em>Note:</em> Compatibility with <code>datetime</code> as well as time zone support is only available on <code>HecTime</code> objects that are\n  within the <code>datetime</code> object range of 01Jan0001, 00:00 through 31Dec9999, 23:59. Also, time zone support is not\n  provided for <code>HecTime</code> objects of <code>DAY_GRANULARITY</code>.</p>\n  \n  <p><strong>Addition, subtraction, and comparison operators</strong></p>\n  \n  <p>Integers, <code>HecTime</code> objects, <code>timedelta</code> objects, and specially formatted strings can be used on the right side of the\n  <code>+</code> and <code>+=</code> operators. The result is always another <code>HecTime</code> object. Allowing <code>HecTime</code> objects to be added to each\n  other breaks the similarity with <code>datetime</code>, but the Java HecTime code suppored it.</p>\n  \n  <p>Integers, <code>HecTime</code> objects, <code>datetime</code> objects, <code>timedelta</code> objects, and specially formatted strings and be usd\n  on the right side of the <code>-</code> operator. The result is a <code>HecTime</code> object for intgers, <code>timedelta</code> objects and strings.\n  it is a <code>timedelta</code> object for <code>HecTime</code> and <code>timedelta</code> objects. Integers, <code>timedelta</code> objects and specially foratted\n  strings can also be on the right side of the <code>-=</code> operator</p>\n  \n  <p>Adding and subtracting integers adds or subracts the number of granules in the object so the change may be in seconds,\n  minutes, hours, or days, depending on the object's granularity.</p>\n  \n  <p>Strings of the format used for the offset portion of relative time strings in <a href=\"#getTimeWindow\"><code>getTimeWindow()</code></a> can be\n  used in addition and subtraction operators. Examples\n      - <code>t - \"1y\"</code> would return an <code>HecTime</code> object one year prior to the <code>t</code> object\n      - <code>t += \"3m-2d+1h\"</code> would increment the <code>t</code> object forward 3 months, back 2 days and forward 1 hour.</p>\n  \n  <p><code>HecTime</code> objects can be compared with each other or with <code>datetime</code> objects using the standard operators (<code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&lt;=</code>, <code>&gt;</code>, <code>&gt;=</code>).\n  Either type may be on either side of the operators.</p>\n  \n  <p><strong>Use of properties</strong></p>\n  \n  <p>Many methods are deprecated and will generate deprecation warnings when used. Most have been replaced by direct\n  read/write or read-only properties.</p>\n  \n  <p>The <code>value()</code>, <code>year()</code>, <code>month()</code>, <code>day()</code>, <code>hour()</code>, <code>minute()</code>, and <code>second()</code> methods are still supported but\n  are accessed in a more pythonic way as read/write (<code>value</code>) or read-only (<code>year</code>, <code>month</code>, <code>day</code>, <code>hour</code>, <code>minute</code>, <code>second</code>)\n  properties. There is no clean way to issue deprecation warning if these properties are accessed by their getter functions.</p>\n</blockquote>\n"}, {"fullname": "hec.hectime.HecTime.__init__", "modulename": "hec.hectime", "qualname": "HecTime.__init__", "kind": "function", "doc": "<p>Initializes a newly-created <code>HecTime</code> object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong><code>HecTime()</code></strong> initializes granularity to <a href=\"#MINUTE_GRANULARITY\"><code>MINUTE_GRANULARITY</code></a> and time to <a href=\"#UNDEFINED_TIME\"><code>UNDEFINED_TIME</code></a></li>\n<li><strong><code>HecTime(granularity: int)</code></strong> initializes granularity to <code>granularity</code> and time to <a href=\"#UNDEFINED_TIME\"><code>UNDEFINED_TIME</code></a></li>\n<li><strong><code>HecTime(values: Union[list[int],tuple[int,...]])</code></strong> initializes granularity to <a href=\"#MINUTE_GRANULARITY\"><code>MINUTE_GRANULARITY</code></a> and time to <code>values</code></li>\n<li><strong><code>HecTime(otherHecTime: HecTime)</code></strong> initializes to the same granularity and time as <code>otherHecTime</code></li>\n<li><strong><code>HecTime(dt: datetime)</code></strong> initializes granularity to <a href=\"#MINUTE_GRANULARITY\"><code>MINUTE_GRANULARITY</code></a> and time to the value of <code>dt</code>.</li>\n<li><strong><code>HecTime(dateTimeStr: str)</code></strong> initializes granularity to <a href=\"#MINUTE_GRANULARITY\"><code>MINUTE_GRANULARITY</code></a> and time to the results of <a href=\"#parseDateTimeStr\">parseDateTimeStr</a>(dateTimeStr)</li>\n<li><strong><code>HecTime(timeInt: int, granularity: int)</code></strong> initializes to <code>timeInt</code> and <code>granularity</code></li>\n<li><strong><code>HecTime(dateStr: str, timeStr: str)</code></strong> initializes granularity to <a href=\"#MINUTE_GRANULARITY\"><code>MINUTE_GRANULARITY</code></a> and time to the results of <a href=\"#parseDateTimeStr\">parseDateTimeStr</a>(<code>dateStr</code>+\"&nbsp;\"+<code>timeStr</code>)</li>\n<li><strong><code>HecTime(dateStr: str, timeStr: str, granularity: int)</code></strong> initializes to the specified granularity and results of <a href=\"#parseDateTimeStr\">parseDateTimeStr</a>(<code>dateStr</code>+\"&nbsp;\"+<code>timeStr</code>)</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if invalid parameters are specified</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "hec.hectime.HecTime.now", "modulename": "hec.hectime", "qualname": "HecTime.now", "kind": "function", "doc": "<p>Returns a new <code>HecTime</code> object initialized to the current system time and specified or default granularity</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>granularity (int, optional):</strong>  The granularity of the new object. Defaults to MINUTE_GRANULARITY.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The newly created object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">granularity</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">11</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.year", "modulename": "hec.hectime", "qualname": "HecTime.year", "kind": "variable", "doc": "<p>The object's year, or None if undefined</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[int]"}, {"fullname": "hec.hectime.HecTime.month", "modulename": "hec.hectime", "qualname": "HecTime.month", "kind": "variable", "doc": "<p>The object's month, or None if undefined</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[int]"}, {"fullname": "hec.hectime.HecTime.day", "modulename": "hec.hectime", "qualname": "HecTime.day", "kind": "variable", "doc": "<p>The object's day of month, or None if undefined</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[int]"}, {"fullname": "hec.hectime.HecTime.hour", "modulename": "hec.hectime", "qualname": "HecTime.hour", "kind": "variable", "doc": "<p>The object's hour of day, or None if undefined</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[int]"}, {"fullname": "hec.hectime.HecTime.minute", "modulename": "hec.hectime", "qualname": "HecTime.minute", "kind": "variable", "doc": "<p>The object's minute of hour, or None if undefined</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[int]"}, {"fullname": "hec.hectime.HecTime.second", "modulename": "hec.hectime", "qualname": "HecTime.second", "kind": "variable", "doc": "<p>The object's second of minute, or None if undefined</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[int]"}, {"fullname": "hec.hectime.HecTime.tzinfo", "modulename": "hec.hectime", "qualname": "HecTime.tzinfo", "kind": "variable", "doc": "<p>The object's attached time zone</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[zoneinfo.ZoneInfo]"}, {"fullname": "hec.hectime.HecTime.granularity", "modulename": "hec.hectime", "qualname": "HecTime.granularity", "kind": "variable", "doc": "<p>The object's current granularity.</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The granularity</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.hectime.HecTime.defined", "modulename": "hec.hectime", "qualname": "HecTime.defined", "kind": "variable", "doc": "<p>Whether this object has been defined</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.hectime.HecTime.value", "modulename": "hec.hectime", "qualname": "HecTime.value", "kind": "variable", "doc": "<p>The object's current time integer.</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.hectime.HecTime.values", "modulename": "hec.hectime", "qualname": "HecTime.values", "kind": "variable", "doc": "<p>The object's current time values (<code>[year, month, day, hour, minute, second]</code>).</p>\n\n<p>This property is None when the <a href=\"#value\"><code>value</code></a> property is <a href=\"#UNDEFINED_TIME\"><code>UNDEFINED_TIME</code></a></p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[list[int]]"}, {"fullname": "hec.hectime.HecTime.midnight_as_2400", "modulename": "hec.hectime", "qualname": "HecTime.midnight_as_2400", "kind": "variable", "doc": "<p>The object's current setting of whether to show midnight as hour 24 (default) or not.</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.hectime.HecTime.default_date_style", "modulename": "hec.hectime", "qualname": "HecTime.default_date_style", "kind": "variable", "doc": "<p>The object's current default data style.</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.hectime.HecTime.date_str", "modulename": "hec.hectime", "qualname": "HecTime.date_str", "kind": "variable", "doc": "<p>The object's current date string using the default_date_style</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.hectime.HecTime.date_time_str", "modulename": "hec.hectime", "qualname": "HecTime.date_time_str", "kind": "variable", "doc": "<p>The object's current date and time string using the default_date_style</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.hectime.HecTime.add", "modulename": "hec.hectime", "qualname": "HecTime.add", "kind": "function", "doc": "<p>Adds an number of granules or an HecTime to this object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><p><strong>time (Union[int, HecTime]):</strong>  the to add. If an integer:</p>\n\n<ul>\n<li>SECOND_GRANULARITY - adds the specified number of seconds</li>\n<li>MINUTE_GRANULARITY - adds the specified number of minutes</li>\n<li>HOUR_GRANULARITY - adds the specified number of hours</li>\n<li>DAY_GRANULARITY - adds the specified number of days</li>\n</ul></li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use the <code>+=</code> operator instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.addDays", "modulename": "hec.hectime", "qualname": "HecTime.addDays", "kind": "function", "doc": "<p>Adds a number of days to the object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>days (int):</strong>  the number of days to add.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">days</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.addHours", "modulename": "hec.hectime", "qualname": "HecTime.addHours", "kind": "function", "doc": "<p>Adds a number of hours to the object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>hours (int):</strong>  the number of hours to add.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.addMinutes", "modulename": "hec.hectime", "qualname": "HecTime.addMinutes", "kind": "function", "doc": "<p>Adds a number of minutes to the object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>minutes (int):</strong>  the number of minutes to add.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">minutes</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.addSeconds", "modulename": "hec.hectime", "qualname": "HecTime.addSeconds", "kind": "function", "doc": "<p>Adds a number of seconds to the object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>seconds (int):</strong>  the number of seconds to add.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.adjustToIntervalOffset", "modulename": "hec.hectime", "qualname": "HecTime.adjustToIntervalOffset", "kind": "function", "doc": "<p>Adjusts this object to be at the specified offset past the specified interval.</p>\n\n<p><strong>NOTE:</strong> Unlike <a href=\"#zofset\"><code>zofset</code></a> The resulting time may be <em>at</em>, <em>before</em>, or <em>after</em>\nthe this object, but will always be in the interval that begins at or before this object.</p>\n\n<p>To get the begninning of the interval that starts at or before this object, set\noffsetMinutes to 0. To get the beginning of the next interval set offsetMinutes\nbe the same as intervalMinutes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>interval (Union[Interval, int]):</strong>  The interval. If an integer, must be the actual\nor charactersitic minutes of a standard Interval</li>\n<li><strong>offsetMinutes (int):</strong>  The offset into the interval in minutes (0..interval)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The adjusted object</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if offset it out of range for interval</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">offsetMinutes</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.atTimeZone", "modulename": "hec.hectime", "qualname": "HecTime.atTimeZone", "kind": "function", "doc": "<p>Attaches the specified time zone to this object. Does not change the time</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>timeZone (Union[ZoneInfo, str]):</strong>  The time zone to attach or object containing that time zone.\nUse <code>\"local\"</code> to specify the system time zone.</li>\n<li><strong>onAlreadytSet (int, optional):</strong>  Specifies action to take if a different time zone is already\nattached. Defaults to 1.\n<ul>\n<li><code>0</code>: Quietly attach the new time zone</li>\n<li><code>1</code>: (default) Issue a warning about attaching a different time zone</li>\n<li><code>2</code>: Raises an exception</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if a different time zone is already attached and <code>onAlreadySet</code> == 2</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The updated object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">timeZone</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">onAlreadytSet</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.astimezone", "modulename": "hec.hectime", "qualname": "HecTime.astimezone", "kind": "function", "doc": "<p>Returns a copy of this object at the spcified time zone</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>timeZone (Union[HecTime, datetime, ZoneInfo, str]):</strong>  The target time zone or object containg the target time zone.\nUse <code>\"local\"</code> to specify the system time zone.</li>\n<li><strong>onTzNotSet (int, optional):</strong>  Specifies behavior if this object has no time zone attached. Defaults to 1.\n<ul>\n<li><code>0</code>: Quietly behave as if this object had the local time zone attached.</li>\n<li><code>1</code>: (default) Same as <code>0</code>, but issue a warning.</li>\n<li><code>2</code>: Raise an exception preventing objectes with out time zones attached from using this method.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: A copy of this object at the specified time zone</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">timeZone</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">onTzNotSet</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.cleanTime", "modulename": "hec.hectime", "qualname": "HecTime.cleanTime", "kind": "function", "doc": "<p>Placeholder for API compatibility. Does nothing.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.clone", "modulename": "hec.hectime", "qualname": "HecTime.clone", "kind": "function", "doc": "<p>Returns a clone of this object</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>object: the clone of this object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">object</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.compareTimes", "modulename": "hec.hectime", "qualname": "HecTime.compareTimes", "kind": "function", "doc": "<p>Returns an integer comparison with another HecTime object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (HecTime):</strong>  The other HecTime object</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int:</p>\n  \n  <ul>\n  <li>-1 if this object &lt; other</li>\n  <li>0 if this object == other</li>\n  <li>1 if this object &gt; other</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.compareTo", "modulename": "hec.hectime", "qualname": "HecTime.compareTo", "kind": "function", "doc": "<p>Not supported in this implementation</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"nb\">object</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.computeNumberIntervals", "modulename": "hec.hectime", "qualname": "HecTime.computeNumberIntervals", "kind": "function", "doc": "<p>Returns the number of complete intervals between this object and another specified HecTime object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (HecTime):</strong>  The other time to compute the number of intervals to</li>\n<li><p><strong>interval (Union[int, timedelta]):</strong>  The interval size to compute the number of intervals for.</p>\n\n<ul>\n<li><code>int</code> - the minutes in a standard interval</li>\n<li><code>timedelta</code> - If equivalent to a standard interval, the same result as specifying the equivalent integer\nis returned. Otherwise the both HecTime objects are converted to datetime objects and the number of\nintervals is computed as `((other.datetime - self.datetime) / timesdelta')</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if <code>interval</code> is a non-standard integer or if it is a nonstandard timedelta and\neither of this object or <code>other</code> is not convertable to a datetime object</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The number of complete intervals between this time and the other time.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.convertTimeZone", "modulename": "hec.hectime", "qualname": "HecTime.convertTimeZone", "kind": "function", "doc": "<p>Converts this object from one time zone to another, optionally specifyintg that the\ntarget time zone does not observe Daylight Saving Time (DST). Only for HecTime objects\nconvertable to datetime objects (between 01Jan0001, 00:00 and 31Dec9999, 23:59).</p>\n\n<p><strong>NOTE:</strong> The Java signatures for this method that operate on and return a copy of the HecTime\nobject are not supported in this implementation. The <code>astimezone()</code> method can be used for that purpose.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fromTimeZone (Union[ZoneInfo, str]):</strong>  The time zone to convert from</li>\n<li><strong>toTimeZone (Union[ZoneInfo, str]):</strong>  The target time zone</li>\n<li><strong>respectDaylighSaving (Optional[bool], optional):</strong>  Specifies whether the target time zone.\nshould observe DST. Defaults to True.\n<ul>\n<li>If <code>True</code>, the target time zone is used as specified</li>\n<li>If <code>False</code> and the specified target time zone observes DST, then a time zone is\nfound that has the same UTC offset as the specified target time zone but does not\nobserve DST.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  - If <code>respectDaylightSaving</code> is <code>True</code>, <code>toTimeZone</code> observes DST and no equivalent\ntime zone could be found that does not observer DST\n<ul>\n<li>If this object is not convertable to a datetime object</li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">fromTimeZone</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">toTimeZone</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">respectDaylighSaving</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.date", "modulename": "hec.hectime", "qualname": "HecTime.date", "kind": "function", "doc": "<p>Returns the date in the specified style</p>\n\n<table style='font-family:monospace;'>\n<tr><th colspan=\"4\">Base date styles</th></tr>\n<tr><td><b>0:</b>&nbsp;June&nbsp;2,&nbsp;1985</td><td><b>10:</b>&nbsp;&nbsp;June&nbsp;2,&nbsp;85</td><td><b>100:</b>&nbsp;JUNE&nbsp;2,&nbsp;1985</td><td><b>110:</b>&nbsp;JUNE&nbsp;2,&nbsp;85</td></tr>\n<tr><td><b>1:</b>&nbsp;&nbsp;Jun&nbsp;2,&nbsp;1985</td><td><b>11:</b>&nbsp;&nbsp;&nbsp;Jun&nbsp;2,&nbsp;85</td><td><b>101:</b>&nbsp;&nbsp;JUN&nbsp;2,&nbsp;1985</td><td><b>111:</b>&nbsp;&nbsp;JUN&nbsp;2,&nbsp;85</td></tr>\n<tr><td><b>2:</b>&nbsp;&nbsp;2&nbsp;June&nbsp;1985</td><td><b>12:</b>&nbsp;&nbsp;&nbsp;2&nbsp;June&nbsp;85</td><td><b>102:</b>&nbsp;&nbsp;2&nbsp;JUNE&nbsp;1985</td><td><b>112:</b>&nbsp;&nbsp;&nbsp;2&nbsp;JUN&nbsp;85</td></tr>\n<tr><td><b>3:</b>&nbsp;&nbsp;&nbsp;&nbsp;June&nbsp;1985</td><td><b>13:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;June&nbsp;85</td><td><b>103:</b>&nbsp;&nbsp;&nbsp;&nbsp;JUNE&nbsp;1985</td><td><b>113:</b>&nbsp;&nbsp;&nbsp;&nbsp;JUNE&nbsp;85</td></tr>\n<tr><td><b>4:</b>&nbsp;&nbsp;&nbsp;&nbsp;02Jun1985</td><td><b>14:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;02Jun85</td><td><b>104:</b>&nbsp;&nbsp;&nbsp;&nbsp;02JUN1985</td><td><b>114:</b>&nbsp;&nbsp;&nbsp;&nbsp;02JUN85</td></tr>\n<tr><td><b>5:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2Jun1985</td><td><b>15:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2Jun85</td><td><b>105:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2JUN1985</td><td><b>115:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2JUN85</td></tr>\n<tr><td><b>6:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jun1985</td><td><b>16:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jun85</td><td><b>106:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JUN1985</td><td><b>116:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JUN85</td></tr>\n<tr><td><b>7:</b>&nbsp;&nbsp;02&nbsp;Jun&nbsp;1985</td><td><b>17:</b>&nbsp;&nbsp;&nbsp;02&nbsp;Jun&nbsp;85</td><td><b>107:</b>&nbsp;&nbsp;02&nbsp;JUN&nbsp;1985</td><td><b>117:</b>&nbsp;&nbsp;02&nbsp;JUN&nbsp;85</td></tr>\n<tr><td><b>8:</b>&nbsp;&nbsp;&nbsp;2&nbsp;Jun&nbsp;1985</td><td><b>18:</b>&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;Jun&nbsp;85</td><td><b>108:</b>&nbsp;&nbsp;&nbsp;2&nbsp;JUN&nbsp;1985</td><td><b>118:</b>&nbsp;&nbsp;&nbsp;2&nbsp;JUN&nbsp;85</td></tr>\n<tr><td><b>9:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jun&nbsp;1985</td><td><b>19:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Jun&nbsp;85</td><td><b>109:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JUN&nbsp;1985</td><td><b>119:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JUN&nbsp;85</td></tr>\n<tr><th colspan=\"4\">Extended date styles</th></tr>\n<tr><td><b>-1:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6/2/85</td><td><b>-11:</b>&nbsp;&nbsp;&nbsp;&nbsp;06/02/85</td><td><b>-101:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6/2/1985</td><td><b>-111:</b>&nbsp;06/02/1985</td></tr>\n<tr><td><b>-2:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6-2-85</td><td><b>-12:</b>&nbsp;&nbsp;&nbsp;&nbsp;06-02-85</td><td><b>-102:</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6-2-1985</td><td><b>-112:</b>&nbsp;06-02-1985</td></tr>\n<tr><td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td><b>-13:</b>&nbsp;&nbsp;1985-06-02</td><td></td><td></td></tr>\n</table>\n\n<p><strong>NOTE</strong> that years that overflow four digits will not be truncated if using a style that shows four digits in the table (styles 0..9, 100..109, -113..-101 and -13).\nOther formats will continue to show only the last two digits of the year. In all cases a negative sign will be prepended to the year for negative years (whether two digits or more are shown).\nlib.dateAndTime)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>style (Optional[int]):</strong>  The date style to use. If not specified the <a href=\"#HecTime.default_date_style\"><code>default_date_style</code></a> property is used</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The formatted date</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">style</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.dateAndTime", "modulename": "hec.hectime", "qualname": "HecTime.dateAndTime", "kind": "function", "doc": "<p>Returns a string representing the date and time in the specified style.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>style (Optional[int]):</strong>  The date style to use. If not specified the <a href=\"#HecTime.default_date_style\"><code>default_date_style</code></a> property is used</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The formatted date and time. The date is generated using the style parameter (see <a href=\"#HecTime.date\"><code>date</code></a>), which is separated from\n  the time portion (with colons) (see <a href=\"#HecTime.time\"><code>time</code></a>) by a comma and space</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">style</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.datetime", "modulename": "hec.hectime", "qualname": "HecTime.datetime", "kind": "function", "doc": "<p>Returns a <code>datetime</code> object equivalent to this object.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>datetime: The equivalent <code>datetime</code> object or <code>None</code> if this object's time is undefined</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.dayOfWeek", "modulename": "hec.hectime", "qualname": "HecTime.dayOfWeek", "kind": "function", "doc": "<p>Returns the day of week (1 = Sunday -> 7 = Saturday) for this object.</p>\n\n<p><strong>NOTE:</strong> This differs from <code>datetime.weekday()</code> whch returns 0=Monday -> 6=Sunday.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The day of week (1 = Sunday -> 7 = Saturday)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.dayOfWeekName", "modulename": "hec.hectime", "qualname": "HecTime.dayOfWeekName", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.dayOfYear", "modulename": "hec.hectime", "qualname": "HecTime.dayOfYear", "kind": "function", "doc": "<p>Returns the day of the year of this object (01Jan = 1)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[int]: The day of the year</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.equalTo", "modulename": "hec.hectime", "qualname": "HecTime.equalTo", "kind": "function", "doc": "<p>Returns whether this object is equivalent to another</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (Union[&quot;HecTime&quot;, datetime]):</strong>  The object to compare to</li>\n</ul>\n\n<h6 id=\"deprrecated\">Deprrecated:</h6>\n\n<blockquote>\n  <p>Use <code>==</code> operator instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: The result of the comparison</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.getDefaultDateStyle", "modulename": "hec.hectime", "qualname": "HecTime.getDefaultDateStyle", "kind": "function", "doc": "<p>Returns the default date style</p>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.default_date_style\"><strong>default_date_style</strong></a> property instead</p>\n</blockquote>\n\n<p>Returns\n    int: The default date style</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.getIntervalOffset", "modulename": "hec.hectime", "qualname": "HecTime.getIntervalOffset", "kind": "function", "doc": "<p>Returns the number of minutes that the current object is after the top of the most recent standard interval</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>interval (int):</strong>  The interval to determine the offset into</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if the interval is not a standard interval</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[int]: The number of minutes into the interval</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.getISO8601DateTime", "modulename": "hec.hectime", "qualname": "HecTime.getISO8601DateTime", "kind": "function", "doc": "<p>Returns the time of this object in ISO 8601 format.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The time of this object in ISO 8601 format</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.getMinutes", "modulename": "hec.hectime", "qualname": "HecTime.getMinutes", "kind": "function", "doc": "<p>Returns the time of this object as (days since 1899) * 1400 + (minutes past midnight), optionally offsetting by a time zone</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>timeZoneOffset (Optional[Union[int, ZoneInfo]]):</strong>  if <code>int</code>, the number of minutes <em>behind</em> UTC (positive for western longitudes)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The time in minutes</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">timeZoneOffset</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.getShowsTimeAsBeginningOfDay", "modulename": "hec.hectime", "qualname": "HecTime.getShowsTimeAsBeginningOfDay", "kind": "function", "doc": "<p>Retrieves whether midnight is shown as hour 0 instead of hour 24 of the previous day</p>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.midnight_as_2400\"><strong>midnight_as_2400</strong></a> property instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: <code>True</code> if midnight is shown as hour 0, <code>False</code> if midnight is shown as hour 24</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.getTime", "modulename": "hec.hectime", "qualname": "HecTime.getTime", "kind": "function", "doc": "<p>Returns a string representing the time portion</p>\n\n<ul>\n<li>withColons = True (default), <code>[..., 6, 8, 23]</code> is retuned is <code>06:08:23</code></li>\n<li>withColons = False, <code>[..., 6, 8, 23]</code> is retuned is <code>0608</code></li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>withColons (Optional[bool], optional):</strong>  Specifies with or without colons. Defaults to <code>True</code>.</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>use <a href=\"#HecTime.HecTime.time\"><strong>time</strong></a> method instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The time portion string with colons (hour, minute, and second), or without colons (hour, minute only))</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">withColons</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.getTimeGranularity", "modulename": "hec.hectime", "qualname": "HecTime.getTimeGranularity", "kind": "function", "doc": "<p>Returns the granularity of this object</p>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.granularity\"><strong>granularity</strong></a> property instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The granularity</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.getTimeInMillis", "modulename": "hec.hectime", "qualname": "HecTime.getTimeInMillis", "kind": "function", "doc": "<p>Returns the time of this object in milliseconds into of the Unix Epoch (01Jan1970 00:00:00 UTC).</p>\n\n<p>Note that is the standard time value used in Java as well as 1000.0 times the standard time\nvalue used in python (e.g., <code>time.time()</code> or <code>datetime.timestamp()</code>)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>timeZoneOffset (Optional[Union[int, ZoneInfo]]):</strong>  if <code>int</code>, the number of minutes <em>behind</em> UTC (positive for western longitudes).\nIf not specified, the milliseconds returned will be as if this object is in UTC</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[int]: None if this object is not defined., otherwise the milliseconds of the current time from the beginning of the Unix Epoch</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">timeZoneOffset</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.getXMLDateTime", "modulename": "hec.hectime", "qualname": "HecTime.getXMLDateTime", "kind": "function", "doc": "<p>Returns the time of this object in ISO 8601 format.</p>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.getISO8601DateTime\"><strong>getISO8601DateTime</strong></a> instead</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if timeZoneOffset is specifed but is not an integer or ZoneInfo object,</li>\n<li>or is a ZoneInfo object and no UTC offset could be determined from it</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The time of this object in ISO 8601 format</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.greaterThan", "modulename": "hec.hectime", "qualname": "HecTime.greaterThan", "kind": "function", "doc": "<p>Returns whether this object is greater than (later than) another HecTime object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (HecTime):</strong>  The other object to compare to</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use the the <code>&gt;</code> operator instead.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether this object is greater than the other</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.greaterThanEqualTo", "modulename": "hec.hectime", "qualname": "HecTime.greaterThanEqualTo", "kind": "function", "doc": "<p>Returns whether this object is greater than (later than) or equal to (same time as) another HecTime object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (HecTime):</strong>  The other object to compare to</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use the the <code>&gt;=</code> operator instead.</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether this object is greater than or equal to the other</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.hourMinutes", "modulename": "hec.hectime", "qualname": "HecTime.hourMinutes", "kind": "function", "doc": "<p>Returns the time portion in HHMM format or \"\" if this object is undefined</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The time portion in HHMM format or \"\" if this object is undefined</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.hoursMinutesSeconds", "modulename": "hec.hectime", "qualname": "HecTime.hoursMinutesSeconds", "kind": "function", "doc": "<p>Returns the object's hour, minute, and second in the spefied parameters</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>hours (list[int]):</strong>  Element 0 recieves the hour</li>\n<li><strong>minutes (list[int]):</strong>  Element 0 recieves the minute</li>\n<li><strong>seconds (list[int]):</strong>  Element 0 receives the second</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hours</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">minutes</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">seconds</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.increment", "modulename": "hec.hectime", "qualname": "HecTime.increment", "kind": "function", "doc": "<p>Increments this object by a specified number of intervals.</p>\n\n<p>For month-based intervals (<code>\"Tri-Month\"</code>, <code>\"Semi-Month\"</code>, <code>\"1Month\"</code>, <code>\"1Year\"</code>), if the date\nof the current object is the last day of a month, the resulting date will be the last day of the month\nor sub-month (days 10 or 20 for <code>\"Tri-Month\"</code> and day 15 for <code>\"Semi-Month\"</code>), as shown:</p>\n\n<table>\n<tr><th>Start Time</th><th>Count</th><th>Interval</th><th>Result</th></tr>\n<tr><td>28Feb2023, 01:00</td><td>1</td><td><code>\"Tri-Month\"</code></td><td>10Mar2023, 01:00</td></tr>\n<tr><td>28Feb2023, 01:00</td><td>2</td><td><code>\"Tri-Month\"</code></td><td>20Mar2023, 01:00</td></tr>\n<tr><td>28Feb2023, 01:00</td><td>3</td><td><code>\"Tri-Month\"</code></td><td>31Mar2023, 01:00</td></tr>\n<tr><td>28Feb2024, 01:00</td><td>1</td><td><code>\"Tri-Month\"</code></td><td>08Mar2023, 01:00</td></tr>\n<tr><td>28Feb2024, 01:00</td><td>2</td><td><code>\"Tri-Month\"</code></td><td>18Mar2023, 01:00</td></tr>\n<tr><td>28Feb2024, 01:00</td><td>3</td><td><code>\"Tri-Month\"</code></td><td>28Mar2023, 01:00</td></tr>\n</table>\n\n<p>Note that this method produces results that differ from the Java HecTime.increment() method where\nthe Java code produces incorrect results, as in the following examples (all such discrepancies are\nlimited to <code>\"Tri-Month\"</code>, <code>\"Semi-Month\"</code>, and <code>\"1Month\"</code>:</p>\n\n<table>\n<tr><th>Start Time</th><th>Count</th><th>Interval</th><th>Correct Result</th><th>Java HecTime Result</th></tr>\n<tr><td>29Jan2023, 01:00</td><td>1</td><td><code>\"1Month\"</code></td><td>28Feb2023, 01:00</td><td>01Mar2023, 01:00</td></tr>\n<tr><td>09Feb2024, 01:00</td><td>2</td><td><code>\"Tri-Month\"</code></td><td>29Feb2024, 01:00</td><td>09Mar2024, 01:00</td></tr>\n<tr><td>28Feb2024, 01:00</td><td>2</td><td><code>\"Semi-Month\"</code></td><td>28Mar2024, 01:00</td><td>31Mar2024, 01:00</td></tr>\n</table>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>count (int):</strong>  The number of intervals to increment</li>\n<li><strong>interval (Union[TimeSpan, int]):</strong>  The interval to increment by.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The incremented object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">count</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">timespan</span><span class=\"o\">.</span><span class=\"n\">TimeSpan</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.incrementSecs", "modulename": "hec.hectime", "qualname": "HecTime.incrementSecs", "kind": "function", "doc": "<p>Increments this object by a specified number of intervals, which are specified in seconds</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>count (int):</strong>  The number of intervals to increment</li>\n<li><strong>interval (int):</strong>  The size of the interval in seconds. The behavior depends on whether the interval is &lt; 60:\n<ul>\n<li><code>&lt; 60</code> - the object is incremented by (count * interval) seconds</li>\n<li><code>&gt;= 60</code> - The object is incremented by (count * interval // 60) minutes</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The incremented object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">count</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.isDefined", "modulename": "hec.hectime", "qualname": "HecTime.isDefined", "kind": "function", "doc": "<p>Returns whether this object has been defined</p>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.defined\"><strong><code>defined</code></strong></a> property instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether this object has been defined</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.isoDate", "modulename": "hec.hectime", "qualname": "HecTime.isoDate", "kind": "function", "doc": "<p>Returns the date of the current object as YYMMDD format</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The date in YYMMDD format</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.isoTime", "modulename": "hec.hectime", "qualname": "HecTime.isoTime", "kind": "function", "doc": "<p>Returns the time of the current object as HHMMSS format</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The date in HHMMSS format</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.isTimeDefined", "modulename": "hec.hectime", "qualname": "HecTime.isTimeDefined", "kind": "function", "doc": "<p>Returns whether this object has been defined</p>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.defined\"><strong><code>defined</code></strong></a> property instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether this object has been defined</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.julian", "modulename": "hec.hectime", "qualname": "HecTime.julian", "kind": "function", "doc": "<p>Returns the number of days since 31Dec8199 for this object</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The number of days since 31Dec1899</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.lessThan", "modulename": "hec.hectime", "qualname": "HecTime.lessThan", "kind": "function", "doc": "<p>Returns whether this object is less than (earlier than) another HecTime object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (HecTime):</strong>  The other HecTime object</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use the <code>&lt;</code> operator instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether this object is less than the other object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.lessThanEqualTo", "modulename": "hec.hectime", "qualname": "HecTime.lessThanEqualTo", "kind": "function", "doc": "<p>Returns whether this object is less than (earlier than) another or equal to (same time as) HecTime object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (HecTime):</strong>  The other HecTime object</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use the <code>&lt;=</code> operator instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: Whether this object is less than or equal to the other object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.minutesSinceMidnight", "modulename": "hec.hectime", "qualname": "HecTime.minutesSinceMidnight", "kind": "function", "doc": "<p>Returns the number of minutes past midnight for this object</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: the number of minutes past midnight</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.NotEqualTo", "modulename": "hec.hectime", "qualname": "HecTime.NotEqualTo", "kind": "function", "doc": "<p>Returns whether this object is not equivalent to another</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (Union[&quot;HecTime&quot;, datetime]):</strong>  The object to compare to</li>\n</ul>\n\n<h6 id=\"deprrecated\">Deprrecated:</h6>\n\n<blockquote>\n  <p>Use <code>!=</code> operator instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: The result of the comparison</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.secondsSinceMidnight", "modulename": "hec.hectime", "qualname": "HecTime.secondsSinceMidnight", "kind": "function", "doc": "<p>Returns the number of seconds past midnight for this object</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: the number of seconds past midnight</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.set", "modulename": "hec.hectime", "qualname": "HecTime.set", "kind": "function", "doc": "<p>Set the object to a specified date/time. Valid parameters are:</p>\n\n<ul>\n<li><strong><code>set(timeInt: int)</code></strong> sets the time to the value of <code>timeInt</code> for the current granularity</li>\n<li><strong><code>set(dateTimeStr: str)</code></strong> sets the time to the results of <a href=\"#HecTime.parseDateTimeStr\">parseDateTimeStr</a>(<code>dateTimeStr</code>)</li>\n<li><strong><code>set(dt: datetime)</code></strong> sets the time to the value of <code>dt</code></li>\n<li><strong><code>set(values: Union[list[int],tuple[int,...]])</code></strong> sets the time to <code>values</code></li>\n<li><strong><code>set(otherHecTime: HecTime)</code></strong> sets the time and granularity to be the same as <code>otherHecTime</code></li>\n<li><strong><code>set(dateStr: str, timeStr: str)</code></strong> sets the time to the results of <a href=\"#HecTime.parseDateTimeStr\">parseDateTimeStr</a>(<code>dateStr</code>+\"&nbsp;\"+<code>timeStr</code>)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: <code>0</code> if date/time is successfully set, otherwise non-zero</p>\n</blockquote>\n\n<h6 id=\"see-also\">See Also:</h6>\n\n<blockquote>\n  <p><a href=\"#parseDateTimeStr\"><strong><code>parseDateTimeStr()</code></strong></a>\n  <br><a href=\"#HecTime.strptime\"><strong><code>HecTime.strptime()</code></strong></a></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.setCurrent", "modulename": "hec.hectime", "qualname": "HecTime.setCurrent", "kind": "function", "doc": "<p>Sets this object to the current time</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.setDate", "modulename": "hec.hectime", "qualname": "HecTime.setDate", "kind": "function", "doc": "<p>Sets the date portion only from a string</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dateStr (str):</strong>  The date string. Any time portion is ignored</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: <code>0</code> on success or <code>-1</code> on failure</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dateStr</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.setDefaultDateStyle", "modulename": "hec.hectime", "qualname": "HecTime.setDefaultDateStyle", "kind": "function", "doc": "<p>Sets the default date style</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>style (int):</strong>  The default date style</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.default_date_style\"><strong>default_date_style</strong></a> property instead</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">style</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.setJulian", "modulename": "hec.hectime", "qualname": "HecTime.setJulian", "kind": "function", "doc": "<p>Sets the date portion from the number of days since 1899, and optionally the time portion</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>julian (int):</strong>  The number of days since 1899</li>\n<li><strong>minutesPastMidnight (Optional[int], optional):</strong>  The number of minutes past midnight for the time portion. Defaults to None.</li>\n<li><strong>secondsPastMinute (Optional[int], optional):</strong>  The number of seconds past the minute for the time portion. Defaults to None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">julian</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">minutesPastMidnight</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">secondsPastMinute</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.setMinutes", "modulename": "hec.hectime", "qualname": "HecTime.setMinutes", "kind": "function", "doc": "<p>Set the date and time portions of this object from the number of minutes since 1899</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>totalMinutes (int):</strong>  The number of minutes since 1899</li>\n<li><strong>timeZoneOffset (Optional[Union[int, &quot;ZoneInfo&quot;]], optional):</strong>  The time zone to represent this object in. Defaults to None.\nIf <code>int</code>, the number of minutes <em>behind</em> UTC (positive for western longitudes)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>HecTimeException:</strong>  if <code>timeZoneOffset</code> is not an integer or <code>ZoneInfo</code> object, or if the UTC offset cannot be\ndetermed for the <code>ZoneInfo</code> object</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">totalMinutes</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">timeZoneOffset</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.setSeconds", "modulename": "hec.hectime", "qualname": "HecTime.setSeconds", "kind": "function", "doc": "<p>Sets the date and time portions of this object from the number seconds since 1970-01-01T00:00:00Z</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>totalSeconds (int):</strong>  The number of seconds since 1970-01-01T00:00:00Z (same as Python timestamps and seconds of Unix Epoch)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">totalSeconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.setTime", "modulename": "hec.hectime", "qualname": "HecTime.setTime", "kind": "function", "doc": "<p>Set the time portion of this object from a time string with or without the date portion</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>timeStr (str):</strong>  the time string</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: <code>0</code> on success or <code>-1</code> if the time string cannot be parsed</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">timeStr</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.setTimeGranularity", "modulename": "hec.hectime", "qualname": "HecTime.setTimeGranularity", "kind": "function", "doc": "<p>Sets the granularity, keeping the existing time values if possible</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>granularity (int):</strong>  The new granularity</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.granularity\"><strong>granularity</strong></a> property instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">granularity</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.setTimeGranularityInSeconds", "modulename": "hec.hectime", "qualname": "HecTime.setTimeGranularityInSeconds", "kind": "function", "doc": "<p>Not supported in this implementation</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">granularityInSeconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.setTimeInMillis", "modulename": "hec.hectime", "qualname": "HecTime.setTimeInMillis", "kind": "function", "doc": "<p>Sets the date and time portions of this object from the number milliseconds since 1970-01-01T00:00:00Z</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>milliseconds (int):</strong>  The number of seconds since 1970-01-01T00:00:00Z (same as Java milliseconds and milliseconds of Unix Epoch)</li>\n<li><strong>timeZoneOffset (Optional[Union[int, &quot;ZoneInfo&quot;]], optional):</strong>  The time zone to represent this object in. Defaults to None.\nIf <code>int</code>, the number of minutes <em>behind</em> UTC (positive for western longitudes)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">milliseconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">timeZoneOffset</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">zoneinfo</span><span class=\"o\">.</span><span class=\"n\">ZoneInfo</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.setUndefined", "modulename": "hec.hectime", "qualname": "HecTime.setUndefined", "kind": "function", "doc": "<p>Sets this object to the undefined state.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.setXML", "modulename": "hec.hectime", "qualname": "HecTime.setXML", "kind": "function", "doc": "<p>Sets this object from an ISO 8601 date/time string.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dateTimeStr (str):</strong>  The date/time string</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>The <a href=\"#HecTime(set)\"><strong><code>set()</code></strong></a> function handles this. Use it instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: <code>0</code> on success, <code>-1</code> otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dateTimeStr</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.setYearMonthDay", "modulename": "hec.hectime", "qualname": "HecTime.setYearMonthDay", "kind": "function", "doc": "<p>Sets the date portion from a year, month, and day, and optioally the time portion from minutes past midnight</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>year (int):</strong>  The year</li>\n<li><strong>month (int):</strong>  The month</li>\n<li><strong>day (int):</strong>  The day</li>\n<li><strong>minutesPastMidnight (Optional[int]):</strong>  The minutes past midnight</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">month</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">day</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">minutesPastMidnight</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.showTimeAsBeginningOfDay", "modulename": "hec.hectime", "qualname": "HecTime.showTimeAsBeginningOfDay", "kind": "function", "doc": "<p>Sets whether to show midnight as hour 0 instead of hour 24 of the previous day</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>state (bool):</strong>  Whether to show midnight as hour 0 instead of hour 24 of the previous day</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.midnight_as_2400\"><strong>midnight_as_2400</strong></a> property instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">state</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.strftime", "modulename": "hec.hectime", "qualname": "HecTime.strftime", "kind": "function", "doc": "<p>Returns a string representing the date and time in the specified format.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>format (str):</strong>  The format string.\nFormat specfics can be found <a href=\"https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior\"><strong>here</strong></a>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The formatted date and time</p>\n</blockquote>\n\n<h6 id=\"see-also\">See Also:</h6>\n\n<blockquote>\n  <ul>\n  <li><a href=\"#Hectime.date\"><code>date()</code></a></li>\n  <li><a href=\"#Hectime.dateAndTime\"><code>dateAndTime()</code></a></li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.strptime", "modulename": "hec.hectime", "qualname": "HecTime.strptime", "kind": "function", "doc": "<p>Sets this object from a string representation and a matching format.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dateTimeStr (str):</strong>  The string to parse.</li>\n<li><strong>format (str):</strong>  The format describing the string.\nFormat specfics can be found <a href=\"https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior\"><strong>here</strong></a>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The object updated from the string representation and formt.</p>\n</blockquote>\n\n<h6 id=\"see-also\">See Also:</h6>\n\n<blockquote>\n  <p><a href=\"#parseDateTimeStr\"><strong><code>parseDateTimeStr()</code></strong></a>\n  <br><a href=\"#HecTime.set\"><strong><code>HecTime.set()</code></strong></a></p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dateTimeStr</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.subtract", "modulename": "hec.hectime", "qualname": "HecTime.subtract", "kind": "function", "doc": "<p>Subtracts an integer number of granules or HecTime object from this one</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other (Union[int, &quot;HecTime&quot;]):</strong>  The number of granules or HecTime object to subtract</li>\n</ul>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use the <code>-=</code> operator instead instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.subtractDays", "modulename": "hec.hectime", "qualname": "HecTime.subtractDays", "kind": "function", "doc": "<p>Subtracts a number of days from the object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>days (int):</strong>  the number of days to subtract.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">days</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.subtractHours", "modulename": "hec.hectime", "qualname": "HecTime.subtractHours", "kind": "function", "doc": "<p>Subtracts a number of hours fram the object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>hours (int):</strong>  the number of hours to subtract.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">hours</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.subtractMinutes", "modulename": "hec.hectime", "qualname": "HecTime.subtractMinutes", "kind": "function", "doc": "<p>Subtracts a number of minutes from the object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>minutes (int):</strong>  the number of minutes to subtract.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">minutes</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.subtractSeconds", "modulename": "hec.hectime", "qualname": "HecTime.subtractSeconds", "kind": "function", "doc": "<p>Subtracts a number of seconds from the object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>seconds (int):</strong>  the number of seconds to subtract.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>HecTime: The modified object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">seconds</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">hectime</span><span class=\"o\">.</span><span class=\"n\">HecTime</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.time", "modulename": "hec.hectime", "qualname": "HecTime.time", "kind": "function", "doc": "<p>Returns a string representing the time portion</p>\n\n<ul>\n<li>withColons = True (default), <code>[..., 6, 8, 23]</code> is retuned is <code>06:08:23</code></li>\n<li>withColons = False, <code>[..., 6, 8, 23]</code> is retuned is <code>0608</code></li>\n</ul>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>withColons (Optional[bool], optional):</strong>  Specifies with or without colons. Defaults to <code>True</code>.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The time portion string with colons (hour, minute, and second), or without colons (hour, minute only))</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">withColons</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.timeGranularity", "modulename": "hec.hectime", "qualname": "HecTime.timeGranularity", "kind": "function", "doc": "<p>Returns the granularity of this object</p>\n\n<h6 id=\"deprecated\">Deprecated:</h6>\n\n<blockquote>\n  <p>Use <a href=\"#HecTime.granularity\"><strong>granularity</strong></a> property instead</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The granularity</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.hectime.HecTime.toString", "modulename": "hec.hectime", "qualname": "HecTime.toString", "kind": "function", "doc": "<p>Not supported in this implementation</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">style</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval", "modulename": "hec.interval", "kind": "module", "doc": "<p>Provides standard time intervals</p>\n"}, {"fullname": "hec.interval.IntervalException", "modulename": "hec.interval", "qualname": "IntervalException", "kind": "class", "doc": "<p>Exception specific to Interval operations</p>\n", "bases": "hec.timespan.TimeSpanException"}, {"fullname": "hec.interval.Interval", "modulename": "hec.interval", "qualname": "Interval", "kind": "class", "doc": "<p>Class to hold information about time series recurrence intervals.</p>\n\n<p>Intervals are a restriction of the TimeSpan base class that also hold extra information.</p>\n\n<ul>\n<li><strong>Restriction:</strong> At most one of <code>years</code>, <code>months</code>, <code>days</code>, <code>hours</code>, and <code>minutes</code> can be non-zero, and <code>seconds</code> must be zero.</li>\n<li><strong>Extension:</strong>\n<ul>\n<li>Each interval has a name that may be context specific.</li>\n<li>Each also has a specified number of minutes:\n<ul>\n<li>For non-calendar-based intervals, the minutes are the actual number of minutes in the interval</li>\n<li>For calendar-based intervals, the minutes are a characteristic number based on standard calendar items:<pre>\n<ul>\n<li>Tri-Month:  minutes =  10 * 1440       =    14400</li>\n<li>Semi-Month: minutes =  15 * 1440       =    21600</li>\n<li>1 Month:    minutes =  30 * 1440       =    43200</li>\n<li>1 Year:     minutes = 365 * 1440       =   525600</li>\n<li>1 Decade:   minutes = 365 * 1440 * 10  =  5256000</li>\n<li>1 Century:  minutes = 365 * 1440 * 100 = 52560000</pre></li>\n</ul></li>\n</ul></li>\n</ul></li>\n</ul>\n\n<p>Intervals should not need to be created by the user, as intervals for the following three contexts are\ncreated during initialization of the interval module:</p>\n\n<ul>\n<li><strong>CWMS Context:</strong> Contains Intervals used with CWMS</li>\n<li><strong>DSS Context:</strong> Contains Intervals used with HEC-DSS files</li>\n<li><strong>DSS Block Size Context:</strong> Contains Intervals for the record block sizes in HEC-DSS files</li>\n</ul>\n\n<p>Each context has its own set of four static methods that retrieve Interval objects or their names:</p>\n\n<ul>\n<li><code>getAny<em>Context</em>()</code></li>\n<li><code>getAny<em>Context</em>Name()</code></li>\n<li><code>getAll<em>Context</em>()</code></li>\n<li><code>getAll<em>Context</em>Names()</code></li>\n</ul>\n\n<p>Where <em>Context</em> is <code>Cwms</code>, <code>Dss</code>, or <code>DssBlock</code>.</p>\n\n<p>There are similar static methods that retrieve Interval objects or their names from all contexts:</p>\n\n<ul>\n<li><code>getAny()</code></li>\n<li><code>getAnyName()</code></li>\n<li><code>getAll()</code></li>\n<li><code>getAllNames()</code></li>\n</ul>\n", "bases": "hec.timespan.TimeSpan"}, {"fullname": "hec.interval.Interval.__init__", "modulename": "hec.interval", "qualname": "Interval.__init__", "kind": "function", "doc": "<p>Initializer used by module</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">timespan</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">minutes</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "hec.interval.Interval.MINUTES", "modulename": "hec.interval", "qualname": "Interval.MINUTES", "kind": "variable", "doc": "<p>Dictionary that holds interval minutes, accessed by interval name. Includes all contexts.\n<details>\n<summary>Click to show contents.</summary></p>\n\n<pre><table>\n<tr><th>Name</th><th>Minutes</th><th>Context(s)</th></tr>\n<tr><td>0</td><td>0</td><td>CWMS</td></tr>\n<tr><td>Irr</td><td>0</td><td>CWMS</td></tr>\n<tr><td>Ir-Century</td><td>0</td><td>DSS</td></tr>\n<tr><td>Ir-Day</td><td>0</td><td>DSS</td></tr>\n<tr><td>Ir-Decade</td><td>0</td><td>DSS</td></tr>\n<tr><td>Ir-Month</td><td>0</td><td>DSS</td></tr>\n<tr><td>Ir-Year</td><td>0</td><td>DSS</td></tr>\n<tr><td>1Minute</td><td>1</td><td>CWMS, DSS</td></tr>\n<tr><td>2Minute</td><td>2</td><td>DSS</td></tr>\n<tr><td>2Minutes</td><td>2</td><td>CWMS</td></tr>\n<tr><td>3Minute</td><td>3</td><td>DSS</td></tr>\n<tr><td>3Minutes</td><td>3</td><td>CWMS</td></tr>\n<tr><td>4Minute</td><td>4</td><td>DSS</td></tr>\n<tr><td>4Minutes</td><td>4</td><td>CWMS</td></tr>\n<tr><td>5Minute</td><td>5</td><td>DSS</td></tr>\n<tr><td>5Minutes</td><td>5</td><td>CWMS</td></tr>\n<tr><td>6Minute</td><td>6</td><td>DSS</td></tr>\n<tr><td>6Minutes</td><td>6</td><td>CWMS</td></tr>\n<tr><td>10Minute</td><td>10</td><td>DSS</td></tr>\n<tr><td>10Minutes</td><td>10</td><td>CWMS</td></tr>\n<tr><td>12Minute</td><td>12</td><td>DSS</td></tr>\n<tr><td>12Minutes</td><td>12</td><td>CWMS</td></tr>\n<tr><td>15Minute</td><td>15</td><td>DSS</td></tr>\n<tr><td>15Minutes</td><td>15</td><td>CWMS</td></tr>\n<tr><td>20Minute</td><td>20</td><td>DSS</td></tr>\n<tr><td>20Minutes</td><td>20</td><td>CWMS</td></tr>\n<tr><td>30Minute</td><td>30</td><td>DSS</td></tr>\n<tr><td>30Minutes</td><td>30</td><td>CWMS</td></tr>\n<tr><td>1Hour</td><td>60</td><td>CWMS, DSS</td></tr>\n<tr><td>2Hour</td><td>120</td><td>DSS</td></tr>\n<tr><td>2Hours</td><td>120</td><td>CWMS</td></tr>\n<tr><td>3Hour</td><td>180</td><td>DSS</td></tr>\n<tr><td>3Hours</td><td>180</td><td>CWMS</td></tr>\n<tr><td>4Hour</td><td>240</td><td>DSS</td></tr>\n<tr><td>4Hours</td><td>240</td><td>CWMS</td></tr>\n<tr><td>6Hour</td><td>360</td><td>DSS</td></tr>\n<tr><td>6Hours</td><td>360</td><td>CWMS</td></tr>\n<tr><td>8Hour</td><td>480</td><td>DSS</td></tr>\n<tr><td>8Hours</td><td>480</td><td>CWMS</td></tr>\n<tr><td>12Hour</td><td>720</td><td>DSS</td></tr>\n<tr><td>12Hours</td><td>720</td><td>CWMS</td></tr>\n<tr><td>1Day</td><td>1440</td><td>CWMS, DSS</td></tr>\n<tr><td>2Day</td><td>2880</td><td>DSS</td></tr>\n<tr><td>2Days</td><td>2880</td><td>CWMS</td></tr>\n<tr><td>3Day</td><td>4320</td><td>DSS</td></tr>\n<tr><td>3Days</td><td>4320</td><td>CWMS</td></tr>\n<tr><td>4Day</td><td>5760</td><td>DSS</td></tr>\n<tr><td>4Days</td><td>5760</td><td>CWMS</td></tr>\n<tr><td>5Day</td><td>7200</td><td>DSS</td></tr>\n<tr><td>5Days</td><td>7200</td><td>CWMS</td></tr>\n<tr><td>6Day</td><td>8640</td><td>DSS</td></tr>\n<tr><td>6Days</td><td>8640</td><td>CWMS</td></tr>\n<tr><td>1Week</td><td>10080</td><td>CWMS, DSS</td></tr>\n<tr><td>Tri-Month</td><td>14400</td><td>DSS</td></tr>\n<tr><td>Semi-Month</td><td>21600</td><td>DSS</td></tr>\n<tr><td>1Month</td><td>43200</td><td>CWMS, DSS, DSS BLOCK SIZE</td></tr>\n<tr><td>1Year</td><td>525600</td><td>CWMS, DSS, DSS BLOCK SIZE</td></tr>\n<tr><td>1Decade</td><td>5256000</td><td>DSS BLOCK SIZE</td></tr>\n<tr><td>1Century</td><td>52560000</td><td>DSS BLOCK SIZE</td></tr>\n</table></pre>\n\n<p></details></p>\n", "annotation": ": dict[str, int]", "default_value": "{&#x27;0&#x27;: 0, &#x27;Irr&#x27;: 0, &#x27;1Minute&#x27;: 1, &#x27;2Minutes&#x27;: 2, &#x27;3Minutes&#x27;: 3, &#x27;4Minutes&#x27;: 4, &#x27;5Minutes&#x27;: 5, &#x27;6Minutes&#x27;: 6, &#x27;10Minutes&#x27;: 10, &#x27;12Minutes&#x27;: 12, &#x27;15Minutes&#x27;: 15, &#x27;20Minutes&#x27;: 20, &#x27;30Minutes&#x27;: 30, &#x27;1Hour&#x27;: 60, &#x27;2Hours&#x27;: 120, &#x27;3Hours&#x27;: 180, &#x27;4Hours&#x27;: 240, &#x27;6Hours&#x27;: 360, &#x27;8Hours&#x27;: 480, &#x27;12Hours&#x27;: 720, &#x27;1Day&#x27;: 1440, &#x27;2Days&#x27;: 2880, &#x27;3Days&#x27;: 4320, &#x27;4Days&#x27;: 5760, &#x27;5Days&#x27;: 7200, &#x27;6Days&#x27;: 8640, &#x27;1Week&#x27;: 10080, &#x27;1Month&#x27;: 43200, &#x27;1Year&#x27;: 525600, &#x27;Ir-Day&#x27;: 0, &#x27;Ir-Month&#x27;: 0, &#x27;Ir-Year&#x27;: 0, &#x27;Ir-Decade&#x27;: 0, &#x27;Ir-Century&#x27;: 0, &#x27;2Minute&#x27;: 2, &#x27;3Minute&#x27;: 3, &#x27;4Minute&#x27;: 4, &#x27;5Minute&#x27;: 5, &#x27;6Minute&#x27;: 6, &#x27;10Minute&#x27;: 10, &#x27;12Minute&#x27;: 12, &#x27;15Minute&#x27;: 15, &#x27;20Minute&#x27;: 20, &#x27;30Minute&#x27;: 30, &#x27;2Hour&#x27;: 120, &#x27;3Hour&#x27;: 180, &#x27;4Hour&#x27;: 240, &#x27;6Hour&#x27;: 360, &#x27;8Hour&#x27;: 480, &#x27;12Hour&#x27;: 720, &#x27;2Day&#x27;: 2880, &#x27;3Day&#x27;: 4320, &#x27;4Day&#x27;: 5760, &#x27;5Day&#x27;: 7200, &#x27;6Day&#x27;: 8640, &#x27;Tri-Month&#x27;: 14400, &#x27;Semi-Month&#x27;: 21600, &#x27;1Decade&#x27;: 5256000, &#x27;1Century&#x27;: 52560000}"}, {"fullname": "hec.interval.Interval.getCwms", "modulename": "hec.interval", "qualname": "Interval.getCwms", "kind": "function", "doc": "<p>Returns a CWMS interval with the specified name or minutes</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>key (Union[str, int]):</strong>  The name or (actual or characteristic) minutes of the interval to retrieve.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>IntervalException:</strong>  if no CWMS interval exists with the specified key</li>\n<li><strong>TypeError:</strong>  If the key is not a string or integer</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Interval: The CWMS interval</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.getDss", "modulename": "hec.interval", "qualname": "Interval.getDss", "kind": "function", "doc": "<p>Returns an HEC-DSS interval with the specified name or minutes</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>key (Union[str, int]):</strong>  The name or (actual or characteristic) minutes of the interval to retrieve.</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>IntervalException:</strong>  if no Dss interval exists with the specified key</li>\n<li><strong>TypeError:</strong>  If the key is not a string or integer</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Interval: The Dss interval</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.getAny", "modulename": "hec.interval", "qualname": "Interval.getAny", "kind": "function", "doc": "<p>Retuns a matched <code>Interval</code> object in any context, or None if there is no such object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Callable[[Interval], bool]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.isIrregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[Interval]: A matched <code>Interval</code> object or None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.getAnyName", "modulename": "hec.interval", "qualname": "Interval.getAnyName", "kind": "function", "doc": "<p>Retuns the name of a matched <code>Interval</code> object in the any context, or None if there is no such object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Callable[[Interval], bool]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.isIrregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[str]: The name of a matched <code>Interval</code> object or None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.getAll", "modulename": "hec.interval", "qualname": "Interval.getAll", "kind": "function", "doc": "<p>Retuns list of matched <code>Interval</code> objects in the any context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Optional[Callable[[Interval], bool]]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter. Defaults to None.\nIf None, all <code>Interval</code> objects in all contexts are matched.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.isIrregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[Interval]: A list of matched <code>Interval</code> objects (may be empty)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.getAllNames", "modulename": "hec.interval", "qualname": "Interval.getAllNames", "kind": "function", "doc": "<p>Retuns list of names of matched <code>Interval</code> objects in the any context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Optional[Callable[[Interval], bool]]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter. Defaults to None.\nIf None, all <code>Interval</code> objects in all contexts are matched.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.isIrregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: A list of names of matched <code>Interval</code> objects (may be empty)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.getAnyCwms", "modulename": "hec.interval", "qualname": "Interval.getAnyCwms", "kind": "function", "doc": "<p>Retuns a matched <code>Interval</code> object in the CWMS context, or None if there is no such object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Callable[[Interval], bool]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.isIrregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[Interval]: A matched <code>Interval</code> object or None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.getAnyCwmsName", "modulename": "hec.interval", "qualname": "Interval.getAnyCwmsName", "kind": "function", "doc": "<p>Retuns the name of a matched <code>Interval</code> object in the CWMS context, or None if there is no such object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Callable[[Interval], bool]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.isIrregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[str]: The name of a matched <code>Interval</code> object or None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.getAllCwms", "modulename": "hec.interval", "qualname": "Interval.getAllCwms", "kind": "function", "doc": "<p>Retuns list of matched <code>Interval</code> objects in the CWMS context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Optional[Callable[[Interval], bool]]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter. Defaults to None.\nIf None, all <code>Interval</code> objects in the context are matched.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.isIrregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[Interval]: A list of matched <code>Interval</code> objects (may be empty)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.getAllCwmsNames", "modulename": "hec.interval", "qualname": "Interval.getAllCwmsNames", "kind": "function", "doc": "<p>Retuns list of names of matched <code>Interval</code> objects in the CWMS context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Optional[Callable[[Interval], bool]]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter. Defaults to None.\nIf None, all <code>Interval</code> objects in the context are matched.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.isIrregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: A list of names of matched <code>Interval</code> objects (may be empty)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.getAnyDss", "modulename": "hec.interval", "qualname": "Interval.getAnyDss", "kind": "function", "doc": "<p>Retuns a matched <code>Interval</code> object in the DSS context, or None if there is no such object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Callable[[Interval], bool]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.isIrregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[Interval]: A matched <code>Interval</code> object or None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.getAnyDssName", "modulename": "hec.interval", "qualname": "Interval.getAnyDssName", "kind": "function", "doc": "<p>Retuns the name of a matched <code>Interval</code> object in the DSS context, or None if there is no such object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Callable[[Interval], bool]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.isIrregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[str]: The name of a matched <code>Interval</code> object or None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.getAllDss", "modulename": "hec.interval", "qualname": "Interval.getAllDss", "kind": "function", "doc": "<p>Retuns list of matched <code>Interval</code> objects in the DSS context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Optional[Callable[[Interval], bool]]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter. Defaults to None.\nIf None, all <code>Interval</code> objects in the context are matched.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.isIrregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[Interval]: A list of matched <code>Interval</code> objects (may be empty)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.getAllDssNames", "modulename": "hec.interval", "qualname": "Interval.getAllDssNames", "kind": "function", "doc": "<p>Retuns list of names of matched <code>Interval</code> objects in the DSS context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Optional[Callable[[Interval], bool]]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter. Defaults to None.\nIf None, all <code>Interval</code> objects in the context are matched.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.isIrregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: A list of names of matched <code>Interval</code> objects (may be empty)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.getAnyDssBlock", "modulename": "hec.interval", "qualname": "Interval.getAnyDssBlock", "kind": "function", "doc": "<p>Retuns a matched <code>Interval</code> object in the DSS block size context, or None if there is no such object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Callable[[Interval], bool]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.isIrregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[Interval]: A matched <code>Interval</code> object or None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.getAnyDssBlockName", "modulename": "hec.interval", "qualname": "Interval.getAnyDssBlockName", "kind": "function", "doc": "<p>Retuns the name of a matched <code>Interval</code> object in the DSS block size context, or None if there is no such object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Callable[[Interval], bool]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.isIrregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[str]: The name of a matched <code>Interval</code> object or None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.getAllDssBlock", "modulename": "hec.interval", "qualname": "Interval.getAllDssBlock", "kind": "function", "doc": "<p>Retuns list of matched <code>Interval</code> objects in the DSS block size context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Optional[Callable[[Interval], bool]]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter. Defaults to None.\nIf None, all <code>Interval</code> objects in the context are matched.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.isIrregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[Interval]: A list of matched <code>Interval</code> objects (may be empty)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.getAllDssBlockNames", "modulename": "hec.interval", "qualname": "Interval.getAllDssBlockNames", "kind": "function", "doc": "<p>Retuns list of names of matched <code>Interval</code> objects in the DSS block size context</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>matcher (Optional[Callable[[Interval], bool]]):</strong>  A function that returns True or False when passed an <code>Interval</code> object parameter. Defaults to None.\nIf None, all <code>Interval</code> objects in the context are matched.<br>\nExamples:\n<ul>\n<li><code>lambda i : i.isIrregular</code></li>\n<li><code>lambda i : i.minutes &lt; 60</code></li>\n<li><code>lambda i : i.name.find(\"Week\") != -1</code></li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List[str]: A list of names of matched <code>Interval</code> objects (may be empty)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">matcher</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">interval</span><span class=\"o\">.</span><span class=\"n\">Interval</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.interval.Interval.minutes", "modulename": "hec.interval", "qualname": "Interval.minutes", "kind": "variable", "doc": "<p>The minutes (actual or characteristic) of this object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": int"}, {"fullname": "hec.interval.Interval.name", "modulename": "hec.interval", "qualname": "Interval.name", "kind": "variable", "doc": "<p>The name of this object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.interval.Interval.isRegular", "modulename": "hec.interval", "qualname": "Interval.isRegular", "kind": "variable", "doc": "<p>Whether this object represents a regular interval</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.interval.Interval.isIrregular", "modulename": "hec.interval", "qualname": "Interval.isIrregular", "kind": "variable", "doc": "<p>Whether this object represents an irregular interval</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read-only</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "hec.location", "modulename": "hec.location", "kind": "module", "doc": "<p>Provides location info</p>\n"}, {"fullname": "hec.location.LocationException", "modulename": "hec.location", "qualname": "LocationException", "kind": "class", "doc": "<p>Exception specific to Location operations</p>\n", "bases": "builtins.Exception"}, {"fullname": "hec.location.Location", "modulename": "hec.location", "qualname": "Location", "kind": "class", "doc": "<p>Holds information about locations</p>\n"}, {"fullname": "hec.location.Location.__init__", "modulename": "hec.location", "qualname": "Location.__init__", "kind": "function", "doc": "<p>Initializes a Location object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The location name</li>\n<li><strong>office (str, optional):</strong>  The office that owns the location, if applicable. Defaults to None.</li>\n<li><strong>latitude (float, optional):</strong>  The latitude of the location. Defaults to None.</li>\n<li><strong>longitude (float, optional):</strong>  The longitude of the location. Defaults to None.</li>\n<li><strong>elevation (float, optional):</strong>  The elevation of the location. Defaults to None.</li>\n<li><strong>elevation_unit (str, optional):</strong>  The unit of elevation of the location. Defaults to None.</li>\n<li><strong>horizontal_datum (str, optional):</strong>  The horizontal datum of the specified lat/lon. Defaults to None.</li>\n<li><strong>vertical_datum (str, optional):</strong>  The vertical datum of the specified elevation. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">office</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">latitude</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">longitude</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">elevation</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">elevation_unit</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">horizontal_datum</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">vertical_datum</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "hec.location.Location.name", "modulename": "hec.location", "qualname": "Location.name", "kind": "variable", "doc": "<p>The full name of the location</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.location.Location.office", "modulename": "hec.location", "qualname": "Location.office", "kind": "variable", "doc": "<p>The office that owns the location</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.location.Location.latitude", "modulename": "hec.location", "qualname": "Location.latitude", "kind": "variable", "doc": "<p>The latitude of the location</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[float]"}, {"fullname": "hec.location.Location.longitude", "modulename": "hec.location", "qualname": "Location.longitude", "kind": "variable", "doc": "<p>The longitude of the location</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[float]"}, {"fullname": "hec.location.Location.elevation", "modulename": "hec.location", "qualname": "Location.elevation", "kind": "variable", "doc": "<p>The elevation of the location</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[float]"}, {"fullname": "hec.location.Location.elevation_unit", "modulename": "hec.location", "qualname": "Location.elevation_unit", "kind": "variable", "doc": "<p>The unit of the location's elevation</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.location.Location.horizontal_datum", "modulename": "hec.location", "qualname": "Location.horizontal_datum", "kind": "variable", "doc": "<p>The horizontal datum of the location's latitude/longitude</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.location.Location.vertical_datum", "modulename": "hec.location", "qualname": "Location.vertical_datum", "kind": "variable", "doc": "<p>The vertical datum of the location's elevation</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.location.Location.basename", "modulename": "hec.location", "qualname": "Location.basename", "kind": "variable", "doc": "<p>The name of the location up to any initial '-' character</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.location.Location.subname", "modulename": "hec.location", "qualname": "Location.subname", "kind": "variable", "doc": "<p>The name of the location after any initial '-' character</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.parameter", "modulename": "hec.parameter", "kind": "module", "doc": "<p>Provides parameer info</p>\n"}, {"fullname": "hec.parameter.ParameterException", "modulename": "hec.parameter", "qualname": "ParameterException", "kind": "class", "doc": "<p>Exception specific to Parameter operations</p>\n", "bases": "builtins.Exception"}, {"fullname": "hec.parameter.Parameter", "modulename": "hec.parameter", "qualname": "Parameter", "kind": "class", "doc": "<p>Holds info (name and unit) for a parameter</p>\n"}, {"fullname": "hec.parameter.Parameter.__init__", "modulename": "hec.parameter", "qualname": "Parameter.__init__", "kind": "function", "doc": "<p>Initializer</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The full parmeter name</li>\n<li><strong>unit_or_system (Optional[str]):</strong> <br>\n<ul>\n<li>If <code>EN</code> or <code>None</code>, the default English unit for the base parameter will be assigned</li>\n<li>if <code>SI</code>,  the default Syst\u00e8me International unit for the base parameter will be assigned</li>\n<li>Otherwise the specified unit will be assigned</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ParameterException:</strong>  If the parameter name does not contain a valid base parameter name,\nor if the specified unit is not valid for the parameter</li>\n<li><strong>KeyError:</strong>  If the specified unit is not a valid unit name, alias or Pint unit definition</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">unit_or_system</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "hec.parameter.Parameter.name", "modulename": "hec.parameter", "qualname": "Parameter.name", "kind": "variable", "doc": "<p>The full name of the parameter as specified</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.parameter.Parameter.basename", "modulename": "hec.parameter", "qualname": "Parameter.basename", "kind": "variable", "doc": "<p>The name of the parameter as specified up to any initial '-' character</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.parameter.Parameter.subname", "modulename": "hec.parameter", "qualname": "Parameter.subname", "kind": "variable", "doc": "<p>The name of the parameter as specified after any initial '-' character</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.parameter.Parameter.base_parameter", "modulename": "hec.parameter", "qualname": "Parameter.base_parameter", "kind": "variable", "doc": "<p>The actual base parameter used. Will be same as <code>basename</code> unless the\nparameter was created using a parameter alias</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.parameter.Parameter.unit", "modulename": "hec.parameter", "qualname": "Parameter.unit", "kind": "variable", "doc": "<p>The unit assigned to the parameter</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.parameter.Parameter.set_unit_or_system", "modulename": "hec.parameter", "qualname": "Parameter.set_unit_or_system", "kind": "function", "doc": "<p>Assigns a unit to this parameter</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit_or_system (str):</strong> <br>\n<ul>\n<li>If <code>EN</code>, the default English unit for the base parameter will be assigned</li>\n<li>if <code>SI</code>,  the default Syst\u00e8me International unit for the base parameter will be assigned</li>\n<li>Otherwise the specified unit will be assigned</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>ParameterException:</strong>  If the specified unit is not valid for the parameter</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">unit_or_system</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timespan", "modulename": "hec.timespan", "kind": "module", "doc": "<p>Provides basic time span functionality.\nLike timedelta, but with calendar capabilities and without sub-second resolution.</p>\n"}, {"fullname": "hec.timespan.TimeSpanException", "modulename": "hec.timespan", "qualname": "TimeSpanException", "kind": "class", "doc": "<p>Exception specific to TimeSpan operations</p>\n", "bases": "builtins.Exception"}, {"fullname": "hec.timespan.TimeSpan", "modulename": "hec.timespan", "qualname": "TimeSpan", "kind": "class", "doc": "<p>Class to provide generic timespan capabilities that includes both calendar-based and non-calendar-based\nfunctionality. Internal fields are:</p>\n\n<ul>\n<li>years</li>\n<li>months</li>\n<li>days</li>\n<li>hours</li>\n<li>minutes</li>\n<li>seconds</li>\n</ul>\n\n<p><strong>Comparison/Contrast with <code>timedelta</code></strong></p>\n\n<pre>\n<table>\n<tr><th>timedelta</th><th>TimeSpan</th></tr>\n<tr><td><b>Does not </b> support calendar-based\noperations</td><td><b>Does</b> support calendar-based operations</td></tr>\n<tr><td><b>Does</b> have sub-second resolution</td><td><b>Does not</b> have sub-second resolution</td></tr>\n<tr><td>Can <b>always</b> be combined/compared\nwith other timedelta objects</td><td>\n<ul>\n<li>Can <b>always</b> be combined with other TimeSpan\nobjects</li>\n<li>Can be combined with timedelta objects <b>if</b> <em>years</em>\nand <em>months</em> are both zero</li>\n<li>Can be compared with other TimeSpan objects <b>if</b> <em>days</em>\nvalues don't conflict with <em>years</em> or <em>months</em> values</li>\n<li>Can be compared with timedelta objects <b>if</b> <em>years</em>\nand <em>months</em> are both zero</li>\n</ul>\n</td></tr>\n</table>\n</pre>\n\n<p><strong>Fractional Months</strong></p>\n\n<p>Since HEC-DSS supports intervals of 1/3 and 1/2 month, the month portion of a <code>TimeSpan</code> object may be an integer\nor a <code>Fraction</code> object from the fractions package. Rules for using fractions are:</p>\n\n<ul>\n<li>Fractions can be used for the month portion only</li>\n<li><code>n/2</code> and <code>n/3</code> are the only fractions allowed</li>\n<li>Fractions can be specified as:\n<ul>\n<li>mathimatical expression (<code>1/3</code>)</li>\n<li>Fraction object (<code>Fraction(1,3)</code>)</li>\n<li>string (<code>\"1/3\"</code>)</li>\n</ul></li>\n</ul>\n\n<p><strong>Uninitialized Objects</strong></p>\n\n<p>Objects constructed without any initializer (e.g., <code>ts = TimeSpan()</code>) are initialized to be instantaneous (all values are zero).</p>\n\n<p><a id=\"string_representation\"></a>\n<strong>String Representation</strong></p>\n\n<p>The <code>repr</code> function returns: <pre>TimeSpan([<em>years</em>, <em>months</em>, <em>days</em>, <em>hours</em>, <em>minutes</em>, <em>seconds</em>])</pre>\nThe <code>str</code> function returns one or two ISO 8601 duration strings or <em>pseudo-</em>duration strings if the months value is a fraction.</p>\n\n<ul>\n<li>If the object has both calendar- and non-calendar-based (non-zero) values, and the signs of those portions are different,\nthe result will be one duration string for the calendar portion and one for the non-calendar portion, separated by a comma.</li>\n<li>Otherwise the result will be a single duration string.</li>\n</ul>\n\n<pre>\nPT0S\nP1Y2M3DT4H5M\n-P1Y2M3DT4H5M\nP1Y2M,-P3DT4H5M\n-P1Y2M,P3DT4H5M\nP3Y1/3M\n-P2/3M\n</pre>\n"}, {"fullname": "hec.timespan.TimeSpan.__init__", "modulename": "hec.timespan", "qualname": "TimeSpan.__init__", "kind": "function", "doc": "<p>Initialiazes the object at construction.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>Default</strong>\n<ul>\n<li><strong><code>TimeSpan()</code></strong> Initializes to default value of instantaneous (all values equal zero)</li>\n</ul></li>\n<li><p><strong>Positional</strong></p>\n\n<ul>\n<li><strong><code>TimeSpan(</code><em><code>timedelta</code></em><code>)</code></strong></li>\n<li><strong><code>TimeSpan(</code><em><code>string</code></em><code>)</code></strong> where <em>string</em> is:\n<ul>\n<li>an integer as a string</li>\n<li>one or two ISO 8601 strings or <em>pseudo-</em>duration strings as discussed under\n<a href=\"#string_representation\"><strong>String Representation</strong></a></li>\n</ul></li>\n<li><strong><code>TimeSpan(</code><em><code>list</code></em><code>)</code></strong> where <em>list</em> contains 1..6 values interpreted as years,\nmonths, days, hours, minutes, and seconds. Values must be convertable via the\n<code>int()</code> function except for the second value, which may also be convertable via the <code>Fraction()</code> constructor.</li>\n<li><strong><code>TimeSpan(</code><em><code>tuple</code></em><code>)</code></strong> where <em>tuple</em> contains 1..6 values interpreted as years,\nmonths, days, hours, minutes, and seconds. Values must be convertable via the\n<code>int()</code> function except for the second value, which may also be convertable via the <code>Fraction()</code> constructor.</li>\n<li><strong><code>TimeSpan(</code><em><code>years</code></em><code>[,</code><em><code>months</code></em><code>[,</code><em><code>days</code></em><code>[,</code><em><code>hours</code></em><code>[,</code><em><code>minutes</code></em><code>[,</code><em><code>seconds</code></em><code>]]]]])</code></strong>\nAll values must be convertable via the <code>int()</code> function except for <em>months</em>,  which may\nalso be convertable via the <code>Fraction()</code> constructor.</li>\n</ul></li>\n<li><p><strong>Keyword</strong>:<br></p>\n\n<ul>\n<li><strong><code>TimeSpan([years=</code><em><code>years</code></em><code>,] [months=</code><em><code>months</code></em><code>,] [days=</code><em><code>days</code></em><code>,] [hours=</code><em><code>hours</code></em><code>,] [minutes=</code><em><code>minutes</code></em><code>,] [seconds=</code><em><code>seconds</code></em><code>])</code></strong>\nAll values must be convertable via the <code>int()</code> function except for <em>months</em>,  which may\nalso be convertable via the <code>Fraction()</code> constructor.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSpanException:</strong>  if invalid initializers are specified</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "hec.timespan.TimeSpan.values", "modulename": "hec.timespan", "qualname": "TimeSpan.values", "kind": "variable", "doc": "<p>A list of years, months, days, hours, minutes, and seconds in this time span.\nOn read, all values will be normalized:</p>\n\n<ul>\n<li>years and days are unconstrained in magnitude</li>\n<li>integer months will be in the range of \u00b10..12</li>\n<li>fractional months normalized</li>\n<li>hours will be in the range of \u00b10..23</li>\n<li>minutes and seconds will be in the range \u00b10..59</li>\n<li>calendar-based values (years, months) will have the same sign if not zero</li>\n<li>non-calendar-based values (days, hours, minutes, seconds) will have the same sign if not zero</li>\n<li>calendar- and non-calendar-based values may have different signs</li>\n</ul>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[list[Union[int, fractions.Fraction]]]"}, {"fullname": "hec.timespan.TimeSpan.set", "modulename": "hec.timespan", "qualname": "TimeSpan.set", "kind": "function", "doc": "<p>Initialiazes or re-initializes the object.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><p><strong>Positional</strong></p>\n\n<ul>\n<li><strong><code>set(</code><em><code>timedelta</code></em><code>)</code></strong></li>\n<li><strong><code>set(</code><em><code>string</code></em><code>)</code></strong> where <em>string</em> is:\n<ul>\n<li>an integer as a string</li>\n<li>one or two ISO 8601 strings or <em>pseudo-</em>duration strings as discussed under\n<a href=\"#string_representation\"><strong>String Representation</strong></a></li>\n</ul></li>\n<li><strong><code>set(</code><em><code>list</code></em><code>)</code></strong> where <em>list</em> contains 1..6 values interpreted as years,\nmonths, days, hours, minutes, and seconds. Values must be convertable via the\n<code>int()</code> function except for the second value, which may also be convertable via the <code>Fraction()</code> constructor.</li>\n<li><strong><code>set(</code><em><code>tuple</code></em><code>)</code></strong> where <em>tuple</em> contains 1..6 values interpreted as years,\nmonths, days, hours, minutes, and seconds. Values must be convertable via the\n<code>int()</code> function except for the second value, which may also be convertable via the <code>Fraction()</code> constructor.</li>\n<li><strong><code>set(</code><em><code>years</code></em><code>[,</code><em><code>months</code></em><code>[,</code><em><code>days</code></em><code>[,</code><em><code>hours</code></em><code>[,</code><em><code>minutes</code></em><code>[,</code><em><code>seconds</code></em><code>]]]]])</code></strong>\nAll values must be convertable via the <code>int()</code> function except for <em>months</em>,  which may\nalso be convertable via the <code>Fraction()</code> constructor.</li>\n</ul></li>\n<li><p><strong>Keyword</strong>:<br></p>\n\n<ul>\n<li><strong><code>set([years=</code><em><code>years</code></em><code>], [months=</code><em><code>months</code></em><code>], [days=</code><em><code>days</code></em><code>], [hours=</code><em><code>hours</code></em><code>], [minutes=</code><em><code>minutes</code></em><code>], [seconds=</code><em><code>seconds</code></em><code>])</code></strong>\nAll values must be convertable via the <code>int()</code> function except for <em>months</em>,  which may\nalso be convertable via the <code>Fraction()</code> constructor.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSpanException:</strong>  if invalid initializers are specified</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timespan.TimeSpan.total_seconds", "modulename": "hec.timespan", "qualname": "TimeSpan.total_seconds", "kind": "function", "doc": "<p>Returns the total number of seconds represented by this object</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSpanException:</strong>  if the object contains any calendar-based values</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The total number of seconds</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.timespan.TimeSpan.timedelta", "modulename": "hec.timespan", "qualname": "TimeSpan.timedelta", "kind": "function", "doc": "<p>Returns an equivalent <code>timedelta</code> object</p>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>TimeSpanException:</strong>  if the object contains any calendar-based values</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>timedelta: The equivalent <code>timedelta</code> object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit", "modulename": "hec.unit", "kind": "module", "doc": "<p>Module for unit definitions and conversions.</p>\n\n<p>Uses the <a href=\"https://pint.readthedocs.io\">Pint unit library</a> for operations.\nFor any unit some or all of the following exist:</p>\n\n<ul>\n<li><strong>Pint unit:</strong> The Pint Unit object or a valid name or definition used to create a Pint Unit object</li>\n<li><strong>Unit name:</strong> The local name used to refer to the Pint unit</li>\n<li><strong>Unit aliases:</strong> (Optional) Aliases for the unit name\nAll Pint Units may be defined in a Pint unit registry with specified names. However those\nnames (but not the definitions) must adhere to Python identifier rules which elimiates many\ncommon unit names. Although non-identifier aliases can (sometimes) be associated with the\nunit definitions, there is no mechanism to output the units in those aliases. If a Pint Unit\ndoes not have a name, its definition is output in its place. For this reason,unit names and\naliaes are maintained in dictionaries separate from the Pint library.<br></li>\n</ul>\n\n<p><strong>Example 1:</strong> Unit name is not a valid Python identifier but is the same as the Pint Unit definition</p>\n\n<ul>\n<li>Unit name = <code>g/l</code></li>\n<li>Pint unit definition = <code>g/l</code></li>\n<li>Unit aliases =\n<ul>\n<li><code>gm/l</code></li>\n<li><code>grams per liter</code></li>\n<li><code>grams/liter</code></li>\n</ul></li>\n</ul>\n\n<pre><code>&gt;&gt;&gt; from hec import unit\n&gt;&gt;&gt; g_per_l_unit = unit.get_pint_unit('g/l')\n&gt;&gt;&gt; print(repr(g_per_l_unit))\n&lt;Unit('gram / liter')&gt;\n&gt;&gt;&gt; print(g_per_l_unit)\ngram / liter\n&gt;&gt;&gt; print(f\"{g_per_l_unit:D}\")\ngram / liter\n&gt;&gt;&gt; print(f\"{g_per_l_unit:~D}\")\ng / l\n&gt;&gt;&gt; print(f\"{g_per_l_unit:C}\")\ngram/liter\n&gt;&gt;&gt; print(f\"{g_per_l_unit:~C}\")\ng/l\n&gt;&gt;&gt; print(f\"{g_per_l_unit:P}\")\ngram/liter\n&gt;&gt;&gt; print(f\"{g_per_l_unit:~P}\")\ng/l\n&gt;&gt;&gt; print(unit.get_unit_name(g_per_l_unit))\ng/l\n&gt;&gt;&gt;\n</code></pre>\n\n<p><strong>Example 2:</strong> Unit name is a valid Python identifier but is not the same as the Pint Unit definition</p>\n\n<ul>\n<li>Pint unit definition = <code>ft**3/s</code></li>\n<li>Unit name = <code>cfs</code></li>\n<li>Unit aliases =\n<ul>\n<li><code>CFS</code></li>\n<li><code>FT3/S</code></li>\n<li><code>FT3/SEC</code></li>\n<li><code>cu-ft/sec</code></li>\n<li><code>cuft/sec</code></li>\n<li><code>ft3/s</code></li>\n<li><code>ft3/sec</code></li>\n<li><code>ft^3/s</code></li>\n</ul></li>\n</ul>\n\n<pre><code>&gt;&gt;&gt; from hec import unit\n&gt;&gt;&gt; cfs_unit = unit.get_pint_unit(\"CFS\")\n&gt;&gt;&gt; print(repr(cfs_unit))\n&lt;Unit('foot ** 3 / second')&gt;\n&gt;&gt;&gt; print(cfs_unit)\nfoot ** 3 / second\n&gt;&gt;&gt; print(f\"{cfs_unit:D}\")\nfoot ** 3 / second\n&gt;&gt;&gt; print(f\"{cfs_unit:~D}\")\nft ** 3 / s\n&gt;&gt;&gt; print(f\"{cfs_unit:C}\")\nfoot**3/second\n&gt;&gt;&gt; print(f\"{cfs_unit:~C}\")\nft**3/s\n&gt;&gt;&gt; print(f\"{cfs_unit:P}\")\nfoot\u00b3/second\n&gt;&gt;&gt; print(f\"{cfs_unit:~P}\")\nft\u00b3/s\n&gt;&gt;&gt; print(unit.get_unit_name(cfs_unit))\ncfs\n&gt;&gt;&gt;\n</code></pre>\n"}, {"fullname": "hec.unit.get_unit_registry", "modulename": "hec.unit", "qualname": "get_unit_registry", "kind": "function", "doc": "<p>Returns the Pint unit registry. Pint doesn't share unit information between\nregistries so this registry must be used for any modification to the Pint behavior.\nSee <a href=\"https://pint.readthedocs.io\">Pint documentation</a> for more details.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pint.registry.UnitRegistry: the Pint unit registry currently in use</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">UnitRegistry</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.get_unit_context", "modulename": "hec.unit", "qualname": "get_unit_context", "kind": "function", "doc": "<p>Returns the Pint unit registry context.\nSee <a href=\"https://pint.readthedocs.io\">Pint documentation</a> for more details.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pint.facets.context.objects.Context: The unit registry context</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">) -> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">facets</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">Context</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.get_pint_unit", "modulename": "hec.unit", "qualname": "get_pint_unit", "kind": "function", "doc": "<p>Gets the Pint unit object for a specified unit string</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit (str):</strong>  The specified unit. May be a unit name, unit alias, or a Pint unit string</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>UnitException:</strong>  If the specified unit is not a valid unit name, unit alias, or Pint unit string</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pint.Unit: The Pint unit object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unit</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.get_unit_name", "modulename": "hec.unit", "qualname": "get_unit_name", "kind": "function", "doc": "<p>Returns the unit name of a Pint unit (string or object)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit_alias_or_pint_unit (Union[str, pint.Unit]):</strong>  A unit alias or a Pint unit</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError:</strong>  If no unit name exists for the unit alias or Pint unit</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The unit_name</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unit_alias_or_pint_unit</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.get_unit_aliases", "modulename": "hec.unit", "qualname": "get_unit_aliases", "kind": "function", "doc": "<p>Returns a list of aliases for the specified unit</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit (Union[str, pint.Unit]):</strong>  A unit name, Pint Unit definition, or Pint Unit object</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError:</strong>  if the specified unit is not an existing unit name or a Pint Unit\n(definition or object) referenced by a unit_name</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: A list of aliases for the specified unit</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unit</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.get_compatible_units", "modulename": "hec.unit", "qualname": "get_compatible_units", "kind": "function", "doc": "<p>Returns a list of units names that are convertable to/from the specified unit</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit (Union[str, pint.Unit]):</strong>  The unit to get compatible units for</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: The list of compatible unit names</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unit</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.get_unit_system", "modulename": "hec.unit", "qualname": "get_unit_system", "kind": "function", "doc": "<p>Returns the unit system of a unit name or unit alias</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit (str):</strong>  A unit name or unit alias</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError:</strong>  if the specified unit is not an existing unit name or a Pint Unit\n(definition or object) referenced by a unit_name</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Optional[str]: \"EN\" if English, \"SI\" if Syst\u00e8me International, or None if both</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unit</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.get_unit_names_for_unit_system", "modulename": "hec.unit", "qualname": "get_unit_names_for_unit_system", "kind": "function", "doc": "<p>Returns a list of unit names for the specified unit system</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit_system (Optional[str]):</strong>  \"EN\", \"SI\", or None</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>KeyError:</strong>  if the specified unit system is not \"EN\", \"SI\", or None</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: A list of English unit names, Syst\u00e8me International unit names,\n      or unit names used by both (if <code>unit_system</code> is None)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unit_system</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.convert_units", "modulename": "hec.unit", "qualname": "convert_units", "kind": "function", "doc": "<p>Converts an object from one unit to another. If the object is non-convertable\nit is returned unchanged.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>to_convert (Any):</strong>  The object to convert. May be:\n<ul>\n<li>integer</li>\n<li>float</li>\n<li>string</li>\n<li>Pint Quantity</li>\n<li>list</li>\n<li>tuple</li>\n<li>cwms.types.Data</li>\n</ul></li>\n<li><strong>from_unit (Union[pint.Unit, str]):</strong>  The unit to convert from. May be:\n<ul>\n<li>a unit name</li>\n<li>a unit alias</li>\n<li>a valid Pint unit string</li>\n<li>a Pint unit</li>\n</ul></li>\n<li><strong>to_unit (Union[pint.Unit, str]):</strong>  The unit to conver to. May be:\n<ul>\n<li>a unit name</li>\n<li>a unit alias</li>\n<li>a valid Pint unit string</li>\n<li>a Pint unit</li>\n</ul></li>\n<li><strong>in_place (bool):</strong>  for list and cwms.type.Data types, specifies whether to convert the object\nin-place. Ignored for all other data types. If True, the converted object is returned.\nIf False, a converted copy is returned. Defaults to False</li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>UnitException:</strong>  If:\n<ul>\n<li>A string is passed for one of the units that is not:\n<ul>\n<li>a unit name</li>\n<li>a unit alias</li>\n<li>a valid Pint unit string</li>\n</ul></li>\n<li>The object to convert is Pint quantity or cwms.types.Data object whose\nunit is not the same as the <code>from_unit</code>.</li>\n</ul></li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Any: if <code>to_convert</code> is:</p>\n  \n  <ul>\n  <li><strong>integer</strong> or <strong>float:</strong> a <em>float</em> is returned</li>\n  <li><strong>Pint Quantity:</strong>\n  <ul>\n  <li>if <code>from_unit</code> is the same as the unit of <code>to_convert</code>, a converted <em>Pint Quantity</em> is returned</li>\n  <li>if <code>from_unit</code> is not the same as the unit of <code>to_convert</code>, a <code>UnitException</code> is raised</li>\n  </ul></li>\n  <li><strong>string:</strong> a <em>string</em> is returned\n  <ul>\n  <li>if the string is numeric the returned string will be a string of the converted value</li>\n  <li>if the string is not numeric, it is returned unchanged</li>\n  </ul></li>\n  <li><strong>list:</strong>, a <em>list</em> returned with each item either converted or not as specified\n  in the rules above. If <code>in_place</code> == <code>True</code>, the return value can be ignored if desired.</li>\n  <li><strong>tuple:</strong>, a <em>tuple</em> returned with each item either converted or not as specified\n  in the rules above. If in_place == True, the return value can be ignored if desired.</li>\n  <li><strong>cwms.type.Data:</strong>, a <em>cwms.type.Data</em> object is returned. If <code>in_place</code> == <code>True</code>, the return\n  value can be ignored if desired.</li>\n  </ul>\n  \n  <p>Otherwise <code>to_convert</code> is returned unchanged</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">to_convert</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">from_unit</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">to_unit</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.UnitException", "modulename": "hec.unit", "qualname": "UnitException", "kind": "class", "doc": "<p>Exception specific to Unit operations</p>\n", "bases": "builtins.Exception"}, {"fullname": "hec.unit.UnitQuantity", "modulename": "hec.unit", "qualname": "UnitQuantity", "kind": "class", "doc": "<p>Class for scalar values with units.</p>\n\n<p>Thinly wraps pint.UnitRegistry.Quantity, but allows non-identifier unit names to be\nassociated with quantities. Can be used with mathematical, comparison, and conversion\noperators in conjuction with pint.UnitRegistry.Quantity objects and scalars (ints and floats).</p>\n"}, {"fullname": "hec.unit.UnitQuantity.__init__", "modulename": "hec.unit", "qualname": "UnitQuantity.__init__", "kind": "function", "doc": "<p>Creates a UnitQuantity object</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>One argument:</strong> <br>\n<ul>\n<li><code>str</code>: A valid string for <a href=\"https://pint.readthedocs.io/en/stable/user/defining-quantities.html\">Pint string parsing</a></li>\n<li><code>UnitQuantity</code>: Another UnitQuantity object</li>\n<li><code>pint.Quantity</code>: A Pint Quantity object</li>\n</ul></li>\n<li><strong>Two arguments:</strong> <br>\n<ul>\n<li>args[0] (<code>Union[int, float, Fraction]</code>): The magnitude of the quantity</li>\n<li>args[1] (<code>Union[str, pint.Unit</code>): The uni of the quantity</li>\n</ul></li>\n</ul>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>UnitException:</strong>  if in valid arguments are specified</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "hec.unit.UnitQuantity.setDefaultOutputFormat", "modulename": "hec.unit", "qualname": "UnitQuantity.setDefaultOutputFormat", "kind": "function", "doc": "<p>Sets the default output format for new UnitQuantity objects</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>format (Optional[str]):</strong>  <br>\n<ul>\n<li>None: (default value) outputs the units as specified when the UnitQuantity object was created</li>\n<li>Other: Must be a valid <a href=\"https://pint.readthedocs.io/en/stable/user/formatting.html\">Pint format specification</a></li>\n</ul></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.UnitQuantity.output_format", "modulename": "hec.unit", "qualname": "UnitQuantity.output_format", "kind": "variable", "doc": "<p>The output format used for this object if a format specifier is not used. Any format specifier used\nwill override this property.</p>\n\n<p>If <code>None</code>, the unit name or alias specified when the object was creaed will be output (e.g., 10 dsf).\nSee <a href=\"https://pint.readthedocs.io/en/stable/user/formatting.html\">Pint format specification</a> for other formats.</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Write</p>\n</blockquote>\n", "annotation": ": Optional[str]"}, {"fullname": "hec.unit.UnitQuantity.magnitude", "modulename": "hec.unit", "qualname": "UnitQuantity.magnitude", "kind": "variable", "doc": "<p>The magnitude of the object (unitless value)</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Only</p>\n</blockquote>\n", "annotation": ": Any"}, {"fullname": "hec.unit.UnitQuantity.units", "modulename": "hec.unit", "qualname": "UnitQuantity.units", "kind": "variable", "doc": "<p>The Pint unit of the object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Only</p>\n</blockquote>\n", "annotation": ": pint.registry.Unit"}, {"fullname": "hec.unit.UnitQuantity.dimensionality", "modulename": "hec.unit", "qualname": "UnitQuantity.dimensionality", "kind": "variable", "doc": "<p>The dimensionality of the object</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Only</p>\n</blockquote>\n", "annotation": ": pint.util.UnitsContainer"}, {"fullname": "hec.unit.UnitQuantity.specified_units", "modulename": "hec.unit", "qualname": "UnitQuantity.specified_units", "kind": "variable", "doc": "<p>The unit specified when the object was created. May be a unit name, alias, or a pint unit definition</p>\n\n<h6 id=\"operations\">Operations:</h6>\n\n<blockquote>\n  <p>Read/Only</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "hec.unit.UnitQuantity.to", "modulename": "hec.unit", "qualname": "UnitQuantity.to", "kind": "function", "doc": "<p>Converts this object to a different unit</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit (Union[str, pint.Unit]):</strong>  The unit to convert to</li>\n<li><strong>in_place (bool, optional):</strong>  If True, this object is modified and returned Otherwise\na new object is returned. Defaults to False. Using this method with <code>in_place=True</code>\ndiffers from <code>ito()</code> in that the converted object is returned.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>UnitQuantity: The converted object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">unit</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">in_place</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">hec</span><span class=\"o\">.</span><span class=\"n\">unit</span><span class=\"o\">.</span><span class=\"n\">UnitQuantity</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.UnitQuantity.ito", "modulename": "hec.unit", "qualname": "UnitQuantity.ito", "kind": "function", "doc": "<p>Converts this object to a different unit in place. Unlike <code>.to(..., in_place=True)</code>\nno object is returned after the conversion</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>unit (Union[str, pint.Unit]):</strong>  The unit ot convert to</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">unit</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">pint</span><span class=\"o\">.</span><span class=\"n\">registry</span><span class=\"o\">.</span><span class=\"n\">Unit</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.UnitQuantity.getUnitAliases", "modulename": "hec.unit", "qualname": "UnitQuantity.getUnitAliases", "kind": "function", "doc": "<p>Returns a list of unit aliases for the specified unit of this object</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: The list of unit aliases for this object's specified unit</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "hec.unit.UnitQuantity.getCompatibleUnits", "modulename": "hec.unit", "qualname": "UnitQuantity.getCompatibleUnits", "kind": "function", "doc": "<p>Returns a list of compatible unit unit names for the specified unit of this object.\nCompatible units are those that have the same dimensionality.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[str]: The list of compatible unit names for this object's specified unit</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();